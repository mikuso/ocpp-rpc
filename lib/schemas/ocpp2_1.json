[
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:AdjustPeriodicEventStreamRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "PeriodicEventStreamParamsType": {
                "javaType": "PeriodicEventStreamParams",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "interval": {
                        "description": "Time in seconds after which stream data is sent.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "values": {
                        "description": "Number of items to be sent together in stream.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                }
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "id": {
                "type": "integer",
                "minimum": 0
            },
            "params": {
                "$ref": "#/definitions/PeriodicEventStreamParamsType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "id",
            "params"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:AdjustPeriodicEventStreamResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "GenericStatusEnumType": {
                "description": "Status of operation.\r\n",
                "javaType": "GenericStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Accepted",
                    "Rejected"
                ]
            },
            "StatusInfoType": {
                "description": "Element providing more information about the status.\r\n",
                "javaType": "StatusInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "reasonCode": {
                        "description": "A predefined code for the reason why the status is returned in this response. The string is case-insensitive.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "additionalInfo": {
                        "description": "Additional text to provide detailed information.\r\n",
                        "type": "string",
                        "maxLength": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "reasonCode"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "status": {
                "$ref": "#/definitions/GenericStatusEnumType"
            },
            "statusInfo": {
                "$ref": "#/definitions/StatusInfoType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "status"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:AFRRSignalRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "timestamp": {
                "description": "Time when signal becomes active.\r\n",
                "type": "string",
                "format": "date-time"
            },
            "signal": {
                "description": "Value of signal in _v2xSignalWattCurve_. \r\n",
                "type": "integer"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "timestamp",
            "signal"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:AFRRSignalResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "GenericStatusEnumType": {
                "javaType": "GenericStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Accepted",
                    "Rejected"
                ]
            },
            "StatusInfoType": {
                "description": "Element providing more information about the status.\r\n",
                "javaType": "StatusInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "reasonCode": {
                        "description": "A predefined code for the reason why the status is returned in this response. The string is case-insensitive.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "additionalInfo": {
                        "description": "Additional text to provide detailed information.\r\n",
                        "type": "string",
                        "maxLength": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "reasonCode"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "status": {
                "$ref": "#/definitions/GenericStatusEnumType"
            },
            "statusInfo": {
                "$ref": "#/definitions/StatusInfoType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "status"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:AuthorizeRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "HashAlgorithmEnumType": {
                "description": "Used algorithms for the hashes provided.\r\n",
                "javaType": "HashAlgorithmEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "SHA256",
                    "SHA384",
                    "SHA512"
                ]
            },
            "AdditionalInfoType": {
                "description": "Contains a case insensitive identifier to use for the authorization and the type of authorization to support multiple forms of identifiers.\r\n",
                "javaType": "AdditionalInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "additionalIdToken": {
                        "description": "*(2.1)* This field specifies the additional IdToken.\r\n",
                        "type": "string",
                        "maxLength": 255
                    },
                    "type": {
                        "description": "_additionalInfo_ can be used to send extra information to CSMS in addition to the regular authorization with _IdToken_. _AdditionalInfo_ contains one or more custom _types_, which need to be agreed upon by all parties involved. When the _type_ is not supported, the CSMS/Charging Station MAY ignore the _additionalInfo_.\r\n\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "additionalIdToken",
                    "type"
                ]
            },
            "IdTokenType": {
                "description": "Contains a case insensitive identifier to use for the authorization and the type of authorization to support multiple forms of identifiers.\r\n",
                "javaType": "IdToken",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "additionalInfo": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/AdditionalInfoType"
                        },
                        "minItems": 1
                    },
                    "idToken": {
                        "description": "*(2.1)* IdToken is case insensitive. Might hold the hidden id of an RFID tag, but can for example also contain a UUID.\r\n",
                        "type": "string",
                        "maxLength": 255
                    },
                    "type": {
                        "description": "*(2.1)* Enumeration of possible idToken types. Values defined in Appendix as IdTokenEnumStringType.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "idToken",
                    "type"
                ]
            },
            "OCSPRequestDataType": {
                "description": "Information about a certificate for an OCSP check.\r\n",
                "javaType": "OCSPRequestData",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "hashAlgorithm": {
                        "$ref": "#/definitions/HashAlgorithmEnumType"
                    },
                    "issuerNameHash": {
                        "description": "The hash of the issuer’s distinguished\r\nname (DN), that must be calculated over the DER\r\nencoding of the issuer’s name field in the certificate\r\nbeing checked.\r\n",
                        "type": "string",
                        "maxLength": 128
                    },
                    "issuerKeyHash": {
                        "description": "The hash of the DER encoded public key:\r\nthe value (excluding tag and length) of the subject\r\npublic key field in the issuer’s certificate.\r\n",
                        "type": "string",
                        "maxLength": 128
                    },
                    "serialNumber": {
                        "description": "The string representation of the\r\nhexadecimal value of the serial number without the\r\nprefix \"0x\" and without leading zeroes.\r\n",
                        "type": "string",
                        "maxLength": 40
                    },
                    "responderURL": {
                        "description": "This contains the responder URL (Case insensitive). \r\n\r\n",
                        "type": "string",
                        "maxLength": 2000
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "hashAlgorithm",
                    "issuerNameHash",
                    "issuerKeyHash",
                    "serialNumber",
                    "responderURL"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "idToken": {
                "$ref": "#/definitions/IdTokenType"
            },
            "certificate": {
                "description": "*(2.1)* The X.509 certificate chain presented by EV and encoded in PEM format. Order of certificates in chain is from leaf up to (but excluding) root certificate. +\r\nOnly needed in case of central contract validation when Charging Station cannot validate the contract certificate.\r\n\r\n",
                "type": "string",
                "maxLength": 10000
            },
            "iso15118CertificateHashData": {
                "type": "array",
                "additionalItems": false,
                "items": {
                    "$ref": "#/definitions/OCSPRequestDataType"
                },
                "minItems": 1,
                "maxItems": 4
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "idToken"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:AuthorizeResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "AuthorizationStatusEnumType": {
                "description": "Current status of the ID Token.\r\n",
                "javaType": "AuthorizationStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Accepted",
                    "Blocked",
                    "ConcurrentTx",
                    "Expired",
                    "Invalid",
                    "NoCredit",
                    "NotAllowedTypeEVSE",
                    "NotAtThisLocation",
                    "NotAtThisTime",
                    "Unknown"
                ]
            },
            "AuthorizeCertificateStatusEnumType": {
                "description": "Certificate status information. \r\n- if all certificates are valid: return 'Accepted'.\r\n- if one of the certificates was revoked, return 'CertificateRevoked'.\r\n",
                "javaType": "AuthorizeCertificateStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Accepted",
                    "SignatureError",
                    "CertificateExpired",
                    "CertificateRevoked",
                    "NoCertificateAvailable",
                    "CertChainError",
                    "ContractCancelled"
                ]
            },
            "DayOfWeekEnumType": {
                "javaType": "DayOfWeekEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Monday",
                    "Tuesday",
                    "Wednesday",
                    "Thursday",
                    "Friday",
                    "Saturday",
                    "Sunday"
                ]
            },
            "EnergyTransferModeEnumType": {
                "javaType": "EnergyTransferModeEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "AC_single_phase",
                    "AC_two_phase",
                    "AC_three_phase",
                    "DC",
                    "AC_BPT",
                    "AC_BPT_DER",
                    "AC_DER",
                    "DC_BPT",
                    "DC_ACDP",
                    "DC_ACDP_BPT",
                    "WPT"
                ]
            },
            "EvseKindEnumType": {
                "description": "Type of EVSE (AC, DC) this tariff applies to.\r\n",
                "javaType": "EvseKindEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "AC",
                    "DC"
                ]
            },
            "MessageFormatEnumType": {
                "description": "Format of the message.\r\n",
                "javaType": "MessageFormatEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "ASCII",
                    "HTML",
                    "URI",
                    "UTF8",
                    "QRCODE"
                ]
            },
            "AdditionalInfoType": {
                "description": "Contains a case insensitive identifier to use for the authorization and the type of authorization to support multiple forms of identifiers.\r\n",
                "javaType": "AdditionalInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "additionalIdToken": {
                        "description": "*(2.1)* This field specifies the additional IdToken.\r\n",
                        "type": "string",
                        "maxLength": 255
                    },
                    "type": {
                        "description": "_additionalInfo_ can be used to send extra information to CSMS in addition to the regular authorization with _IdToken_. _AdditionalInfo_ contains one or more custom _types_, which need to be agreed upon by all parties involved. When the _type_ is not supported, the CSMS/Charging Station MAY ignore the _additionalInfo_.\r\n\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "additionalIdToken",
                    "type"
                ]
            },
            "IdTokenInfoType": {
                "description": "Contains status information about an identifier.\r\nIt is advised to not stop charging for a token that expires during charging, as ExpiryDate is only used for caching purposes. If ExpiryDate is not given, the status has no end date.\r\n",
                "javaType": "IdTokenInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "status": {
                        "$ref": "#/definitions/AuthorizationStatusEnumType"
                    },
                    "cacheExpiryDateTime": {
                        "description": "Date and Time after which the token must be considered invalid.\r\n",
                        "type": "string",
                        "format": "date-time"
                    },
                    "chargingPriority": {
                        "description": "Priority from a business point of view. Default priority is 0, The range is from -9 to 9. Higher values indicate a higher priority. The chargingPriority in &lt;&lt;transactioneventresponse,TransactionEventResponse&gt;&gt; overrules this one. \r\n",
                        "type": "integer"
                    },
                    "groupIdToken": {
                        "$ref": "#/definitions/IdTokenType"
                    },
                    "language1": {
                        "description": "Preferred user interface language of identifier user. Contains a language code as defined in &lt;&lt;ref-RFC5646,[RFC5646]&gt;&gt;.\r\n\r\n",
                        "type": "string",
                        "maxLength": 8
                    },
                    "language2": {
                        "description": "Second preferred user interface language of identifier user. Don’t use when language1 is omitted, has to be different from language1. Contains a language code as defined in &lt;&lt;ref-RFC5646,[RFC5646]&gt;&gt;.\r\n",
                        "type": "string",
                        "maxLength": 8
                    },
                    "evseId": {
                        "description": "Only used when the IdToken is only valid for one or more specific EVSEs, not for the entire Charging Station.\r\n\r\n",
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "type": "integer",
                            "minimum": 0
                        },
                        "minItems": 1
                    },
                    "personalMessage": {
                        "$ref": "#/definitions/MessageContentType"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "status"
                ]
            },
            "IdTokenType": {
                "description": "Contains a case insensitive identifier to use for the authorization and the type of authorization to support multiple forms of identifiers.\r\n",
                "javaType": "IdToken",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "additionalInfo": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/AdditionalInfoType"
                        },
                        "minItems": 1
                    },
                    "idToken": {
                        "description": "*(2.1)* IdToken is case insensitive. Might hold the hidden id of an RFID tag, but can for example also contain a UUID.\r\n",
                        "type": "string",
                        "maxLength": 255
                    },
                    "type": {
                        "description": "*(2.1)* Enumeration of possible idToken types. Values defined in Appendix as IdTokenEnumStringType.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "idToken",
                    "type"
                ]
            },
            "MessageContentType": {
                "description": "Contains message details, for a message to be displayed on a Charging Station.\r\n\r\n",
                "javaType": "MessageContent",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "format": {
                        "$ref": "#/definitions/MessageFormatEnumType"
                    },
                    "language": {
                        "description": "Message language identifier. Contains a language code as defined in &lt;&lt;ref-RFC5646,[RFC5646]&gt;&gt;.\r\n",
                        "type": "string",
                        "maxLength": 8
                    },
                    "content": {
                        "description": "*(2.1)* Required. Message contents. +\r\nMaximum length supported by Charging Station is given in OCPPCommCtrlr.FieldLength[\"MessageContentType.content\"].\r\n    Maximum length defaults to 1024.\r\n\r\n",
                        "type": "string",
                        "maxLength": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "format",
                    "content"
                ]
            },
            "PriceType": {
                "description": "Price with and without tax. At least one of _exclTax_, _inclTax_ must be present.\r\n",
                "javaType": "Price",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "exclTax": {
                        "description": "Price/cost excluding tax. Can be absent if _inclTax_ is present.\r\n",
                        "type": "number"
                    },
                    "inclTax": {
                        "description": "Price/cost including tax. Can be absent if _exclTax_ is present.\r\n",
                        "type": "number"
                    },
                    "taxRates": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/TaxRateType"
                        },
                        "minItems": 1,
                        "maxItems": 5
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                }
            },
            "TariffConditionsFixedType": {
                "description": "These conditions describe if a FixedPrice applies at start of the transaction.\r\n\r\nWhen more than one restriction is set, they are to be treated as a logical AND. All need to be valid before this price is active.\r\n\r\nNOTE: _startTimeOfDay_ and _endTimeOfDay_ are in local time, because it is the time in the tariff as it is shown to the EV driver at the Charging Station.\r\nA Charging Station will convert this to the internal time zone that it uses (which is recommended to be UTC, see section Generic chapter 3.1) when performing cost calculation.\r\n\r\n",
                "javaType": "TariffConditionsFixed",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "startTimeOfDay": {
                        "description": "Start time of day in local time. +\r\nFormat as per RFC 3339: time-hour \":\" time-minute  +\r\nMust be in 24h format with leading zeros. Hour/Minute separator: \":\"\r\nRegex: ([0-1][0-9]\\|2[0-3]):[0-5][0-9]\r\n",
                        "type": "string"
                    },
                    "endTimeOfDay": {
                        "description": "End time of day in local time. Same syntax as _startTimeOfDay_. +\r\n    If end time &lt; start time then the period wraps around to the next day. +\r\n    To stop at end of the day use: 00:00.\r\n",
                        "type": "string"
                    },
                    "dayOfWeek": {
                        "description": "Day(s) of the week this is tariff applies.\r\n",
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/DayOfWeekEnumType"
                        },
                        "minItems": 1,
                        "maxItems": 7
                    },
                    "validFromDate": {
                        "description": "Start date in local time, for example: 2015-12-24.\r\nValid from this day (inclusive). +\r\nFormat as per RFC 3339: full-date  + \r\n\r\nRegex: ([12][0-9]{3})-(0[1-9]\\|1[0-2])-(0[1-9]\\|[12][0-9]\\|3[01])\r\n",
                        "type": "string"
                    },
                    "validToDate": {
                        "description": "End date in local time, for example: 2015-12-27.\r\n    Valid until this day (exclusive). Same syntax as _validFromDate_.\r\n",
                        "type": "string"
                    },
                    "evseKind": {
                        "$ref": "#/definitions/EvseKindEnumType"
                    },
                    "paymentBrand": {
                        "description": "For which payment brand this (adhoc) tariff applies. Can be used to add a surcharge for certain payment brands.\r\n    Based on value of _additionalIdToken_ from _idToken.additionalInfo.type_ = \"PaymentBrand\".\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "paymentRecognition": {
                        "description": "Type of adhoc payment, e.g. CC, Debit.\r\n    Based on value of _additionalIdToken_ from _idToken.additionalInfo.type_ = \"PaymentRecognition\".\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                }
            },
            "TariffConditionsType": {
                "description": "These conditions describe if and when a TariffEnergyType or TariffTimeType applies during a transaction.\r\n\r\nWhen more than one restriction is set, they are to be treated as a logical AND. All need to be valid before this price is active.\r\n\r\nFor reverse energy flow (discharging) negative values of energy, power and current are used.\r\n\r\nNOTE: _minXXX_ (where XXX = Kwh/A/Kw) must be read as \"closest to zero\", and _maxXXX_ as \"furthest from zero\". For example, a *charging* power range from 10 kW to 50 kWh is given by _minPower_ = 10000 and _maxPower_ = 50000, and a *discharging* power range from -10 kW to -50 kW is given by _minPower_ = -10 and _maxPower_ = -50.\r\n\r\nNOTE: _startTimeOfDay_ and _endTimeOfDay_ are in local time, because it is the time in the tariff as it is shown to the EV driver at the Charging Station.\r\nA Charging Station will convert this to the internal time zone that it uses (which is recommended to be UTC, see section Generic chapter 3.1) when performing cost calculation.\r\n\r\n",
                "javaType": "TariffConditions",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "startTimeOfDay": {
                        "description": "Start time of day in local time. +\r\nFormat as per RFC 3339: time-hour \":\" time-minute  +\r\nMust be in 24h format with leading zeros. Hour/Minute separator: \":\"\r\nRegex: ([0-1][0-9]\\|2[0-3]):[0-5][0-9]\r\n",
                        "type": "string"
                    },
                    "endTimeOfDay": {
                        "description": "End time of day in local time. Same syntax as _startTimeOfDay_. +\r\n    If end time &lt; start time then the period wraps around to the next day. +\r\n    To stop at end of the day use: 00:00.\r\n",
                        "type": "string"
                    },
                    "dayOfWeek": {
                        "description": "Day(s) of the week this is tariff applies.\r\n",
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/DayOfWeekEnumType"
                        },
                        "minItems": 1,
                        "maxItems": 7
                    },
                    "validFromDate": {
                        "description": "Start date in local time, for example: 2015-12-24.\r\nValid from this day (inclusive). +\r\nFormat as per RFC 3339: full-date  + \r\n\r\nRegex: ([12][0-9]{3})-(0[1-9]\\|1[0-2])-(0[1-9]\\|[12][0-9]\\|3[01])\r\n",
                        "type": "string"
                    },
                    "validToDate": {
                        "description": "End date in local time, for example: 2015-12-27.\r\n    Valid until this day (exclusive). Same syntax as _validFromDate_.\r\n",
                        "type": "string"
                    },
                    "evseKind": {
                        "$ref": "#/definitions/EvseKindEnumType"
                    },
                    "minEnergy": {
                        "description": "Minimum consumed energy in Wh, for example 20000 Wh.\r\n    Valid from this amount of energy (inclusive) being used.\r\n",
                        "type": "number"
                    },
                    "maxEnergy": {
                        "description": "Maximum consumed energy in Wh, for example 50000 Wh.\r\n    Valid until this amount of energy (exclusive) being used.\r\n",
                        "type": "number"
                    },
                    "minCurrent": {
                        "description": "Sum of the minimum current (in Amperes) over all phases, for example 5 A.\r\n    When the EV is charging with more than, or equal to, the defined amount of current, this price is/becomes active. If the charging current is or becomes lower, this price is not or no longer valid and becomes inactive. +\r\n    This is NOT about the minimum current over the entire transaction.\r\n",
                        "type": "number"
                    },
                    "maxCurrent": {
                        "description": "Sum of the maximum current (in Amperes) over all phases, for example 20 A.\r\n      When the EV is charging with less than the defined amount of current, this price becomes/is active. If the charging current is or becomes higher, this price is not or no longer valid and becomes inactive.\r\n      This is NOT about the maximum current over the entire transaction.\r\n",
                        "type": "number"
                    },
                    "minPower": {
                        "description": "Minimum power in W, for example 5000 W.\r\n      When the EV is charging with more than, or equal to, the defined amount of power, this price is/becomes active.\r\n      If the charging power is or becomes lower, this price is not or no longer valid and becomes inactive.\r\n      This is NOT about the minimum power over the entire transaction.\r\n",
                        "type": "number"
                    },
                    "maxPower": {
                        "description": "Maximum power in W, for example 20000 W.\r\n      When the EV is charging with less than the defined amount of power, this price becomes/is active.\r\n      If the charging power is or becomes higher, this price is not or no longer valid and becomes inactive.\r\n      This is NOT about the maximum power over the entire transaction.\r\n",
                        "type": "number"
                    },
                    "minTime": {
                        "description": "Minimum duration in seconds the transaction (charging &amp; idle) MUST last (inclusive).\r\n      When the duration of a transaction is longer than the defined value, this price is or becomes active.\r\n      Before that moment, this price is not yet active.\r\n",
                        "type": "integer"
                    },
                    "maxTime": {
                        "description": "Maximum duration in seconds the transaction (charging &amp; idle) MUST last (exclusive).\r\n      When the duration of a transaction is shorter than the defined value, this price is or becomes active.\r\n      After that moment, this price is no longer active.\r\n",
                        "type": "integer"
                    },
                    "minChargingTime": {
                        "description": "Minimum duration in seconds the charging MUST last (inclusive).\r\n      When the duration of a charging is longer than the defined value, this price is or becomes active.\r\n      Before that moment, this price is not yet active.\r\n",
                        "type": "integer"
                    },
                    "maxChargingTime": {
                        "description": "Maximum duration in seconds the charging MUST last (exclusive).\r\n      When the duration of a charging is shorter than the defined value, this price is or becomes active.\r\n      After that moment, this price is no longer active.\r\n",
                        "type": "integer"
                    },
                    "minIdleTime": {
                        "description": "Minimum duration in seconds the idle period (i.e. not charging) MUST last (inclusive).\r\n      When the duration of the idle time is longer than the defined value, this price is or becomes active.\r\n      Before that moment, this price is not yet active.\r\n",
                        "type": "integer"
                    },
                    "maxIdleTime": {
                        "description": "Maximum duration in seconds the idle period (i.e. not charging) MUST last (exclusive).\r\n      When the duration of idle time is shorter than the defined value, this price is or becomes active.\r\n      After that moment, this price is no longer active.\r\n",
                        "type": "integer"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                }
            },
            "TariffEnergyPriceType": {
                "description": "Tariff with optional conditions for an energy price.\r\n",
                "javaType": "TariffEnergyPrice",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "priceKwh": {
                        "description": "Price per kWh (excl. tax) for this element.\r\n",
                        "type": "number"
                    },
                    "conditions": {
                        "$ref": "#/definitions/TariffConditionsType"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "priceKwh"
                ]
            },
            "TariffEnergyType": {
                "description": "Price elements and tax for energy\r\n",
                "javaType": "TariffEnergy",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "prices": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/TariffEnergyPriceType"
                        },
                        "minItems": 1
                    },
                    "taxRates": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/TaxRateType"
                        },
                        "minItems": 1,
                        "maxItems": 5
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "prices"
                ]
            },
            "TariffFixedPriceType": {
                "description": "Tariff with optional conditions for a fixed price.\r\n",
                "javaType": "TariffFixedPrice",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "conditions": {
                        "$ref": "#/definitions/TariffConditionsFixedType"
                    },
                    "priceFixed": {
                        "description": "Fixed price  for this element e.g. a start fee.\r\n",
                        "type": "number"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "priceFixed"
                ]
            },
            "TariffFixedType": {
                "javaType": "TariffFixed",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "prices": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/TariffFixedPriceType"
                        },
                        "minItems": 1
                    },
                    "taxRates": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/TaxRateType"
                        },
                        "minItems": 1,
                        "maxItems": 5
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "prices"
                ]
            },
            "TariffTimePriceType": {
                "description": "Tariff with optional conditions for a time duration price.\r\n",
                "javaType": "TariffTimePrice",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "priceMinute": {
                        "description": "Price per minute (excl. tax) for this element.\r\n",
                        "type": "number"
                    },
                    "conditions": {
                        "$ref": "#/definitions/TariffConditionsType"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "priceMinute"
                ]
            },
            "TariffTimeType": {
                "description": "Price elements and tax for time\r\n\r\n",
                "javaType": "TariffTime",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "prices": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/TariffTimePriceType"
                        },
                        "minItems": 1
                    },
                    "taxRates": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/TaxRateType"
                        },
                        "minItems": 1,
                        "maxItems": 5
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "prices"
                ]
            },
            "TariffType": {
                "description": "A tariff is described by fields with prices for:\r\nenergy,\r\ncharging time,\r\nidle time,\r\nfixed fee,\r\nreservation time,\r\nreservation fixed fee. +\r\nEach of these fields may have (optional) conditions that specify when a price is applicable. +\r\nThe _description_ contains a human-readable explanation of the tariff to be shown to the user. +\r\nThe other fields are parameters that define the tariff. These are used by the charging station to calculate the price.\r\n",
                "javaType": "Tariff",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "tariffId": {
                        "description": "Unique id of tariff\r\n",
                        "type": "string",
                        "maxLength": 60
                    },
                    "description": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/MessageContentType"
                        },
                        "minItems": 1,
                        "maxItems": 10
                    },
                    "currency": {
                        "description": "Currency code according to ISO 4217\r\n",
                        "type": "string",
                        "maxLength": 3
                    },
                    "energy": {
                        "$ref": "#/definitions/TariffEnergyType"
                    },
                    "validFrom": {
                        "description": "Time when this tariff becomes active. When absent, it is immediately active.\r\n",
                        "type": "string",
                        "format": "date-time"
                    },
                    "chargingTime": {
                        "$ref": "#/definitions/TariffTimeType"
                    },
                    "idleTime": {
                        "$ref": "#/definitions/TariffTimeType"
                    },
                    "fixedFee": {
                        "$ref": "#/definitions/TariffFixedType"
                    },
                    "reservationTime": {
                        "$ref": "#/definitions/TariffTimeType"
                    },
                    "reservationFixed": {
                        "$ref": "#/definitions/TariffFixedType"
                    },
                    "minCost": {
                        "$ref": "#/definitions/PriceType"
                    },
                    "maxCost": {
                        "$ref": "#/definitions/PriceType"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "tariffId",
                    "currency"
                ]
            },
            "TaxRateType": {
                "description": "Tax percentage\r\n",
                "javaType": "TaxRate",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "type": {
                        "description": "Type of this tax, e.g.  \"Federal \",  \"State\", for information on receipt.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "tax": {
                        "description": "Tax percentage\r\n",
                        "type": "number"
                    },
                    "stack": {
                        "description": "Stack level for this type of tax. Default value, when absent, is 0. +\r\n_stack_ = 0: tax on net price; +\r\n_stack_ = 1: tax added on top of _stack_ 0; +\r\n_stack_ = 2: tax added on top of _stack_ 1, etc. \r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "type",
                    "tax"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "idTokenInfo": {
                "$ref": "#/definitions/IdTokenInfoType"
            },
            "certificateStatus": {
                "$ref": "#/definitions/AuthorizeCertificateStatusEnumType"
            },
            "allowedEnergyTransfer": {
                "description": "*(2.1)* List of allowed energy transfer modes the EV can choose from. If omitted this defaults to charging only.\r\n\r\n\r\n",
                "type": "array",
                "additionalItems": false,
                "items": {
                    "$ref": "#/definitions/EnergyTransferModeEnumType"
                },
                "minItems": 1
            },
            "tariff": {
                "$ref": "#/definitions/TariffType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "idTokenInfo"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:BatterySwapRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "BatterySwapEventEnumType": {
                "description": "Battery in/out\r\n",
                "javaType": "BatterySwapEventEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "BatteryIn",
                    "BatteryOut",
                    "BatteryOutTimeout"
                ]
            },
            "AdditionalInfoType": {
                "description": "Contains a case insensitive identifier to use for the authorization and the type of authorization to support multiple forms of identifiers.\r\n",
                "javaType": "AdditionalInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "additionalIdToken": {
                        "description": "*(2.1)* This field specifies the additional IdToken.\r\n",
                        "type": "string",
                        "maxLength": 255
                    },
                    "type": {
                        "description": "_additionalInfo_ can be used to send extra information to CSMS in addition to the regular authorization with _IdToken_. _AdditionalInfo_ contains one or more custom _types_, which need to be agreed upon by all parties involved. When the _type_ is not supported, the CSMS/Charging Station MAY ignore the _additionalInfo_.\r\n\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "additionalIdToken",
                    "type"
                ]
            },
            "BatteryDataType": {
                "javaType": "BatteryData",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "evseId": {
                        "description": "Slot number where battery is inserted or removed.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "serialNumber": {
                        "description": "Serial number of battery.\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "soC": {
                        "description": "State of charge\r\n",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 100
                    },
                    "soH": {
                        "description": "State of health\r\n\r\n",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 100
                    },
                    "productionDate": {
                        "description": "Production date of battery.\r\n\r\n",
                        "type": "string",
                        "format": "date-time"
                    },
                    "vendorInfo": {
                        "description": "Vendor-specific info from battery in undefined format.\r\n",
                        "type": "string",
                        "maxLength": 500
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "evseId",
                    "serialNumber",
                    "soC",
                    "soH"
                ]
            },
            "IdTokenType": {
                "description": "Contains a case insensitive identifier to use for the authorization and the type of authorization to support multiple forms of identifiers.\r\n",
                "javaType": "IdToken",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "additionalInfo": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/AdditionalInfoType"
                        },
                        "minItems": 1
                    },
                    "idToken": {
                        "description": "*(2.1)* IdToken is case insensitive. Might hold the hidden id of an RFID tag, but can for example also contain a UUID.\r\n",
                        "type": "string",
                        "maxLength": 255
                    },
                    "type": {
                        "description": "*(2.1)* Enumeration of possible idToken types. Values defined in Appendix as IdTokenEnumStringType.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "idToken",
                    "type"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "batteryData": {
                "type": "array",
                "additionalItems": false,
                "items": {
                    "$ref": "#/definitions/BatteryDataType"
                },
                "minItems": 1
            },
            "eventType": {
                "$ref": "#/definitions/BatterySwapEventEnumType"
            },
            "idToken": {
                "$ref": "#/definitions/IdTokenType"
            },
            "requestId": {
                "description": "RequestId to correlate BatteryIn/Out events and optional RequestBatterySwapRequest.\r\n\r\n\r\n",
                "type": "integer"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "eventType",
            "requestId",
            "idToken",
            "batteryData"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:BatterySwapResponse",
        "description": "This is an empty response that just acknowledges receipt of the request. (The request cannot be rejected).\r\n",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        }
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:BootNotificationRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "BootReasonEnumType": {
                "description": "This contains the reason for sending this message to the CSMS.\r\n",
                "javaType": "BootReasonEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "ApplicationReset",
                    "FirmwareUpdate",
                    "LocalReset",
                    "PowerUp",
                    "RemoteReset",
                    "ScheduledReset",
                    "Triggered",
                    "Unknown",
                    "Watchdog"
                ]
            },
            "ChargingStationType": {
                "description": "The physical system where an Electrical Vehicle (EV) can be charged.\r\n",
                "javaType": "ChargingStation",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "serialNumber": {
                        "description": "Vendor-specific device identifier.\r\n",
                        "type": "string",
                        "maxLength": 25
                    },
                    "model": {
                        "description": "Defines the model of the device.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "modem": {
                        "$ref": "#/definitions/ModemType"
                    },
                    "vendorName": {
                        "description": "Identifies the vendor (not necessarily in a unique manner).\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "firmwareVersion": {
                        "description": "This contains the firmware version of the Charging Station.\r\n\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "model",
                    "vendorName"
                ]
            },
            "ModemType": {
                "description": "Defines parameters required for initiating and maintaining wireless communication with other devices.\r\n",
                "javaType": "Modem",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "iccid": {
                        "description": "This contains the ICCID of the modem’s SIM card.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "imsi": {
                        "description": "This contains the IMSI of the modem’s SIM card.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                }
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "chargingStation": {
                "$ref": "#/definitions/ChargingStationType"
            },
            "reason": {
                "$ref": "#/definitions/BootReasonEnumType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "reason",
            "chargingStation"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:BootNotificationResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "RegistrationStatusEnumType": {
                "description": "This contains whether the Charging Station has been registered\r\nwithin the CSMS.\r\n",
                "javaType": "RegistrationStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Accepted",
                    "Pending",
                    "Rejected"
                ]
            },
            "StatusInfoType": {
                "description": "Element providing more information about the status.\r\n",
                "javaType": "StatusInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "reasonCode": {
                        "description": "A predefined code for the reason why the status is returned in this response. The string is case-insensitive.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "additionalInfo": {
                        "description": "Additional text to provide detailed information.\r\n",
                        "type": "string",
                        "maxLength": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "reasonCode"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "currentTime": {
                "description": "This contains the CSMS’s current time.\r\n",
                "type": "string",
                "format": "date-time"
            },
            "interval": {
                "description": "When &lt;&lt;cmn_registrationstatusenumtype,Status&gt;&gt; is Accepted, this contains the heartbeat interval in seconds. If the CSMS returns something other than Accepted, the value of the interval field indicates the minimum wait time before sending a next BootNotification request.\r\n",
                "type": "integer"
            },
            "status": {
                "$ref": "#/definitions/RegistrationStatusEnumType"
            },
            "statusInfo": {
                "$ref": "#/definitions/StatusInfoType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "currentTime",
            "interval",
            "status"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:CancelReservationRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "reservationId": {
                "description": "Id of the reservation to cancel.\r\n",
                "type": "integer",
                "minimum": 0
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "reservationId"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:CancelReservationResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "CancelReservationStatusEnumType": {
                "description": "This indicates the success or failure of the canceling of a reservation by CSMS.\r\n",
                "javaType": "CancelReservationStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Accepted",
                    "Rejected"
                ]
            },
            "StatusInfoType": {
                "description": "Element providing more information about the status.\r\n",
                "javaType": "StatusInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "reasonCode": {
                        "description": "A predefined code for the reason why the status is returned in this response. The string is case-insensitive.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "additionalInfo": {
                        "description": "Additional text to provide detailed information.\r\n",
                        "type": "string",
                        "maxLength": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "reasonCode"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "status": {
                "$ref": "#/definitions/CancelReservationStatusEnumType"
            },
            "statusInfo": {
                "$ref": "#/definitions/StatusInfoType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "status"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:CertificateSignedRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "CertificateSigningUseEnumType": {
                "description": "Indicates the type of the signed certificate that is returned. When omitted the certificate is used for both the 15118 connection (if implemented) and the Charging Station to CSMS connection. This field is required when a typeOfCertificate was included in the &lt;&lt;signcertificaterequest,SignCertificateRequest&gt;&gt; that requested this certificate to be signed AND both the 15118 connection and the Charging Station connection are implemented.\r\n\r\n",
                "javaType": "CertificateSigningUseEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "ChargingStationCertificate",
                    "V2GCertificate",
                    "V2G20Certificate"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "certificateChain": {
                "description": "The signed PEM encoded X.509 certificate. This SHALL also contain the necessary sub CA certificates, when applicable. The order of the bundle follows the certificate chain, starting from the leaf certificate.\r\n\r\nThe Configuration Variable &lt;&lt;configkey-max-certificate-chain-size,MaxCertificateChainSize&gt;&gt; can be used to limit the maximum size of this field.\r\n",
                "type": "string",
                "maxLength": 10000
            },
            "certificateType": {
                "$ref": "#/definitions/CertificateSigningUseEnumType"
            },
            "requestId": {
                "description": "*(2.1)* RequestId to correlate this message with the SignCertificateRequest.\r\n",
                "type": "integer"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "certificateChain"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:CertificateSignedResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "CertificateSignedStatusEnumType": {
                "description": "Returns whether certificate signing has been accepted, otherwise rejected.\r\n",
                "javaType": "CertificateSignedStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Accepted",
                    "Rejected"
                ]
            },
            "StatusInfoType": {
                "description": "Element providing more information about the status.\r\n",
                "javaType": "StatusInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "reasonCode": {
                        "description": "A predefined code for the reason why the status is returned in this response. The string is case-insensitive.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "additionalInfo": {
                        "description": "Additional text to provide detailed information.\r\n",
                        "type": "string",
                        "maxLength": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "reasonCode"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "status": {
                "$ref": "#/definitions/CertificateSignedStatusEnumType"
            },
            "statusInfo": {
                "$ref": "#/definitions/StatusInfoType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "status"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:ChangeAvailabilityRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "OperationalStatusEnumType": {
                "description": "This contains the type of availability change that the Charging Station should perform.\r\n\r\n",
                "javaType": "OperationalStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Inoperative",
                    "Operative"
                ]
            },
            "EVSEType": {
                "description": "Electric Vehicle Supply Equipment\r\n",
                "javaType": "EVSE",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "id": {
                        "description": "EVSE Identifier. This contains a number (&gt; 0) designating an EVSE of the Charging Station.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "connectorId": {
                        "description": "An id to designate a specific connector (on an EVSE) by connector index number.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "id"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "evse": {
                "$ref": "#/definitions/EVSEType"
            },
            "operationalStatus": {
                "$ref": "#/definitions/OperationalStatusEnumType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "operationalStatus"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:ChangeAvailabilityResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "ChangeAvailabilityStatusEnumType": {
                "description": "This indicates whether the Charging Station is able to perform the availability change.\r\n",
                "javaType": "ChangeAvailabilityStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Accepted",
                    "Rejected",
                    "Scheduled"
                ]
            },
            "StatusInfoType": {
                "description": "Element providing more information about the status.\r\n",
                "javaType": "StatusInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "reasonCode": {
                        "description": "A predefined code for the reason why the status is returned in this response. The string is case-insensitive.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "additionalInfo": {
                        "description": "Additional text to provide detailed information.\r\n",
                        "type": "string",
                        "maxLength": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "reasonCode"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "status": {
                "$ref": "#/definitions/ChangeAvailabilityStatusEnumType"
            },
            "statusInfo": {
                "$ref": "#/definitions/StatusInfoType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "status"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:ChangeTransactionTariffRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "DayOfWeekEnumType": {
                "javaType": "DayOfWeekEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Monday",
                    "Tuesday",
                    "Wednesday",
                    "Thursday",
                    "Friday",
                    "Saturday",
                    "Sunday"
                ]
            },
            "EvseKindEnumType": {
                "description": "Type of EVSE (AC, DC) this tariff applies to.\r\n",
                "javaType": "EvseKindEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "AC",
                    "DC"
                ]
            },
            "MessageFormatEnumType": {
                "description": "Format of the message.\r\n",
                "javaType": "MessageFormatEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "ASCII",
                    "HTML",
                    "URI",
                    "UTF8",
                    "QRCODE"
                ]
            },
            "MessageContentType": {
                "description": "Contains message details, for a message to be displayed on a Charging Station.\r\n\r\n",
                "javaType": "MessageContent",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "format": {
                        "$ref": "#/definitions/MessageFormatEnumType"
                    },
                    "language": {
                        "description": "Message language identifier. Contains a language code as defined in &lt;&lt;ref-RFC5646,[RFC5646]&gt;&gt;.\r\n",
                        "type": "string",
                        "maxLength": 8
                    },
                    "content": {
                        "description": "*(2.1)* Required. Message contents. +\r\nMaximum length supported by Charging Station is given in OCPPCommCtrlr.FieldLength[\"MessageContentType.content\"].\r\n    Maximum length defaults to 1024.\r\n\r\n",
                        "type": "string",
                        "maxLength": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "format",
                    "content"
                ]
            },
            "PriceType": {
                "description": "Price with and without tax. At least one of _exclTax_, _inclTax_ must be present.\r\n",
                "javaType": "Price",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "exclTax": {
                        "description": "Price/cost excluding tax. Can be absent if _inclTax_ is present.\r\n",
                        "type": "number"
                    },
                    "inclTax": {
                        "description": "Price/cost including tax. Can be absent if _exclTax_ is present.\r\n",
                        "type": "number"
                    },
                    "taxRates": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/TaxRateType"
                        },
                        "minItems": 1,
                        "maxItems": 5
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                }
            },
            "TariffConditionsFixedType": {
                "description": "These conditions describe if a FixedPrice applies at start of the transaction.\r\n\r\nWhen more than one restriction is set, they are to be treated as a logical AND. All need to be valid before this price is active.\r\n\r\nNOTE: _startTimeOfDay_ and _endTimeOfDay_ are in local time, because it is the time in the tariff as it is shown to the EV driver at the Charging Station.\r\nA Charging Station will convert this to the internal time zone that it uses (which is recommended to be UTC, see section Generic chapter 3.1) when performing cost calculation.\r\n\r\n",
                "javaType": "TariffConditionsFixed",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "startTimeOfDay": {
                        "description": "Start time of day in local time. +\r\nFormat as per RFC 3339: time-hour \":\" time-minute  +\r\nMust be in 24h format with leading zeros. Hour/Minute separator: \":\"\r\nRegex: ([0-1][0-9]\\|2[0-3]):[0-5][0-9]\r\n",
                        "type": "string"
                    },
                    "endTimeOfDay": {
                        "description": "End time of day in local time. Same syntax as _startTimeOfDay_. +\r\n    If end time &lt; start time then the period wraps around to the next day. +\r\n    To stop at end of the day use: 00:00.\r\n",
                        "type": "string"
                    },
                    "dayOfWeek": {
                        "description": "Day(s) of the week this is tariff applies.\r\n",
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/DayOfWeekEnumType"
                        },
                        "minItems": 1,
                        "maxItems": 7
                    },
                    "validFromDate": {
                        "description": "Start date in local time, for example: 2015-12-24.\r\nValid from this day (inclusive). +\r\nFormat as per RFC 3339: full-date  + \r\n\r\nRegex: ([12][0-9]{3})-(0[1-9]\\|1[0-2])-(0[1-9]\\|[12][0-9]\\|3[01])\r\n",
                        "type": "string"
                    },
                    "validToDate": {
                        "description": "End date in local time, for example: 2015-12-27.\r\n    Valid until this day (exclusive). Same syntax as _validFromDate_.\r\n",
                        "type": "string"
                    },
                    "evseKind": {
                        "$ref": "#/definitions/EvseKindEnumType"
                    },
                    "paymentBrand": {
                        "description": "For which payment brand this (adhoc) tariff applies. Can be used to add a surcharge for certain payment brands.\r\n    Based on value of _additionalIdToken_ from _idToken.additionalInfo.type_ = \"PaymentBrand\".\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "paymentRecognition": {
                        "description": "Type of adhoc payment, e.g. CC, Debit.\r\n    Based on value of _additionalIdToken_ from _idToken.additionalInfo.type_ = \"PaymentRecognition\".\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                }
            },
            "TariffConditionsType": {
                "description": "These conditions describe if and when a TariffEnergyType or TariffTimeType applies during a transaction.\r\n\r\nWhen more than one restriction is set, they are to be treated as a logical AND. All need to be valid before this price is active.\r\n\r\nFor reverse energy flow (discharging) negative values of energy, power and current are used.\r\n\r\nNOTE: _minXXX_ (where XXX = Kwh/A/Kw) must be read as \"closest to zero\", and _maxXXX_ as \"furthest from zero\". For example, a *charging* power range from 10 kW to 50 kWh is given by _minPower_ = 10000 and _maxPower_ = 50000, and a *discharging* power range from -10 kW to -50 kW is given by _minPower_ = -10 and _maxPower_ = -50.\r\n\r\nNOTE: _startTimeOfDay_ and _endTimeOfDay_ are in local time, because it is the time in the tariff as it is shown to the EV driver at the Charging Station.\r\nA Charging Station will convert this to the internal time zone that it uses (which is recommended to be UTC, see section Generic chapter 3.1) when performing cost calculation.\r\n\r\n",
                "javaType": "TariffConditions",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "startTimeOfDay": {
                        "description": "Start time of day in local time. +\r\nFormat as per RFC 3339: time-hour \":\" time-minute  +\r\nMust be in 24h format with leading zeros. Hour/Minute separator: \":\"\r\nRegex: ([0-1][0-9]\\|2[0-3]):[0-5][0-9]\r\n",
                        "type": "string"
                    },
                    "endTimeOfDay": {
                        "description": "End time of day in local time. Same syntax as _startTimeOfDay_. +\r\n    If end time &lt; start time then the period wraps around to the next day. +\r\n    To stop at end of the day use: 00:00.\r\n",
                        "type": "string"
                    },
                    "dayOfWeek": {
                        "description": "Day(s) of the week this is tariff applies.\r\n",
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/DayOfWeekEnumType"
                        },
                        "minItems": 1,
                        "maxItems": 7
                    },
                    "validFromDate": {
                        "description": "Start date in local time, for example: 2015-12-24.\r\nValid from this day (inclusive). +\r\nFormat as per RFC 3339: full-date  + \r\n\r\nRegex: ([12][0-9]{3})-(0[1-9]\\|1[0-2])-(0[1-9]\\|[12][0-9]\\|3[01])\r\n",
                        "type": "string"
                    },
                    "validToDate": {
                        "description": "End date in local time, for example: 2015-12-27.\r\n    Valid until this day (exclusive). Same syntax as _validFromDate_.\r\n",
                        "type": "string"
                    },
                    "evseKind": {
                        "$ref": "#/definitions/EvseKindEnumType"
                    },
                    "minEnergy": {
                        "description": "Minimum consumed energy in Wh, for example 20000 Wh.\r\n    Valid from this amount of energy (inclusive) being used.\r\n",
                        "type": "number"
                    },
                    "maxEnergy": {
                        "description": "Maximum consumed energy in Wh, for example 50000 Wh.\r\n    Valid until this amount of energy (exclusive) being used.\r\n",
                        "type": "number"
                    },
                    "minCurrent": {
                        "description": "Sum of the minimum current (in Amperes) over all phases, for example 5 A.\r\n    When the EV is charging with more than, or equal to, the defined amount of current, this price is/becomes active. If the charging current is or becomes lower, this price is not or no longer valid and becomes inactive. +\r\n    This is NOT about the minimum current over the entire transaction.\r\n",
                        "type": "number"
                    },
                    "maxCurrent": {
                        "description": "Sum of the maximum current (in Amperes) over all phases, for example 20 A.\r\n      When the EV is charging with less than the defined amount of current, this price becomes/is active. If the charging current is or becomes higher, this price is not or no longer valid and becomes inactive.\r\n      This is NOT about the maximum current over the entire transaction.\r\n",
                        "type": "number"
                    },
                    "minPower": {
                        "description": "Minimum power in W, for example 5000 W.\r\n      When the EV is charging with more than, or equal to, the defined amount of power, this price is/becomes active.\r\n      If the charging power is or becomes lower, this price is not or no longer valid and becomes inactive.\r\n      This is NOT about the minimum power over the entire transaction.\r\n",
                        "type": "number"
                    },
                    "maxPower": {
                        "description": "Maximum power in W, for example 20000 W.\r\n      When the EV is charging with less than the defined amount of power, this price becomes/is active.\r\n      If the charging power is or becomes higher, this price is not or no longer valid and becomes inactive.\r\n      This is NOT about the maximum power over the entire transaction.\r\n",
                        "type": "number"
                    },
                    "minTime": {
                        "description": "Minimum duration in seconds the transaction (charging &amp; idle) MUST last (inclusive).\r\n      When the duration of a transaction is longer than the defined value, this price is or becomes active.\r\n      Before that moment, this price is not yet active.\r\n",
                        "type": "integer"
                    },
                    "maxTime": {
                        "description": "Maximum duration in seconds the transaction (charging &amp; idle) MUST last (exclusive).\r\n      When the duration of a transaction is shorter than the defined value, this price is or becomes active.\r\n      After that moment, this price is no longer active.\r\n",
                        "type": "integer"
                    },
                    "minChargingTime": {
                        "description": "Minimum duration in seconds the charging MUST last (inclusive).\r\n      When the duration of a charging is longer than the defined value, this price is or becomes active.\r\n      Before that moment, this price is not yet active.\r\n",
                        "type": "integer"
                    },
                    "maxChargingTime": {
                        "description": "Maximum duration in seconds the charging MUST last (exclusive).\r\n      When the duration of a charging is shorter than the defined value, this price is or becomes active.\r\n      After that moment, this price is no longer active.\r\n",
                        "type": "integer"
                    },
                    "minIdleTime": {
                        "description": "Minimum duration in seconds the idle period (i.e. not charging) MUST last (inclusive).\r\n      When the duration of the idle time is longer than the defined value, this price is or becomes active.\r\n      Before that moment, this price is not yet active.\r\n",
                        "type": "integer"
                    },
                    "maxIdleTime": {
                        "description": "Maximum duration in seconds the idle period (i.e. not charging) MUST last (exclusive).\r\n      When the duration of idle time is shorter than the defined value, this price is or becomes active.\r\n      After that moment, this price is no longer active.\r\n",
                        "type": "integer"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                }
            },
            "TariffEnergyPriceType": {
                "description": "Tariff with optional conditions for an energy price.\r\n",
                "javaType": "TariffEnergyPrice",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "priceKwh": {
                        "description": "Price per kWh (excl. tax) for this element.\r\n",
                        "type": "number"
                    },
                    "conditions": {
                        "$ref": "#/definitions/TariffConditionsType"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "priceKwh"
                ]
            },
            "TariffEnergyType": {
                "description": "Price elements and tax for energy\r\n",
                "javaType": "TariffEnergy",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "prices": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/TariffEnergyPriceType"
                        },
                        "minItems": 1
                    },
                    "taxRates": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/TaxRateType"
                        },
                        "minItems": 1,
                        "maxItems": 5
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "prices"
                ]
            },
            "TariffFixedPriceType": {
                "description": "Tariff with optional conditions for a fixed price.\r\n",
                "javaType": "TariffFixedPrice",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "conditions": {
                        "$ref": "#/definitions/TariffConditionsFixedType"
                    },
                    "priceFixed": {
                        "description": "Fixed price  for this element e.g. a start fee.\r\n",
                        "type": "number"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "priceFixed"
                ]
            },
            "TariffFixedType": {
                "javaType": "TariffFixed",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "prices": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/TariffFixedPriceType"
                        },
                        "minItems": 1
                    },
                    "taxRates": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/TaxRateType"
                        },
                        "minItems": 1,
                        "maxItems": 5
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "prices"
                ]
            },
            "TariffTimePriceType": {
                "description": "Tariff with optional conditions for a time duration price.\r\n",
                "javaType": "TariffTimePrice",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "priceMinute": {
                        "description": "Price per minute (excl. tax) for this element.\r\n",
                        "type": "number"
                    },
                    "conditions": {
                        "$ref": "#/definitions/TariffConditionsType"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "priceMinute"
                ]
            },
            "TariffTimeType": {
                "description": "Price elements and tax for time\r\n\r\n",
                "javaType": "TariffTime",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "prices": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/TariffTimePriceType"
                        },
                        "minItems": 1
                    },
                    "taxRates": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/TaxRateType"
                        },
                        "minItems": 1,
                        "maxItems": 5
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "prices"
                ]
            },
            "TariffType": {
                "description": "A tariff is described by fields with prices for:\r\nenergy,\r\ncharging time,\r\nidle time,\r\nfixed fee,\r\nreservation time,\r\nreservation fixed fee. +\r\nEach of these fields may have (optional) conditions that specify when a price is applicable. +\r\nThe _description_ contains a human-readable explanation of the tariff to be shown to the user. +\r\nThe other fields are parameters that define the tariff. These are used by the charging station to calculate the price.\r\n",
                "javaType": "Tariff",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "tariffId": {
                        "description": "Unique id of tariff\r\n",
                        "type": "string",
                        "maxLength": 60
                    },
                    "description": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/MessageContentType"
                        },
                        "minItems": 1,
                        "maxItems": 10
                    },
                    "currency": {
                        "description": "Currency code according to ISO 4217\r\n",
                        "type": "string",
                        "maxLength": 3
                    },
                    "energy": {
                        "$ref": "#/definitions/TariffEnergyType"
                    },
                    "validFrom": {
                        "description": "Time when this tariff becomes active. When absent, it is immediately active.\r\n",
                        "type": "string",
                        "format": "date-time"
                    },
                    "chargingTime": {
                        "$ref": "#/definitions/TariffTimeType"
                    },
                    "idleTime": {
                        "$ref": "#/definitions/TariffTimeType"
                    },
                    "fixedFee": {
                        "$ref": "#/definitions/TariffFixedType"
                    },
                    "reservationTime": {
                        "$ref": "#/definitions/TariffTimeType"
                    },
                    "reservationFixed": {
                        "$ref": "#/definitions/TariffFixedType"
                    },
                    "minCost": {
                        "$ref": "#/definitions/PriceType"
                    },
                    "maxCost": {
                        "$ref": "#/definitions/PriceType"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "tariffId",
                    "currency"
                ]
            },
            "TaxRateType": {
                "description": "Tax percentage\r\n",
                "javaType": "TaxRate",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "type": {
                        "description": "Type of this tax, e.g.  \"Federal \",  \"State\", for information on receipt.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "tax": {
                        "description": "Tax percentage\r\n",
                        "type": "number"
                    },
                    "stack": {
                        "description": "Stack level for this type of tax. Default value, when absent, is 0. +\r\n_stack_ = 0: tax on net price; +\r\n_stack_ = 1: tax added on top of _stack_ 0; +\r\n_stack_ = 2: tax added on top of _stack_ 1, etc. \r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "type",
                    "tax"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "tariff": {
                "$ref": "#/definitions/TariffType"
            },
            "transactionId": {
                "description": "Transaction id for new tariff.\r\n",
                "type": "string",
                "maxLength": 36
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "transactionId",
            "tariff"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:ChangeTransactionTariffResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "TariffChangeStatusEnumType": {
                "description": "Status of the operation\r\n",
                "javaType": "TariffChangeStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Accepted",
                    "Rejected",
                    "TooManyElements",
                    "ConditionNotSupported",
                    "TxNotFound",
                    "NoCurrencyChange"
                ]
            },
            "StatusInfoType": {
                "description": "Element providing more information about the status.\r\n",
                "javaType": "StatusInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "reasonCode": {
                        "description": "A predefined code for the reason why the status is returned in this response. The string is case-insensitive.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "additionalInfo": {
                        "description": "Additional text to provide detailed information.\r\n",
                        "type": "string",
                        "maxLength": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "reasonCode"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "status": {
                "$ref": "#/definitions/TariffChangeStatusEnumType"
            },
            "statusInfo": {
                "$ref": "#/definitions/StatusInfoType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "status"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:ClearCacheRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        }
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:ClearCacheResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "ClearCacheStatusEnumType": {
                "description": "Accepted if the Charging Station has executed the request, otherwise rejected.\r\n",
                "javaType": "ClearCacheStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Accepted",
                    "Rejected"
                ]
            },
            "StatusInfoType": {
                "description": "Element providing more information about the status.\r\n",
                "javaType": "StatusInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "reasonCode": {
                        "description": "A predefined code for the reason why the status is returned in this response. The string is case-insensitive.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "additionalInfo": {
                        "description": "Additional text to provide detailed information.\r\n",
                        "type": "string",
                        "maxLength": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "reasonCode"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "status": {
                "$ref": "#/definitions/ClearCacheStatusEnumType"
            },
            "statusInfo": {
                "$ref": "#/definitions/StatusInfoType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "status"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:ClearChargingProfileRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "ChargingProfilePurposeEnumType": {
                "description": "Specifies to purpose of the charging profiles that will be cleared, if they meet the other criteria in the request.\r\n",
                "javaType": "ChargingProfilePurposeEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "ChargingStationExternalConstraints",
                    "ChargingStationMaxProfile",
                    "TxDefaultProfile",
                    "TxProfile",
                    "PriorityCharging",
                    "LocalGeneration"
                ]
            },
            "ClearChargingProfileType": {
                "description": "A ClearChargingProfileType is a filter for charging profiles to be cleared by ClearChargingProfileRequest.\r\n\r\n",
                "javaType": "ClearChargingProfile",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "evseId": {
                        "description": "Specifies the id of the EVSE for which to clear charging profiles. An evseId of zero (0) specifies the charging profile for the overall Charging Station. Absence of this parameter means the clearing applies to all charging profiles that match the other criteria in the request.\r\n\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "chargingProfilePurpose": {
                        "$ref": "#/definitions/ChargingProfilePurposeEnumType"
                    },
                    "stackLevel": {
                        "description": "Specifies the stackLevel for which charging profiles will be cleared, if they meet the other criteria in the request.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                }
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "chargingProfileId": {
                "description": "The Id of the charging profile to clear.\r\n",
                "type": "integer"
            },
            "chargingProfileCriteria": {
                "$ref": "#/definitions/ClearChargingProfileType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        }
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:ClearChargingProfileResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "ClearChargingProfileStatusEnumType": {
                "description": "Indicates if the Charging Station was able to execute the request.\r\n",
                "javaType": "ClearChargingProfileStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Accepted",
                    "Unknown"
                ]
            },
            "StatusInfoType": {
                "description": "Element providing more information about the status.\r\n",
                "javaType": "StatusInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "reasonCode": {
                        "description": "A predefined code for the reason why the status is returned in this response. The string is case-insensitive.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "additionalInfo": {
                        "description": "Additional text to provide detailed information.\r\n",
                        "type": "string",
                        "maxLength": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "reasonCode"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "status": {
                "$ref": "#/definitions/ClearChargingProfileStatusEnumType"
            },
            "statusInfo": {
                "$ref": "#/definitions/StatusInfoType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "status"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:ClearDERControlRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "DERControlEnumType": {
                "description": "Name of control settings to clear. Not used when _controlId_ is provided.\r\n\r\n",
                "javaType": "DERControlEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "EnterService",
                    "FreqDroop",
                    "FreqWatt",
                    "FixedPFAbsorb",
                    "FixedPFInject",
                    "FixedVar",
                    "Gradients",
                    "HFMustTrip",
                    "HFMayTrip",
                    "HVMustTrip",
                    "HVMomCess",
                    "HVMayTrip",
                    "LimitMaxDischarge",
                    "LFMustTrip",
                    "LVMustTrip",
                    "LVMomCess",
                    "LVMayTrip",
                    "PowerMonitoringMustTrip",
                    "VoltVar",
                    "VoltWatt",
                    "WattPF",
                    "WattVar"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "isDefault": {
                "description": "True: clearing default DER controls. False: clearing scheduled controls.\r\n\r\n",
                "type": "boolean"
            },
            "controlType": {
                "$ref": "#/definitions/DERControlEnumType"
            },
            "controlId": {
                "description": "Id of control setting to clear. When omitted all settings for _controlType_ are cleared.\r\n\r\n",
                "type": "string",
                "maxLength": 36
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "isDefault"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:ClearDERControlResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "DERControlStatusEnumType": {
                "description": "Result of operation.\r\n\r\n",
                "javaType": "DERControlStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Accepted",
                    "Rejected",
                    "NotSupported",
                    "NotFound"
                ]
            },
            "StatusInfoType": {
                "description": "Element providing more information about the status.\r\n",
                "javaType": "StatusInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "reasonCode": {
                        "description": "A predefined code for the reason why the status is returned in this response. The string is case-insensitive.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "additionalInfo": {
                        "description": "Additional text to provide detailed information.\r\n",
                        "type": "string",
                        "maxLength": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "reasonCode"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "status": {
                "$ref": "#/definitions/DERControlStatusEnumType"
            },
            "statusInfo": {
                "$ref": "#/definitions/StatusInfoType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "status"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:ClearDisplayMessageRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "id": {
                "description": "Id of the message that SHALL be removed from the Charging Station.\r\n",
                "type": "integer",
                "minimum": 0
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "id"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:ClearDisplayMessageResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "ClearMessageStatusEnumType": {
                "description": "Returns whether the Charging Station has been able to remove the message.\r\n",
                "javaType": "ClearMessageStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Accepted",
                    "Unknown",
                    "Rejected"
                ]
            },
            "StatusInfoType": {
                "description": "Element providing more information about the status.\r\n",
                "javaType": "StatusInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "reasonCode": {
                        "description": "A predefined code for the reason why the status is returned in this response. The string is case-insensitive.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "additionalInfo": {
                        "description": "Additional text to provide detailed information.\r\n",
                        "type": "string",
                        "maxLength": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "reasonCode"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "status": {
                "$ref": "#/definitions/ClearMessageStatusEnumType"
            },
            "statusInfo": {
                "$ref": "#/definitions/StatusInfoType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "status"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:ClearedChargingLimitRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "chargingLimitSource": {
                "description": "Source of the charging limit. Allowed values defined in Appendix as ChargingLimitSourceEnumStringType.\r\n",
                "type": "string",
                "maxLength": 20
            },
            "evseId": {
                "description": "EVSE Identifier.\r\n",
                "type": "integer",
                "minimum": 0
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "chargingLimitSource"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:ClearedChargingLimitResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        }
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:ClearTariffsRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "tariffIds": {
                "description": "List of tariff Ids to clear. When absent clears all tariffs at _evseId_.\r\n\r\n",
                "type": "array",
                "additionalItems": false,
                "items": {
                    "type": "string",
                    "maxLength": 60
                },
                "minItems": 1
            },
            "evseId": {
                "description": "When present only clear tariffs matching _tariffIds_ at EVSE _evseId_.\r\n\r\n",
                "type": "integer",
                "minimum": 0
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        }
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:ClearTariffsResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "TariffClearStatusEnumType": {
                "javaType": "TariffClearStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Accepted",
                    "Rejected",
                    "NoTariff"
                ]
            },
            "ClearTariffsResultType": {
                "javaType": "ClearTariffsResult",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "statusInfo": {
                        "$ref": "#/definitions/StatusInfoType"
                    },
                    "tariffId": {
                        "description": "Id of tariff for which _status_ is reported. If no tariffs were found, then this field is absent, and _status_ will be `NoTariff`.\r\n",
                        "type": "string",
                        "maxLength": 60
                    },
                    "status": {
                        "$ref": "#/definitions/TariffClearStatusEnumType"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "status"
                ]
            },
            "StatusInfoType": {
                "description": "Element providing more information about the status.\r\n",
                "javaType": "StatusInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "reasonCode": {
                        "description": "A predefined code for the reason why the status is returned in this response. The string is case-insensitive.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "additionalInfo": {
                        "description": "Additional text to provide detailed information.\r\n",
                        "type": "string",
                        "maxLength": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "reasonCode"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "clearTariffsResult": {
                "type": "array",
                "additionalItems": false,
                "items": {
                    "$ref": "#/definitions/ClearTariffsResultType"
                },
                "minItems": 1
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "clearTariffsResult"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:ClearVariableMonitoringRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "id": {
                "description": "List of the monitors to be cleared, identified by there Id.\r\n",
                "type": "array",
                "additionalItems": false,
                "items": {
                    "type": "integer",
                    "minimum": 0
                },
                "minItems": 1
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "id"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:ClearVariableMonitoringResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "ClearMonitoringStatusEnumType": {
                "description": "Result of the clear request for this monitor, identified by its Id.\r\n\r\n",
                "javaType": "ClearMonitoringStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Accepted",
                    "Rejected",
                    "NotFound"
                ]
            },
            "ClearMonitoringResultType": {
                "javaType": "ClearMonitoringResult",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "status": {
                        "$ref": "#/definitions/ClearMonitoringStatusEnumType"
                    },
                    "id": {
                        "description": "Id of the monitor of which a clear was requested.\r\n\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "statusInfo": {
                        "$ref": "#/definitions/StatusInfoType"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "status",
                    "id"
                ]
            },
            "StatusInfoType": {
                "description": "Element providing more information about the status.\r\n",
                "javaType": "StatusInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "reasonCode": {
                        "description": "A predefined code for the reason why the status is returned in this response. The string is case-insensitive.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "additionalInfo": {
                        "description": "Additional text to provide detailed information.\r\n",
                        "type": "string",
                        "maxLength": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "reasonCode"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "clearMonitoringResult": {
                "type": "array",
                "additionalItems": false,
                "items": {
                    "$ref": "#/definitions/ClearMonitoringResultType"
                },
                "minItems": 1
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "clearMonitoringResult"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:ClosePeriodicEventStreamRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "id": {
                "description": "Id of stream to close.\r\n",
                "type": "integer",
                "minimum": 0
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "id"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:ClosePeriodicEventStreamResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        }
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:CostUpdatedRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "totalCost": {
                "description": "Current total cost, based on the information known by the CSMS, of the transaction including taxes. In the currency configured with the configuration Variable: [&lt;&lt;configkey-currency, Currency&gt;&gt;]\r\n\r\n",
                "type": "number"
            },
            "transactionId": {
                "description": "Transaction Id of the transaction the current cost are asked for.\r\n\r\n",
                "type": "string",
                "maxLength": 36
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "totalCost",
            "transactionId"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:CostUpdatedResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        }
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:CustomerInformationRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "HashAlgorithmEnumType": {
                "description": "Used algorithms for the hashes provided.\r\n",
                "javaType": "HashAlgorithmEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "SHA256",
                    "SHA384",
                    "SHA512"
                ]
            },
            "AdditionalInfoType": {
                "description": "Contains a case insensitive identifier to use for the authorization and the type of authorization to support multiple forms of identifiers.\r\n",
                "javaType": "AdditionalInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "additionalIdToken": {
                        "description": "*(2.1)* This field specifies the additional IdToken.\r\n",
                        "type": "string",
                        "maxLength": 255
                    },
                    "type": {
                        "description": "_additionalInfo_ can be used to send extra information to CSMS in addition to the regular authorization with _IdToken_. _AdditionalInfo_ contains one or more custom _types_, which need to be agreed upon by all parties involved. When the _type_ is not supported, the CSMS/Charging Station MAY ignore the _additionalInfo_.\r\n\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "additionalIdToken",
                    "type"
                ]
            },
            "CertificateHashDataType": {
                "javaType": "CertificateHashData",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "hashAlgorithm": {
                        "$ref": "#/definitions/HashAlgorithmEnumType"
                    },
                    "issuerNameHash": {
                        "description": "The hash of the issuer’s distinguished\r\nname (DN), that must be calculated over the DER\r\nencoding of the issuer’s name field in the certificate\r\nbeing checked.\r\n\r\n",
                        "type": "string",
                        "maxLength": 128
                    },
                    "issuerKeyHash": {
                        "description": "The hash of the DER encoded public key:\r\nthe value (excluding tag and length) of the subject\r\npublic key field in the issuer’s certificate.\r\n",
                        "type": "string",
                        "maxLength": 128
                    },
                    "serialNumber": {
                        "description": "The string representation of the\r\nhexadecimal value of the serial number without the\r\nprefix \"0x\" and without leading zeroes.\r\n",
                        "type": "string",
                        "maxLength": 40
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "hashAlgorithm",
                    "issuerNameHash",
                    "issuerKeyHash",
                    "serialNumber"
                ]
            },
            "IdTokenType": {
                "description": "Contains a case insensitive identifier to use for the authorization and the type of authorization to support multiple forms of identifiers.\r\n",
                "javaType": "IdToken",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "additionalInfo": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/AdditionalInfoType"
                        },
                        "minItems": 1
                    },
                    "idToken": {
                        "description": "*(2.1)* IdToken is case insensitive. Might hold the hidden id of an RFID tag, but can for example also contain a UUID.\r\n",
                        "type": "string",
                        "maxLength": 255
                    },
                    "type": {
                        "description": "*(2.1)* Enumeration of possible idToken types. Values defined in Appendix as IdTokenEnumStringType.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "idToken",
                    "type"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "customerCertificate": {
                "$ref": "#/definitions/CertificateHashDataType"
            },
            "idToken": {
                "$ref": "#/definitions/IdTokenType"
            },
            "requestId": {
                "description": "The Id of the request.\r\n\r\n",
                "type": "integer",
                "minimum": 0
            },
            "report": {
                "description": "Flag indicating whether the Charging Station should return NotifyCustomerInformationRequest messages containing information about the customer referred to.\r\n",
                "type": "boolean"
            },
            "clear": {
                "description": "Flag indicating whether the Charging Station should clear all information about the customer referred to.\r\n",
                "type": "boolean"
            },
            "customerIdentifier": {
                "description": "A (e.g. vendor specific) identifier of the customer this request refers to. This field contains a custom identifier other than IdToken and Certificate.\r\nOne of the possible identifiers (customerIdentifier, customerIdToken or customerCertificate) should be in the request message.\r\n",
                "type": "string",
                "maxLength": 64
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "requestId",
            "report",
            "clear"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:CustomerInformationResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "CustomerInformationStatusEnumType": {
                "description": "Indicates whether the request was accepted.\r\n",
                "javaType": "CustomerInformationStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Accepted",
                    "Rejected",
                    "Invalid"
                ]
            },
            "StatusInfoType": {
                "description": "Element providing more information about the status.\r\n",
                "javaType": "StatusInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "reasonCode": {
                        "description": "A predefined code for the reason why the status is returned in this response. The string is case-insensitive.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "additionalInfo": {
                        "description": "Additional text to provide detailed information.\r\n",
                        "type": "string",
                        "maxLength": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "reasonCode"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "status": {
                "$ref": "#/definitions/CustomerInformationStatusEnumType"
            },
            "statusInfo": {
                "$ref": "#/definitions/StatusInfoType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "status"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:DataTransferRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "messageId": {
                "description": "May be used to indicate a specific message or implementation.\r\n",
                "type": "string",
                "maxLength": 50
            },
            "data": {
                "description": "Data without specified length or format. This needs to be decided by both parties (Open to implementation).\r\n"
            },
            "vendorId": {
                "description": "This identifies the Vendor specific implementation\r\n\r\n",
                "type": "string",
                "maxLength": 255
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "vendorId"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:DataTransferResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "DataTransferStatusEnumType": {
                "description": "This indicates the success or failure of the data transfer.\r\n",
                "javaType": "DataTransferStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Accepted",
                    "Rejected",
                    "UnknownMessageId",
                    "UnknownVendorId"
                ]
            },
            "StatusInfoType": {
                "description": "Element providing more information about the status.\r\n",
                "javaType": "StatusInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "reasonCode": {
                        "description": "A predefined code for the reason why the status is returned in this response. The string is case-insensitive.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "additionalInfo": {
                        "description": "Additional text to provide detailed information.\r\n",
                        "type": "string",
                        "maxLength": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "reasonCode"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "status": {
                "$ref": "#/definitions/DataTransferStatusEnumType"
            },
            "statusInfo": {
                "$ref": "#/definitions/StatusInfoType"
            },
            "data": {
                "description": "Data without specified length or format, in response to request.\r\n"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "status"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:DeleteCertificateRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "HashAlgorithmEnumType": {
                "description": "Used algorithms for the hashes provided.\r\n",
                "javaType": "HashAlgorithmEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "SHA256",
                    "SHA384",
                    "SHA512"
                ]
            },
            "CertificateHashDataType": {
                "javaType": "CertificateHashData",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "hashAlgorithm": {
                        "$ref": "#/definitions/HashAlgorithmEnumType"
                    },
                    "issuerNameHash": {
                        "description": "The hash of the issuer’s distinguished\r\nname (DN), that must be calculated over the DER\r\nencoding of the issuer’s name field in the certificate\r\nbeing checked.\r\n\r\n",
                        "type": "string",
                        "maxLength": 128
                    },
                    "issuerKeyHash": {
                        "description": "The hash of the DER encoded public key:\r\nthe value (excluding tag and length) of the subject\r\npublic key field in the issuer’s certificate.\r\n",
                        "type": "string",
                        "maxLength": 128
                    },
                    "serialNumber": {
                        "description": "The string representation of the\r\nhexadecimal value of the serial number without the\r\nprefix \"0x\" and without leading zeroes.\r\n",
                        "type": "string",
                        "maxLength": 40
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "hashAlgorithm",
                    "issuerNameHash",
                    "issuerKeyHash",
                    "serialNumber"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "certificateHashData": {
                "$ref": "#/definitions/CertificateHashDataType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "certificateHashData"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:DeleteCertificateResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "DeleteCertificateStatusEnumType": {
                "description": "Charging Station indicates if it can process the request.\r\n",
                "javaType": "DeleteCertificateStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Accepted",
                    "Failed",
                    "NotFound"
                ]
            },
            "StatusInfoType": {
                "description": "Element providing more information about the status.\r\n",
                "javaType": "StatusInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "reasonCode": {
                        "description": "A predefined code for the reason why the status is returned in this response. The string is case-insensitive.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "additionalInfo": {
                        "description": "Additional text to provide detailed information.\r\n",
                        "type": "string",
                        "maxLength": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "reasonCode"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "status": {
                "$ref": "#/definitions/DeleteCertificateStatusEnumType"
            },
            "statusInfo": {
                "$ref": "#/definitions/StatusInfoType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "status"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:FirmwareStatusNotificationRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "FirmwareStatusEnumType": {
                "description": "This contains the progress status of the firmware installation.\r\n",
                "javaType": "FirmwareStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Downloaded",
                    "DownloadFailed",
                    "Downloading",
                    "DownloadScheduled",
                    "DownloadPaused",
                    "Idle",
                    "InstallationFailed",
                    "Installing",
                    "Installed",
                    "InstallRebooting",
                    "InstallScheduled",
                    "InstallVerificationFailed",
                    "InvalidSignature",
                    "SignatureVerified"
                ]
            },
            "StatusInfoType": {
                "description": "Element providing more information about the status.\r\n",
                "javaType": "StatusInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "reasonCode": {
                        "description": "A predefined code for the reason why the status is returned in this response. The string is case-insensitive.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "additionalInfo": {
                        "description": "Additional text to provide detailed information.\r\n",
                        "type": "string",
                        "maxLength": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "reasonCode"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "status": {
                "$ref": "#/definitions/FirmwareStatusEnumType"
            },
            "requestId": {
                "description": "The request id that was provided in the\r\nUpdateFirmwareRequest that started this firmware update.\r\nThis field is mandatory, unless the message was triggered by a TriggerMessageRequest AND there is no firmware update ongoing.\r\n",
                "type": "integer"
            },
            "statusInfo": {
                "$ref": "#/definitions/StatusInfoType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "status"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:FirmwareStatusNotificationResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        }
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:Get15118EVCertificateRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "CertificateActionEnumType": {
                "description": "Defines whether certificate needs to be installed or updated.\r\n",
                "javaType": "CertificateActionEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Install",
                    "Update"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "iso15118SchemaVersion": {
                "description": "Schema version currently used for the 15118 session between EV and Charging Station. Needed for parsing of the EXI stream by the CSMS.\r\n\r\n",
                "type": "string",
                "maxLength": 50
            },
            "action": {
                "$ref": "#/definitions/CertificateActionEnumType"
            },
            "exiRequest": {
                "description": "*(2.1)* Raw CertificateInstallationReq request from EV, Base64 encoded. +\r\nExtended to support ISO 15118-20 certificates. The minimum supported length is 11000. If a longer _exiRequest_ is supported, then the supported length must be communicated in variable OCPPCommCtrlr.FieldLength[ \"Get15118EVCertificateRequest.exiRequest\" ].\r\n",
                "type": "string",
                "maxLength": 11000
            },
            "maximumContractCertificateChains": {
                "description": "*(2.1)* Absent during ISO 15118-2 session. Required during ISO 15118-20 session. +\r\nMaximum number of contracts that EV wants to install.\r\n",
                "type": "integer",
                "minimum": 0
            },
            "prioritizedEMAIDs": {
                "description": "*(2.1)*  Absent during ISO 15118-2 session. Optional during ISO 15118-20 session. List of EMAIDs for which contract certificates must be requested first, in case there are more certificates than allowed by _maximumContractCertificateChains_.\r\n",
                "type": "array",
                "additionalItems": false,
                "items": {
                    "type": "string",
                    "maxLength": 255
                },
                "minItems": 1,
                "maxItems": 8
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "iso15118SchemaVersion",
            "action",
            "exiRequest"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:Get15118EVCertificateResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "Iso15118EVCertificateStatusEnumType": {
                "description": "Indicates whether the message was processed properly.\r\n",
                "javaType": "Iso15118EVCertificateStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Accepted",
                    "Failed"
                ]
            },
            "StatusInfoType": {
                "description": "Element providing more information about the status.\r\n",
                "javaType": "StatusInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "reasonCode": {
                        "description": "A predefined code for the reason why the status is returned in this response. The string is case-insensitive.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "additionalInfo": {
                        "description": "Additional text to provide detailed information.\r\n",
                        "type": "string",
                        "maxLength": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "reasonCode"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "status": {
                "$ref": "#/definitions/Iso15118EVCertificateStatusEnumType"
            },
            "statusInfo": {
                "$ref": "#/definitions/StatusInfoType"
            },
            "exiResponse": {
                "description": "*(2/1)* Raw CertificateInstallationRes response for the EV, Base64 encoded. +\r\nExtended to support ISO 15118-20 certificates. The minimum supported length is 17000. If a longer _exiResponse_ is supported, then the supported length must be communicated in variable OCPPCommCtrlr.FieldLength[ \"Get15118EVCertificateResponse.exiResponse\" ].\r\n\r\n",
                "type": "string",
                "maxLength": 17000
            },
            "remainingContracts": {
                "description": "*(2.1)* Number of contracts that can be retrieved with additional requests.\r\n",
                "type": "integer",
                "minimum": 0
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "status",
            "exiResponse"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:GetBaseReportRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "ReportBaseEnumType": {
                "description": "This field specifies the report base.\r\n",
                "javaType": "ReportBaseEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "ConfigurationInventory",
                    "FullInventory",
                    "SummaryInventory"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "requestId": {
                "description": "The Id of the request.\r\n",
                "type": "integer"
            },
            "reportBase": {
                "$ref": "#/definitions/ReportBaseEnumType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "requestId",
            "reportBase"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:GetBaseReportResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "GenericDeviceModelStatusEnumType": {
                "description": "This indicates whether the Charging Station is able to accept this request.\r\n",
                "javaType": "GenericDeviceModelStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Accepted",
                    "Rejected",
                    "NotSupported",
                    "EmptyResultSet"
                ]
            },
            "StatusInfoType": {
                "description": "Element providing more information about the status.\r\n",
                "javaType": "StatusInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "reasonCode": {
                        "description": "A predefined code for the reason why the status is returned in this response. The string is case-insensitive.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "additionalInfo": {
                        "description": "Additional text to provide detailed information.\r\n",
                        "type": "string",
                        "maxLength": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "reasonCode"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "status": {
                "$ref": "#/definitions/GenericDeviceModelStatusEnumType"
            },
            "statusInfo": {
                "$ref": "#/definitions/StatusInfoType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "status"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:GetCertificateChainStatusRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "CertificateStatusSourceEnumType": {
                "description": "Source of status: OCSP, CRL\r\n",
                "javaType": "CertificateStatusSourceEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "CRL",
                    "OCSP"
                ]
            },
            "HashAlgorithmEnumType": {
                "description": "Used algorithms for the hashes provided.\r\n",
                "javaType": "HashAlgorithmEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "SHA256",
                    "SHA384",
                    "SHA512"
                ]
            },
            "CertificateHashDataType": {
                "javaType": "CertificateHashData",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "hashAlgorithm": {
                        "$ref": "#/definitions/HashAlgorithmEnumType"
                    },
                    "issuerNameHash": {
                        "description": "The hash of the issuer’s distinguished\r\nname (DN), that must be calculated over the DER\r\nencoding of the issuer’s name field in the certificate\r\nbeing checked.\r\n\r\n",
                        "type": "string",
                        "maxLength": 128
                    },
                    "issuerKeyHash": {
                        "description": "The hash of the DER encoded public key:\r\nthe value (excluding tag and length) of the subject\r\npublic key field in the issuer’s certificate.\r\n",
                        "type": "string",
                        "maxLength": 128
                    },
                    "serialNumber": {
                        "description": "The string representation of the\r\nhexadecimal value of the serial number without the\r\nprefix \"0x\" and without leading zeroes.\r\n",
                        "type": "string",
                        "maxLength": 40
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "hashAlgorithm",
                    "issuerNameHash",
                    "issuerKeyHash",
                    "serialNumber"
                ]
            },
            "CertificateStatusRequestInfoType": {
                "description": "Data necessary to request the revocation status of a certificate.\r\n",
                "javaType": "CertificateStatusRequestInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "certificateHashData": {
                        "$ref": "#/definitions/CertificateHashDataType"
                    },
                    "source": {
                        "$ref": "#/definitions/CertificateStatusSourceEnumType"
                    },
                    "urls": {
                        "description": "URL(s) of _source_.\r\n",
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "type": "string",
                            "maxLength": 2000
                        },
                        "minItems": 1,
                        "maxItems": 5
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "source",
                    "urls",
                    "certificateHashData"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "certificateStatusRequests": {
                "type": "array",
                "additionalItems": false,
                "items": {
                    "$ref": "#/definitions/CertificateStatusRequestInfoType"
                },
                "minItems": 1,
                "maxItems": 4
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "certificateStatusRequests"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:GetCertificateChainStatusResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "CertificateStatusEnumType": {
                "description": "Status of certificate: good, revoked or unknown.\r\n",
                "javaType": "CertificateStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Good",
                    "Revoked",
                    "Unknown",
                    "Failed"
                ]
            },
            "CertificateStatusSourceEnumType": {
                "description": "Source of status: OCSP, CRL\r\n",
                "javaType": "CertificateStatusSourceEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "CRL",
                    "OCSP"
                ]
            },
            "HashAlgorithmEnumType": {
                "description": "Used algorithms for the hashes provided.\r\n",
                "javaType": "HashAlgorithmEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "SHA256",
                    "SHA384",
                    "SHA512"
                ]
            },
            "CertificateHashDataType": {
                "javaType": "CertificateHashData",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "hashAlgorithm": {
                        "$ref": "#/definitions/HashAlgorithmEnumType"
                    },
                    "issuerNameHash": {
                        "description": "The hash of the issuer’s distinguished\r\nname (DN), that must be calculated over the DER\r\nencoding of the issuer’s name field in the certificate\r\nbeing checked.\r\n\r\n",
                        "type": "string",
                        "maxLength": 128
                    },
                    "issuerKeyHash": {
                        "description": "The hash of the DER encoded public key:\r\nthe value (excluding tag and length) of the subject\r\npublic key field in the issuer’s certificate.\r\n",
                        "type": "string",
                        "maxLength": 128
                    },
                    "serialNumber": {
                        "description": "The string representation of the\r\nhexadecimal value of the serial number without the\r\nprefix \"0x\" and without leading zeroes.\r\n",
                        "type": "string",
                        "maxLength": 40
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "hashAlgorithm",
                    "issuerNameHash",
                    "issuerKeyHash",
                    "serialNumber"
                ]
            },
            "CertificateStatusType": {
                "description": "Revocation status of certificate\r\n",
                "javaType": "CertificateStatus",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "certificateHashData": {
                        "$ref": "#/definitions/CertificateHashDataType"
                    },
                    "source": {
                        "$ref": "#/definitions/CertificateStatusSourceEnumType"
                    },
                    "status": {
                        "$ref": "#/definitions/CertificateStatusEnumType"
                    },
                    "nextUpdate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "source",
                    "status",
                    "nextUpdate",
                    "certificateHashData"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "certificateStatus": {
                "type": "array",
                "additionalItems": false,
                "items": {
                    "$ref": "#/definitions/CertificateStatusType"
                },
                "minItems": 1,
                "maxItems": 4
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "certificateStatus"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:GetCertificateStatusRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "HashAlgorithmEnumType": {
                "description": "Used algorithms for the hashes provided.\r\n",
                "javaType": "HashAlgorithmEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "SHA256",
                    "SHA384",
                    "SHA512"
                ]
            },
            "OCSPRequestDataType": {
                "description": "Information about a certificate for an OCSP check.\r\n",
                "javaType": "OCSPRequestData",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "hashAlgorithm": {
                        "$ref": "#/definitions/HashAlgorithmEnumType"
                    },
                    "issuerNameHash": {
                        "description": "The hash of the issuer’s distinguished\r\nname (DN), that must be calculated over the DER\r\nencoding of the issuer’s name field in the certificate\r\nbeing checked.\r\n",
                        "type": "string",
                        "maxLength": 128
                    },
                    "issuerKeyHash": {
                        "description": "The hash of the DER encoded public key:\r\nthe value (excluding tag and length) of the subject\r\npublic key field in the issuer’s certificate.\r\n",
                        "type": "string",
                        "maxLength": 128
                    },
                    "serialNumber": {
                        "description": "The string representation of the\r\nhexadecimal value of the serial number without the\r\nprefix \"0x\" and without leading zeroes.\r\n",
                        "type": "string",
                        "maxLength": 40
                    },
                    "responderURL": {
                        "description": "This contains the responder URL (Case insensitive). \r\n\r\n",
                        "type": "string",
                        "maxLength": 2000
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "hashAlgorithm",
                    "issuerNameHash",
                    "issuerKeyHash",
                    "serialNumber",
                    "responderURL"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "ocspRequestData": {
                "$ref": "#/definitions/OCSPRequestDataType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "ocspRequestData"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:GetCertificateStatusResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "GetCertificateStatusEnumType": {
                "description": "This indicates whether the charging station was able to retrieve the OCSP certificate status.\r\n",
                "javaType": "GetCertificateStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Accepted",
                    "Failed"
                ]
            },
            "StatusInfoType": {
                "description": "Element providing more information about the status.\r\n",
                "javaType": "StatusInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "reasonCode": {
                        "description": "A predefined code for the reason why the status is returned in this response. The string is case-insensitive.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "additionalInfo": {
                        "description": "Additional text to provide detailed information.\r\n",
                        "type": "string",
                        "maxLength": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "reasonCode"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "status": {
                "$ref": "#/definitions/GetCertificateStatusEnumType"
            },
            "statusInfo": {
                "$ref": "#/definitions/StatusInfoType"
            },
            "ocspResult": {
                "description": "*(2.1)* OCSPResponse class as defined in &lt;&lt;ref-ocpp_security_24, IETF RFC 6960&gt;&gt;. DER encoded (as defined in &lt;&lt;ref-ocpp_security_24, IETF RFC 6960&gt;&gt;), and then base64 encoded. MAY only be omitted when status is not Accepted. +\r\nThe minimum supported length is 18000. If a longer _ocspResult_ is supported, then the supported length must be communicated in variable OCPPCommCtrlr.FieldLength[ \"GetCertificateStatusResponse.ocspResult\" ].\r\n\r\n",
                "type": "string",
                "maxLength": 18000
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "status"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:GetChargingProfilesRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "ChargingProfilePurposeEnumType": {
                "description": "Defines the purpose of the schedule transferred by this profile\r\n",
                "javaType": "ChargingProfilePurposeEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "ChargingStationExternalConstraints",
                    "ChargingStationMaxProfile",
                    "TxDefaultProfile",
                    "TxProfile",
                    "PriorityCharging",
                    "LocalGeneration"
                ]
            },
            "ChargingProfileCriterionType": {
                "description": "A ChargingProfileCriterionType is a filter for charging profiles to be selected by a GetChargingProfilesRequest.\r\n\r\n",
                "javaType": "ChargingProfileCriterion",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "chargingProfilePurpose": {
                        "$ref": "#/definitions/ChargingProfilePurposeEnumType"
                    },
                    "stackLevel": {
                        "description": "Value determining level in hierarchy stack of profiles. Higher values have precedence over lower values. Lowest level is 0.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "chargingProfileId": {
                        "description": "List of all the chargingProfileIds requested. Any ChargingProfile that matches one of these profiles will be reported. If omitted, the Charging Station SHALL not filter on chargingProfileId. This field SHALL NOT contain more ids than set in &lt;&lt;configkey-charging-profile-entries,ChargingProfileEntries.maxLimit&gt;&gt;\r\n\r\n",
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "type": "integer"
                        },
                        "minItems": 1
                    },
                    "chargingLimitSource": {
                        "description": "For which charging limit sources, charging profiles SHALL be reported. If omitted, the Charging Station SHALL not filter on chargingLimitSource. Values defined in Appendix as ChargingLimitSourceEnumStringType.\r\n",
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "type": "string",
                            "maxLength": 20
                        },
                        "minItems": 1,
                        "maxItems": 4
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                }
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "requestId": {
                "description": "Reference identification that is to be used by the Charging Station in the &lt;&lt;reportchargingprofilesrequest, ReportChargingProfilesRequest&gt;&gt; when provided.\r\n",
                "type": "integer"
            },
            "evseId": {
                "description": "For which EVSE installed charging profiles SHALL be reported. If 0, only charging profiles installed on the Charging Station itself (the grid connection) SHALL be reported. If omitted, all installed charging profiles SHALL be reported. +\r\nReported charging profiles SHALL match the criteria in field _chargingProfile_.\r\n",
                "type": "integer",
                "minimum": 0
            },
            "chargingProfile": {
                "$ref": "#/definitions/ChargingProfileCriterionType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "requestId",
            "chargingProfile"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:GetChargingProfilesResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "GetChargingProfileStatusEnumType": {
                "description": "This indicates whether the Charging Station is able to process this request and will send &lt;&lt;reportchargingprofilesrequest, ReportChargingProfilesRequest&gt;&gt; messages.\r\n",
                "javaType": "GetChargingProfileStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Accepted",
                    "NoProfiles"
                ]
            },
            "StatusInfoType": {
                "description": "Element providing more information about the status.\r\n",
                "javaType": "StatusInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "reasonCode": {
                        "description": "A predefined code for the reason why the status is returned in this response. The string is case-insensitive.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "additionalInfo": {
                        "description": "Additional text to provide detailed information.\r\n",
                        "type": "string",
                        "maxLength": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "reasonCode"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "status": {
                "$ref": "#/definitions/GetChargingProfileStatusEnumType"
            },
            "statusInfo": {
                "$ref": "#/definitions/StatusInfoType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "status"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:GetCompositeScheduleRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "ChargingRateUnitEnumType": {
                "description": "Can be used to force a power or current profile.\r\n\r\n",
                "javaType": "ChargingRateUnitEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "W",
                    "A"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "duration": {
                "description": "Length of the requested schedule in seconds.\r\n\r\n",
                "type": "integer"
            },
            "chargingRateUnit": {
                "$ref": "#/definitions/ChargingRateUnitEnumType"
            },
            "evseId": {
                "description": "The ID of the EVSE for which the schedule is requested. When evseid=0, the Charging Station will calculate the expected consumption for the grid connection.\r\n",
                "type": "integer",
                "minimum": 0
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "duration",
            "evseId"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:GetCompositeScheduleResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "ChargingRateUnitEnumType": {
                "javaType": "ChargingRateUnitEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "W",
                    "A"
                ]
            },
            "GenericStatusEnumType": {
                "description": "The Charging Station will indicate if it was\r\nable to process the request\r\n",
                "javaType": "GenericStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Accepted",
                    "Rejected"
                ]
            },
            "OperationModeEnumType": {
                "description": "*(2.1)* Charging operation mode to use during this time interval. When absent defaults to `ChargingOnly`.\r\n",
                "javaType": "OperationModeEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Idle",
                    "ChargingOnly",
                    "CentralSetpoint",
                    "ExternalSetpoint",
                    "ExternalLimits",
                    "CentralFrequency",
                    "LocalFrequency",
                    "LocalLoadBalancing"
                ]
            },
            "ChargingSchedulePeriodType": {
                "description": "Charging schedule period structure defines a time period in a charging schedule. It is used in: CompositeScheduleType and in ChargingScheduleType. When used in a NotifyEVChargingScheduleRequest only _startPeriod_, _limit_, _limit_L2_, _limit_L3_ are relevant.\r\n",
                "javaType": "ChargingSchedulePeriod",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "startPeriod": {
                        "description": "Start of the period, in seconds from the start of schedule. The value of StartPeriod also defines the stop time of the previous period.\r\n",
                        "type": "integer"
                    },
                    "limit": {
                        "description": "Optional only when not required by the _operationMode_, as in CentralSetpoint, ExternalSetpoint, ExternalLimits, LocalFrequency,  LocalLoadBalancing. +\r\nCharging rate limit during the schedule period, in the applicable _chargingRateUnit_. \r\nThis SHOULD be a non-negative value; a negative value is only supported for backwards compatibility with older systems that use a negative value to specify a discharging limit.\r\nWhen using _chargingRateUnit_ = `W`, this field represents the sum of the power of all phases, unless values are provided for L2 and L3, in which case this field represents phase L1.\r\n",
                        "type": "number"
                    },
                    "limit_L2": {
                        "description": "*(2.1)* Charging rate limit on phase L2  in the applicable _chargingRateUnit_. \r\n",
                        "type": "number"
                    },
                    "limit_L3": {
                        "description": "*(2.1)* Charging rate limit on phase L3  in the applicable _chargingRateUnit_. \r\n",
                        "type": "number"
                    },
                    "numberPhases": {
                        "description": "The number of phases that can be used for charging. +\r\nFor a DC EVSE this field should be omitted. +\r\nFor an AC EVSE a default value of _numberPhases_ = 3 will be assumed if the field is absent.\r\n",
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 3
                    },
                    "phaseToUse": {
                        "description": "Values: 1..3, Used if numberPhases=1 and if the EVSE is capable of switching the phase connected to the EV, i.e. ACPhaseSwitchingSupported is defined and true. It’s not allowed unless both conditions above are true. If both conditions are true, and phaseToUse is omitted, the Charging Station / EVSE will make the selection on its own.\r\n\r\n",
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 3
                    },
                    "dischargeLimit": {
                        "description": "*(2.1)* Limit in _chargingRateUnit_ that the EV is allowed to discharge with. Note, these are negative values in order to be consistent with _setpoint_, which can be positive and negative.  +\r\nFor AC this field represents the sum of all phases, unless values are provided for L2 and L3, in which case this field represents phase L1.\r\n",
                        "type": "number",
                        "maximum": 0
                    },
                    "dischargeLimit_L2": {
                        "description": "*(2.1)* Limit in _chargingRateUnit_ on phase L2 that the EV is allowed to discharge with. \r\n",
                        "type": "number",
                        "maximum": 0
                    },
                    "dischargeLimit_L3": {
                        "description": "*(2.1)* Limit in _chargingRateUnit_ on phase L3 that the EV is allowed to discharge with. \r\n",
                        "type": "number",
                        "maximum": 0
                    },
                    "setpoint": {
                        "description": "*(2.1)* Setpoint in _chargingRateUnit_ that the EV should follow as close as possible. Use negative values for discharging. +\r\nWhen a limit and/or _dischargeLimit_ are given the overshoot when following _setpoint_ must remain within these values.\r\nThis field represents the sum of all phases, unless values are provided for L2 and L3, in which case this field represents phase L1.\r\n",
                        "type": "number"
                    },
                    "setpoint_L2": {
                        "description": "*(2.1)* Setpoint in _chargingRateUnit_ that the EV should follow on phase L2 as close as possible.\r\n",
                        "type": "number"
                    },
                    "setpoint_L3": {
                        "description": "*(2.1)* Setpoint in _chargingRateUnit_ that the EV should follow on phase L3 as close as possible. \r\n",
                        "type": "number"
                    },
                    "setpointReactive": {
                        "description": "*(2.1)* Setpoint for reactive power (or current) in _chargingRateUnit_ that the EV should follow as closely as possible. Positive values for inductive, negative for capacitive reactive power or current.  +\r\nThis field represents the sum of all phases, unless values are provided for L2 and L3, in which case this field represents phase L1.\r\n",
                        "type": "number"
                    },
                    "setpointReactive_L2": {
                        "description": "*(2.1)* Setpoint for reactive power (or current) in _chargingRateUnit_ that the EV should follow on phase L2 as closely as possible. \r\n",
                        "type": "number"
                    },
                    "setpointReactive_L3": {
                        "description": "*(2.1)* Setpoint for reactive power (or current) in _chargingRateUnit_ that the EV should follow on phase L3 as closely as possible. \r\n",
                        "type": "number"
                    },
                    "preconditioningRequest": {
                        "description": "*(2.1)* If  true, the EV should attempt to keep the BMS preconditioned for this time interval.\r\n",
                        "type": "boolean"
                    },
                    "evseSleep": {
                        "description": "*(2.1)* If true, the EVSE must turn off power electronics/modules associated with this transaction. Default value when absent is false.\r\n",
                        "type": "boolean"
                    },
                    "v2xBaseline": {
                        "description": "*(2.1)* Power value that, when present, is used as a baseline on top of which values from _v2xFreqWattCurve_ and _v2xSignalWattCurve_ are added.\r\n\r\n",
                        "type": "number"
                    },
                    "operationMode": {
                        "$ref": "#/definitions/OperationModeEnumType"
                    },
                    "v2xFreqWattCurve": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/V2XFreqWattPointType"
                        },
                        "minItems": 1,
                        "maxItems": 20
                    },
                    "v2xSignalWattCurve": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/V2XSignalWattPointType"
                        },
                        "minItems": 1,
                        "maxItems": 20
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "startPeriod"
                ]
            },
            "CompositeScheduleType": {
                "javaType": "CompositeSchedule",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "evseId": {
                        "type": "integer",
                        "minimum": 0
                    },
                    "duration": {
                        "type": "integer"
                    },
                    "scheduleStart": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "chargingRateUnit": {
                        "$ref": "#/definitions/ChargingRateUnitEnumType"
                    },
                    "chargingSchedulePeriod": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/ChargingSchedulePeriodType"
                        },
                        "minItems": 1
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "evseId",
                    "duration",
                    "scheduleStart",
                    "chargingRateUnit",
                    "chargingSchedulePeriod"
                ]
            },
            "StatusInfoType": {
                "description": "Element providing more information about the status.\r\n",
                "javaType": "StatusInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "reasonCode": {
                        "description": "A predefined code for the reason why the status is returned in this response. The string is case-insensitive.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "additionalInfo": {
                        "description": "Additional text to provide detailed information.\r\n",
                        "type": "string",
                        "maxLength": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "reasonCode"
                ]
            },
            "V2XFreqWattPointType": {
                "description": "*(2.1)* A point of a frequency-watt curve.\r\n",
                "javaType": "V2XFreqWattPoint",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "frequency": {
                        "description": "Net frequency in Hz.\r\n",
                        "type": "number"
                    },
                    "power": {
                        "description": "Power in W to charge (positive) or discharge (negative) at specified frequency.\r\n",
                        "type": "number"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "frequency",
                    "power"
                ]
            },
            "V2XSignalWattPointType": {
                "description": "*(2.1)* A point of a signal-watt curve.\r\n",
                "javaType": "V2XSignalWattPoint",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "signal": {
                        "description": "Signal value from an AFRRSignalRequest.\r\n",
                        "type": "integer"
                    },
                    "power": {
                        "description": "Power in W to charge (positive) or discharge (negative) at specified frequency.\r\n",
                        "type": "number"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "signal",
                    "power"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "status": {
                "$ref": "#/definitions/GenericStatusEnumType"
            },
            "statusInfo": {
                "$ref": "#/definitions/StatusInfoType"
            },
            "schedule": {
                "$ref": "#/definitions/CompositeScheduleType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "status"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:GetDERControlRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "DERControlEnumType": {
                "description": "Type of control settings to retrieve. Not used when _controlId_ is provided.\r\n\r\n",
                "javaType": "DERControlEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "EnterService",
                    "FreqDroop",
                    "FreqWatt",
                    "FixedPFAbsorb",
                    "FixedPFInject",
                    "FixedVar",
                    "Gradients",
                    "HFMustTrip",
                    "HFMayTrip",
                    "HVMustTrip",
                    "HVMomCess",
                    "HVMayTrip",
                    "LimitMaxDischarge",
                    "LFMustTrip",
                    "LVMustTrip",
                    "LVMomCess",
                    "LVMayTrip",
                    "PowerMonitoringMustTrip",
                    "VoltVar",
                    "VoltWatt",
                    "WattPF",
                    "WattVar"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "requestId": {
                "description": "RequestId to be used in ReportDERControlRequest.\r\n",
                "type": "integer"
            },
            "isDefault": {
                "description": "True: get a default DER control. False: get a scheduled control.\r\n\r\n",
                "type": "boolean"
            },
            "controlType": {
                "$ref": "#/definitions/DERControlEnumType"
            },
            "controlId": {
                "description": "Id of setting to get. When omitted all settings for _controlType_ are retrieved.\r\n\r\n",
                "type": "string",
                "maxLength": 36
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "requestId"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:GetDERControlResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "DERControlStatusEnumType": {
                "description": "Result of operation.\r\n\r\n",
                "javaType": "DERControlStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Accepted",
                    "Rejected",
                    "NotSupported",
                    "NotFound"
                ]
            },
            "StatusInfoType": {
                "description": "Element providing more information about the status.\r\n",
                "javaType": "StatusInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "reasonCode": {
                        "description": "A predefined code for the reason why the status is returned in this response. The string is case-insensitive.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "additionalInfo": {
                        "description": "Additional text to provide detailed information.\r\n",
                        "type": "string",
                        "maxLength": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "reasonCode"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "status": {
                "$ref": "#/definitions/DERControlStatusEnumType"
            },
            "statusInfo": {
                "$ref": "#/definitions/StatusInfoType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "status"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:GetDisplayMessagesRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "MessagePriorityEnumType": {
                "description": "If provided the Charging Station shall return Display Messages with the given priority only.\r\n",
                "javaType": "MessagePriorityEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "AlwaysFront",
                    "InFront",
                    "NormalCycle"
                ]
            },
            "MessageStateEnumType": {
                "description": "If provided the Charging Station shall return Display Messages with the given state only. \r\n",
                "javaType": "MessageStateEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Charging",
                    "Faulted",
                    "Idle",
                    "Unavailable",
                    "Suspended",
                    "Discharging"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "id": {
                "description": "If provided the Charging Station shall return Display Messages of the given ids. This field SHALL NOT contain more ids than set in &lt;&lt;configkey-number-of-display-messages,NumberOfDisplayMessages.maxLimit&gt;&gt;\r\n\r\n",
                "type": "array",
                "additionalItems": false,
                "items": {
                    "type": "integer",
                    "minimum": 0
                },
                "minItems": 1
            },
            "requestId": {
                "description": "The Id of this request.\r\n",
                "type": "integer"
            },
            "priority": {
                "$ref": "#/definitions/MessagePriorityEnumType"
            },
            "state": {
                "$ref": "#/definitions/MessageStateEnumType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "requestId"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:GetDisplayMessagesResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "GetDisplayMessagesStatusEnumType": {
                "description": "Indicates if the Charging Station has Display Messages that match the request criteria in the &lt;&lt;getdisplaymessagesrequest,GetDisplayMessagesRequest&gt;&gt;\r\n",
                "javaType": "GetDisplayMessagesStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Accepted",
                    "Unknown"
                ]
            },
            "StatusInfoType": {
                "description": "Element providing more information about the status.\r\n",
                "javaType": "StatusInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "reasonCode": {
                        "description": "A predefined code for the reason why the status is returned in this response. The string is case-insensitive.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "additionalInfo": {
                        "description": "Additional text to provide detailed information.\r\n",
                        "type": "string",
                        "maxLength": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "reasonCode"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "status": {
                "$ref": "#/definitions/GetDisplayMessagesStatusEnumType"
            },
            "statusInfo": {
                "$ref": "#/definitions/StatusInfoType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "status"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:GetInstalledCertificateIdsRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "GetCertificateIdUseEnumType": {
                "javaType": "GetCertificateIdUseEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "V2GRootCertificate",
                    "MORootCertificate",
                    "CSMSRootCertificate",
                    "V2GCertificateChain",
                    "ManufacturerRootCertificate",
                    "OEMRootCertificate"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "certificateType": {
                "description": "Indicates the type of certificates requested. When omitted, all certificate types are requested.\r\n",
                "type": "array",
                "additionalItems": false,
                "items": {
                    "$ref": "#/definitions/GetCertificateIdUseEnumType"
                },
                "minItems": 1
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        }
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:GetInstalledCertificateIdsResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "GetCertificateIdUseEnumType": {
                "description": "Indicates the type of the requested certificate(s).\r\n",
                "javaType": "GetCertificateIdUseEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "V2GRootCertificate",
                    "MORootCertificate",
                    "CSMSRootCertificate",
                    "V2GCertificateChain",
                    "ManufacturerRootCertificate",
                    "OEMRootCertificate"
                ]
            },
            "GetInstalledCertificateStatusEnumType": {
                "description": "Charging Station indicates if it can process the request.\r\n",
                "javaType": "GetInstalledCertificateStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Accepted",
                    "NotFound"
                ]
            },
            "HashAlgorithmEnumType": {
                "description": "Used algorithms for the hashes provided.\r\n",
                "javaType": "HashAlgorithmEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "SHA256",
                    "SHA384",
                    "SHA512"
                ]
            },
            "CertificateHashDataChainType": {
                "javaType": "CertificateHashDataChain",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "certificateHashData": {
                        "$ref": "#/definitions/CertificateHashDataType"
                    },
                    "certificateType": {
                        "$ref": "#/definitions/GetCertificateIdUseEnumType"
                    },
                    "childCertificateHashData": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/CertificateHashDataType"
                        },
                        "minItems": 1,
                        "maxItems": 4
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "certificateType",
                    "certificateHashData"
                ]
            },
            "CertificateHashDataType": {
                "javaType": "CertificateHashData",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "hashAlgorithm": {
                        "$ref": "#/definitions/HashAlgorithmEnumType"
                    },
                    "issuerNameHash": {
                        "description": "The hash of the issuer’s distinguished\r\nname (DN), that must be calculated over the DER\r\nencoding of the issuer’s name field in the certificate\r\nbeing checked.\r\n\r\n",
                        "type": "string",
                        "maxLength": 128
                    },
                    "issuerKeyHash": {
                        "description": "The hash of the DER encoded public key:\r\nthe value (excluding tag and length) of the subject\r\npublic key field in the issuer’s certificate.\r\n",
                        "type": "string",
                        "maxLength": 128
                    },
                    "serialNumber": {
                        "description": "The string representation of the\r\nhexadecimal value of the serial number without the\r\nprefix \"0x\" and without leading zeroes.\r\n",
                        "type": "string",
                        "maxLength": 40
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "hashAlgorithm",
                    "issuerNameHash",
                    "issuerKeyHash",
                    "serialNumber"
                ]
            },
            "StatusInfoType": {
                "description": "Element providing more information about the status.\r\n",
                "javaType": "StatusInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "reasonCode": {
                        "description": "A predefined code for the reason why the status is returned in this response. The string is case-insensitive.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "additionalInfo": {
                        "description": "Additional text to provide detailed information.\r\n",
                        "type": "string",
                        "maxLength": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "reasonCode"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "status": {
                "$ref": "#/definitions/GetInstalledCertificateStatusEnumType"
            },
            "statusInfo": {
                "$ref": "#/definitions/StatusInfoType"
            },
            "certificateHashDataChain": {
                "type": "array",
                "additionalItems": false,
                "items": {
                    "$ref": "#/definitions/CertificateHashDataChainType"
                },
                "minItems": 1
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "status"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:GetLocalListVersionRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        }
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:GetLocalListVersionResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "versionNumber": {
                "description": "This contains the current version number of the local authorization list in the Charging Station.\r\n",
                "type": "integer"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "versionNumber"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:GetLogRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "LogEnumType": {
                "description": "This contains the type of log file that the Charging Station\r\nshould send.\r\n",
                "javaType": "LogEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "DiagnosticsLog",
                    "SecurityLog",
                    "DataCollectorLog"
                ]
            },
            "LogParametersType": {
                "description": "Generic class for the configuration of logging entries.\r\n",
                "javaType": "LogParameters",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "remoteLocation": {
                        "description": "The URL of the location at the remote system where the log should be stored.\r\n",
                        "type": "string",
                        "maxLength": 2000
                    },
                    "oldestTimestamp": {
                        "description": "This contains the date and time of the oldest logging information to include in the diagnostics.\r\n",
                        "type": "string",
                        "format": "date-time"
                    },
                    "latestTimestamp": {
                        "description": "This contains the date and time of the latest logging information to include in the diagnostics.\r\n",
                        "type": "string",
                        "format": "date-time"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "remoteLocation"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "log": {
                "$ref": "#/definitions/LogParametersType"
            },
            "logType": {
                "$ref": "#/definitions/LogEnumType"
            },
            "requestId": {
                "description": "The Id of this request\r\n",
                "type": "integer"
            },
            "retries": {
                "description": "This specifies how many times the Charging Station must retry to upload the log before giving up. If this field is not present, it is left to Charging Station to decide how many times it wants to retry. If the value is 0, it means: no retries.\r\n",
                "type": "integer",
                "minimum": 0
            },
            "retryInterval": {
                "description": "The interval in seconds after which a retry may be attempted. If this field is not present, it is left to Charging Station to decide how long to wait between attempts.\r\n",
                "type": "integer"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "logType",
            "requestId",
            "log"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:GetLogResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "LogStatusEnumType": {
                "description": "This field indicates whether the Charging Station was able to accept the request.\r\n",
                "javaType": "LogStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Accepted",
                    "Rejected",
                    "AcceptedCanceled"
                ]
            },
            "StatusInfoType": {
                "description": "Element providing more information about the status.\r\n",
                "javaType": "StatusInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "reasonCode": {
                        "description": "A predefined code for the reason why the status is returned in this response. The string is case-insensitive.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "additionalInfo": {
                        "description": "Additional text to provide detailed information.\r\n",
                        "type": "string",
                        "maxLength": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "reasonCode"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "status": {
                "$ref": "#/definitions/LogStatusEnumType"
            },
            "statusInfo": {
                "$ref": "#/definitions/StatusInfoType"
            },
            "filename": {
                "description": "This contains the name of the log file that will be uploaded. This field is not present when no logging information is available.\r\n",
                "type": "string",
                "maxLength": 255
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "status"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:GetMonitoringReportRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "MonitoringCriterionEnumType": {
                "javaType": "MonitoringCriterionEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "ThresholdMonitoring",
                    "DeltaMonitoring",
                    "PeriodicMonitoring"
                ]
            },
            "ComponentType": {
                "description": "A physical or logical component\r\n",
                "javaType": "Component",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "evse": {
                        "$ref": "#/definitions/EVSEType"
                    },
                    "name": {
                        "description": "Name of the component. Name should be taken from the list of standardized component names whenever possible. Case Insensitive. strongly advised to use Camel Case.\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "instance": {
                        "description": "Name of instance in case the component exists as multiple instances. Case Insensitive. strongly advised to use Camel Case.\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "name"
                ]
            },
            "ComponentVariableType": {
                "description": "Class to report components, variables and variable attributes and characteristics.\r\n",
                "javaType": "ComponentVariable",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "component": {
                        "$ref": "#/definitions/ComponentType"
                    },
                    "variable": {
                        "$ref": "#/definitions/VariableType"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "component"
                ]
            },
            "EVSEType": {
                "description": "Electric Vehicle Supply Equipment\r\n",
                "javaType": "EVSE",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "id": {
                        "description": "EVSE Identifier. This contains a number (&gt; 0) designating an EVSE of the Charging Station.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "connectorId": {
                        "description": "An id to designate a specific connector (on an EVSE) by connector index number.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "id"
                ]
            },
            "VariableType": {
                "description": "Reference key to a component-variable.\r\n",
                "javaType": "Variable",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "name": {
                        "description": "Name of the variable. Name should be taken from the list of standardized variable names whenever possible. Case Insensitive. strongly advised to use Camel Case.\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "instance": {
                        "description": "Name of instance in case the variable exists as multiple instances. Case Insensitive. strongly advised to use Camel Case.\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "name"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "componentVariable": {
                "type": "array",
                "additionalItems": false,
                "items": {
                    "$ref": "#/definitions/ComponentVariableType"
                },
                "minItems": 1
            },
            "requestId": {
                "description": "The Id of the request.\r\n",
                "type": "integer"
            },
            "monitoringCriteria": {
                "description": "This field contains criteria for components for which a monitoring report is requested\r\n",
                "type": "array",
                "additionalItems": false,
                "items": {
                    "$ref": "#/definitions/MonitoringCriterionEnumType"
                },
                "minItems": 1,
                "maxItems": 3
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "requestId"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:GetMonitoringReportResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "GenericDeviceModelStatusEnumType": {
                "description": "This field indicates whether the Charging Station was able to accept the request.\r\n",
                "javaType": "GenericDeviceModelStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Accepted",
                    "Rejected",
                    "NotSupported",
                    "EmptyResultSet"
                ]
            },
            "StatusInfoType": {
                "description": "Element providing more information about the status.\r\n",
                "javaType": "StatusInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "reasonCode": {
                        "description": "A predefined code for the reason why the status is returned in this response. The string is case-insensitive.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "additionalInfo": {
                        "description": "Additional text to provide detailed information.\r\n",
                        "type": "string",
                        "maxLength": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "reasonCode"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "status": {
                "$ref": "#/definitions/GenericDeviceModelStatusEnumType"
            },
            "statusInfo": {
                "$ref": "#/definitions/StatusInfoType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "status"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:GetPeriodicEventStreamRequest",
        "description": "This message is empty. It has no fields.\r\n",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        }
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:GetPeriodicEventStreamResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "ConstantStreamDataType": {
                "javaType": "ConstantStreamData",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "id": {
                        "description": "Uniquely identifies the stream\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "params": {
                        "$ref": "#/definitions/PeriodicEventStreamParamsType"
                    },
                    "variableMonitoringId": {
                        "description": "Id of monitor used to report his event. It can be a preconfigured or hardwired monitor.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "id",
                    "variableMonitoringId",
                    "params"
                ]
            },
            "PeriodicEventStreamParamsType": {
                "javaType": "PeriodicEventStreamParams",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "interval": {
                        "description": "Time in seconds after which stream data is sent.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "values": {
                        "description": "Number of items to be sent together in stream.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                }
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "constantStreamData": {
                "type": "array",
                "additionalItems": false,
                "items": {
                    "$ref": "#/definitions/ConstantStreamDataType"
                },
                "minItems": 1
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        }
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:GetReportRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "ComponentCriterionEnumType": {
                "javaType": "ComponentCriterionEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Active",
                    "Available",
                    "Enabled",
                    "Problem"
                ]
            },
            "ComponentType": {
                "description": "A physical or logical component\r\n",
                "javaType": "Component",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "evse": {
                        "$ref": "#/definitions/EVSEType"
                    },
                    "name": {
                        "description": "Name of the component. Name should be taken from the list of standardized component names whenever possible. Case Insensitive. strongly advised to use Camel Case.\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "instance": {
                        "description": "Name of instance in case the component exists as multiple instances. Case Insensitive. strongly advised to use Camel Case.\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "name"
                ]
            },
            "ComponentVariableType": {
                "description": "Class to report components, variables and variable attributes and characteristics.\r\n",
                "javaType": "ComponentVariable",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "component": {
                        "$ref": "#/definitions/ComponentType"
                    },
                    "variable": {
                        "$ref": "#/definitions/VariableType"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "component"
                ]
            },
            "EVSEType": {
                "description": "Electric Vehicle Supply Equipment\r\n",
                "javaType": "EVSE",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "id": {
                        "description": "EVSE Identifier. This contains a number (&gt; 0) designating an EVSE of the Charging Station.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "connectorId": {
                        "description": "An id to designate a specific connector (on an EVSE) by connector index number.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "id"
                ]
            },
            "VariableType": {
                "description": "Reference key to a component-variable.\r\n",
                "javaType": "Variable",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "name": {
                        "description": "Name of the variable. Name should be taken from the list of standardized variable names whenever possible. Case Insensitive. strongly advised to use Camel Case.\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "instance": {
                        "description": "Name of instance in case the variable exists as multiple instances. Case Insensitive. strongly advised to use Camel Case.\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "name"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "componentVariable": {
                "type": "array",
                "additionalItems": false,
                "items": {
                    "$ref": "#/definitions/ComponentVariableType"
                },
                "minItems": 1
            },
            "requestId": {
                "description": "The Id of the request.\r\n",
                "type": "integer"
            },
            "componentCriteria": {
                "description": "This field contains criteria for components for which a report is requested\r\n",
                "type": "array",
                "additionalItems": false,
                "items": {
                    "$ref": "#/definitions/ComponentCriterionEnumType"
                },
                "minItems": 1,
                "maxItems": 4
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "requestId"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:GetReportResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "GenericDeviceModelStatusEnumType": {
                "description": "This field indicates whether the Charging Station was able to accept the request.\r\n",
                "javaType": "GenericDeviceModelStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Accepted",
                    "Rejected",
                    "NotSupported",
                    "EmptyResultSet"
                ]
            },
            "StatusInfoType": {
                "description": "Element providing more information about the status.\r\n",
                "javaType": "StatusInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "reasonCode": {
                        "description": "A predefined code for the reason why the status is returned in this response. The string is case-insensitive.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "additionalInfo": {
                        "description": "Additional text to provide detailed information.\r\n",
                        "type": "string",
                        "maxLength": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "reasonCode"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "status": {
                "$ref": "#/definitions/GenericDeviceModelStatusEnumType"
            },
            "statusInfo": {
                "$ref": "#/definitions/StatusInfoType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "status"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:GetTariffsRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "evseId": {
                "description": "EVSE id to get tariff from. When _evseId_ = 0, this gets tariffs from all EVSEs.\r\n",
                "type": "integer",
                "minimum": 0
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "evseId"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:GetTariffsResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "TariffGetStatusEnumType": {
                "description": "Status of operation\r\n",
                "javaType": "TariffGetStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Accepted",
                    "Rejected",
                    "NoTariff"
                ]
            },
            "TariffKindEnumType": {
                "description": "Kind of tariff (driver/default)\r\n",
                "javaType": "TariffKindEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "DefaultTariff",
                    "DriverTariff"
                ]
            },
            "StatusInfoType": {
                "description": "Element providing more information about the status.\r\n",
                "javaType": "StatusInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "reasonCode": {
                        "description": "A predefined code for the reason why the status is returned in this response. The string is case-insensitive.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "additionalInfo": {
                        "description": "Additional text to provide detailed information.\r\n",
                        "type": "string",
                        "maxLength": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "reasonCode"
                ]
            },
            "TariffAssignmentType": {
                "description": "Shows assignment of tariffs to EVSE or IdToken.\r\n",
                "javaType": "TariffAssignment",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "tariffId": {
                        "description": "Tariff id.\r\n",
                        "type": "string",
                        "maxLength": 60
                    },
                    "tariffKind": {
                        "$ref": "#/definitions/TariffKindEnumType"
                    },
                    "validFrom": {
                        "description": "Date/time when this tariff become active.\r\n",
                        "type": "string",
                        "format": "date-time"
                    },
                    "evseIds": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "type": "integer",
                            "minimum": 0
                        },
                        "minItems": 1
                    },
                    "idTokens": {
                        "description": "IdTokens related to tariff\r\n",
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "type": "string",
                            "maxLength": 255
                        },
                        "minItems": 1
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "tariffId",
                    "tariffKind"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "status": {
                "$ref": "#/definitions/TariffGetStatusEnumType"
            },
            "statusInfo": {
                "$ref": "#/definitions/StatusInfoType"
            },
            "tariffAssignments": {
                "type": "array",
                "additionalItems": false,
                "items": {
                    "$ref": "#/definitions/TariffAssignmentType"
                },
                "minItems": 1
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "status"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:GetTransactionStatusRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "transactionId": {
                "description": "The Id of the transaction for which the status is requested.\r\n",
                "type": "string",
                "maxLength": 36
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        }
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:GetTransactionStatusResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "ongoingIndicator": {
                "description": "Whether the transaction is still ongoing.\r\n",
                "type": "boolean"
            },
            "messagesInQueue": {
                "description": "Whether there are still message to be delivered.\r\n",
                "type": "boolean"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "messagesInQueue"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:GetVariablesRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "AttributeEnumType": {
                "description": "Attribute type for which value is requested. When absent, default Actual is assumed.\r\n",
                "javaType": "AttributeEnum",
                "type": "string",
                "default": "Actual",
                "additionalProperties": false,
                "enum": [
                    "Actual",
                    "Target",
                    "MinSet",
                    "MaxSet"
                ]
            },
            "ComponentType": {
                "description": "A physical or logical component\r\n",
                "javaType": "Component",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "evse": {
                        "$ref": "#/definitions/EVSEType"
                    },
                    "name": {
                        "description": "Name of the component. Name should be taken from the list of standardized component names whenever possible. Case Insensitive. strongly advised to use Camel Case.\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "instance": {
                        "description": "Name of instance in case the component exists as multiple instances. Case Insensitive. strongly advised to use Camel Case.\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "name"
                ]
            },
            "EVSEType": {
                "description": "Electric Vehicle Supply Equipment\r\n",
                "javaType": "EVSE",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "id": {
                        "description": "EVSE Identifier. This contains a number (&gt; 0) designating an EVSE of the Charging Station.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "connectorId": {
                        "description": "An id to designate a specific connector (on an EVSE) by connector index number.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "id"
                ]
            },
            "GetVariableDataType": {
                "description": "Class to hold parameters for GetVariables request.\r\n",
                "javaType": "GetVariableData",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "attributeType": {
                        "$ref": "#/definitions/AttributeEnumType"
                    },
                    "component": {
                        "$ref": "#/definitions/ComponentType"
                    },
                    "variable": {
                        "$ref": "#/definitions/VariableType"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "component",
                    "variable"
                ]
            },
            "VariableType": {
                "description": "Reference key to a component-variable.\r\n",
                "javaType": "Variable",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "name": {
                        "description": "Name of the variable. Name should be taken from the list of standardized variable names whenever possible. Case Insensitive. strongly advised to use Camel Case.\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "instance": {
                        "description": "Name of instance in case the variable exists as multiple instances. Case Insensitive. strongly advised to use Camel Case.\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "name"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "getVariableData": {
                "type": "array",
                "additionalItems": false,
                "items": {
                    "$ref": "#/definitions/GetVariableDataType"
                },
                "minItems": 1
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "getVariableData"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:GetVariablesResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "AttributeEnumType": {
                "javaType": "AttributeEnum",
                "type": "string",
                "default": "Actual",
                "additionalProperties": false,
                "enum": [
                    "Actual",
                    "Target",
                    "MinSet",
                    "MaxSet"
                ]
            },
            "GetVariableStatusEnumType": {
                "javaType": "GetVariableStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Accepted",
                    "Rejected",
                    "UnknownComponent",
                    "UnknownVariable",
                    "NotSupportedAttributeType"
                ]
            },
            "ComponentType": {
                "description": "A physical or logical component\r\n",
                "javaType": "Component",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "evse": {
                        "$ref": "#/definitions/EVSEType"
                    },
                    "name": {
                        "description": "Name of the component. Name should be taken from the list of standardized component names whenever possible. Case Insensitive. strongly advised to use Camel Case.\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "instance": {
                        "description": "Name of instance in case the component exists as multiple instances. Case Insensitive. strongly advised to use Camel Case.\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "name"
                ]
            },
            "EVSEType": {
                "description": "Electric Vehicle Supply Equipment\r\n",
                "javaType": "EVSE",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "id": {
                        "description": "EVSE Identifier. This contains a number (&gt; 0) designating an EVSE of the Charging Station.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "connectorId": {
                        "description": "An id to designate a specific connector (on an EVSE) by connector index number.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "id"
                ]
            },
            "GetVariableResultType": {
                "description": "Class to hold results of GetVariables request.\r\n",
                "javaType": "GetVariableResult",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "attributeStatus": {
                        "$ref": "#/definitions/GetVariableStatusEnumType"
                    },
                    "attributeStatusInfo": {
                        "$ref": "#/definitions/StatusInfoType"
                    },
                    "attributeType": {
                        "$ref": "#/definitions/AttributeEnumType"
                    },
                    "attributeValue": {
                        "description": "Value of requested attribute type of component-variable. This field can only be empty when the given status is NOT accepted.\r\n\r\nThe Configuration Variable &lt;&lt;configkey-reporting-value-size,ReportingValueSize&gt;&gt; can be used to limit GetVariableResult.attributeValue, VariableAttribute.value and EventData.actualValue. The max size of these values will always remain equal. \r\n\r\n",
                        "type": "string",
                        "maxLength": 2500
                    },
                    "component": {
                        "$ref": "#/definitions/ComponentType"
                    },
                    "variable": {
                        "$ref": "#/definitions/VariableType"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "attributeStatus",
                    "component",
                    "variable"
                ]
            },
            "StatusInfoType": {
                "description": "Element providing more information about the status.\r\n",
                "javaType": "StatusInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "reasonCode": {
                        "description": "A predefined code for the reason why the status is returned in this response. The string is case-insensitive.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "additionalInfo": {
                        "description": "Additional text to provide detailed information.\r\n",
                        "type": "string",
                        "maxLength": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "reasonCode"
                ]
            },
            "VariableType": {
                "description": "Reference key to a component-variable.\r\n",
                "javaType": "Variable",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "name": {
                        "description": "Name of the variable. Name should be taken from the list of standardized variable names whenever possible. Case Insensitive. strongly advised to use Camel Case.\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "instance": {
                        "description": "Name of instance in case the variable exists as multiple instances. Case Insensitive. strongly advised to use Camel Case.\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "name"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "getVariableResult": {
                "type": "array",
                "additionalItems": false,
                "items": {
                    "$ref": "#/definitions/GetVariableResultType"
                },
                "minItems": 1
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "getVariableResult"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:HeartbeatRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        }
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:HeartbeatResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "currentTime": {
                "description": "Contains the current time of the CSMS.\r\n",
                "type": "string",
                "format": "date-time"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "currentTime"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:InstallCertificateRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "InstallCertificateUseEnumType": {
                "description": "Indicates the certificate type that is sent.\r\n",
                "javaType": "InstallCertificateUseEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "V2GRootCertificate",
                    "MORootCertificate",
                    "ManufacturerRootCertificate",
                    "CSMSRootCertificate",
                    "OEMRootCertificate"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "certificateType": {
                "$ref": "#/definitions/InstallCertificateUseEnumType"
            },
            "certificate": {
                "description": "A PEM encoded X.509 certificate.\r\n",
                "type": "string",
                "maxLength": 10000
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "certificateType",
            "certificate"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:InstallCertificateResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "InstallCertificateStatusEnumType": {
                "description": "Charging Station indicates if installation was successful.\r\n",
                "javaType": "InstallCertificateStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Accepted",
                    "Rejected",
                    "Failed"
                ]
            },
            "StatusInfoType": {
                "description": "Element providing more information about the status.\r\n",
                "javaType": "StatusInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "reasonCode": {
                        "description": "A predefined code for the reason why the status is returned in this response. The string is case-insensitive.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "additionalInfo": {
                        "description": "Additional text to provide detailed information.\r\n",
                        "type": "string",
                        "maxLength": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "reasonCode"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "status": {
                "$ref": "#/definitions/InstallCertificateStatusEnumType"
            },
            "statusInfo": {
                "$ref": "#/definitions/StatusInfoType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "status"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:LogStatusNotificationRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "UploadLogStatusEnumType": {
                "description": "This contains the status of the log upload.\r\n",
                "javaType": "UploadLogStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "BadMessage",
                    "Idle",
                    "NotSupportedOperation",
                    "PermissionDenied",
                    "Uploaded",
                    "UploadFailure",
                    "Uploading",
                    "AcceptedCanceled"
                ]
            },
            "StatusInfoType": {
                "description": "Element providing more information about the status.\r\n",
                "javaType": "StatusInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "reasonCode": {
                        "description": "A predefined code for the reason why the status is returned in this response. The string is case-insensitive.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "additionalInfo": {
                        "description": "Additional text to provide detailed information.\r\n",
                        "type": "string",
                        "maxLength": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "reasonCode"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "status": {
                "$ref": "#/definitions/UploadLogStatusEnumType"
            },
            "requestId": {
                "description": "The request id that was provided in GetLogRequest that started this log upload. This field is mandatory,\r\nunless the message was triggered by a TriggerMessageRequest AND there is no log upload ongoing.\r\n",
                "type": "integer"
            },
            "statusInfo": {
                "$ref": "#/definitions/StatusInfoType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "status"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:LogStatusNotificationResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        }
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:MeterValuesRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "LocationEnumType": {
                "description": "Indicates where the measured value has been sampled. Default =  \"Outlet\"\r\n\r\n",
                "javaType": "LocationEnum",
                "type": "string",
                "default": "Outlet",
                "additionalProperties": false,
                "enum": [
                    "Body",
                    "Cable",
                    "EV",
                    "Inlet",
                    "Outlet",
                    "Upstream"
                ]
            },
            "MeasurandEnumType": {
                "description": "Type of measurement. Default = \"Energy.Active.Import.Register\"\r\n",
                "javaType": "MeasurandEnum",
                "type": "string",
                "default": "Energy.Active.Import.Register",
                "additionalProperties": false,
                "enum": [
                    "Current.Export",
                    "Current.Export.Offered",
                    "Current.Export.Minimum",
                    "Current.Import",
                    "Current.Import.Offered",
                    "Current.Import.Minimum",
                    "Current.Offered",
                    "Display.PresentSOC",
                    "Display.MinimumSOC",
                    "Display.TargetSOC",
                    "Display.MaximumSOC",
                    "Display.RemainingTimeToMinimumSOC",
                    "Display.RemainingTimeToTargetSOC",
                    "Display.RemainingTimeToMaximumSOC",
                    "Display.ChargingComplete",
                    "Display.BatteryEnergyCapacity",
                    "Display.InletHot",
                    "Energy.Active.Export.Interval",
                    "Energy.Active.Export.Register",
                    "Energy.Active.Import.Interval",
                    "Energy.Active.Import.Register",
                    "Energy.Active.Import.CableLoss",
                    "Energy.Active.Import.LocalGeneration.Register",
                    "Energy.Active.Net",
                    "Energy.Active.Setpoint.Interval",
                    "Energy.Apparent.Export",
                    "Energy.Apparent.Import",
                    "Energy.Apparent.Net",
                    "Energy.Reactive.Export.Interval",
                    "Energy.Reactive.Export.Register",
                    "Energy.Reactive.Import.Interval",
                    "Energy.Reactive.Import.Register",
                    "Energy.Reactive.Net",
                    "EnergyRequest.Target",
                    "EnergyRequest.Minimum",
                    "EnergyRequest.Maximum",
                    "EnergyRequest.Minimum.V2X",
                    "EnergyRequest.Maximum.V2X",
                    "EnergyRequest.Bulk",
                    "Frequency",
                    "Power.Active.Export",
                    "Power.Active.Import",
                    "Power.Active.Setpoint",
                    "Power.Active.Residual",
                    "Power.Export.Minimum",
                    "Power.Export.Offered",
                    "Power.Factor",
                    "Power.Import.Offered",
                    "Power.Import.Minimum",
                    "Power.Offered",
                    "Power.Reactive.Export",
                    "Power.Reactive.Import",
                    "SoC",
                    "Voltage",
                    "Voltage.Minimum",
                    "Voltage.Maximum"
                ]
            },
            "PhaseEnumType": {
                "description": "Indicates how the measured value is to be interpreted. For instance between L1 and neutral (L1-N) Please note that not all values of phase are applicable to all Measurands. When phase is absent, the measured value is interpreted as an overall value.\r\n",
                "javaType": "PhaseEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "L1",
                    "L2",
                    "L3",
                    "N",
                    "L1-N",
                    "L2-N",
                    "L3-N",
                    "L1-L2",
                    "L2-L3",
                    "L3-L1"
                ]
            },
            "ReadingContextEnumType": {
                "description": "Type of detail value: start, end or sample. Default = \"Sample.Periodic\"\r\n",
                "javaType": "ReadingContextEnum",
                "type": "string",
                "default": "Sample.Periodic",
                "additionalProperties": false,
                "enum": [
                    "Interruption.Begin",
                    "Interruption.End",
                    "Other",
                    "Sample.Clock",
                    "Sample.Periodic",
                    "Transaction.Begin",
                    "Transaction.End",
                    "Trigger"
                ]
            },
            "MeterValueType": {
                "description": "Collection of one or more sampled values in MeterValuesRequest and TransactionEvent. All sampled values in a MeterValue are sampled at the same point in time.\r\n",
                "javaType": "MeterValue",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "sampledValue": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/SampledValueType"
                        },
                        "minItems": 1
                    },
                    "timestamp": {
                        "description": "Timestamp for measured value(s).\r\n",
                        "type": "string",
                        "format": "date-time"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "timestamp",
                    "sampledValue"
                ]
            },
            "SampledValueType": {
                "description": "Single sampled value in MeterValues. Each value can be accompanied by optional fields.\r\n\r\nTo save on mobile data usage, default values of all of the optional fields are such that. The value without any additional fields will be interpreted, as a register reading of active import energy in Wh (Watt-hour) units.\r\n",
                "javaType": "SampledValue",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "value": {
                        "description": "Indicates the measured value.\r\n\r\n",
                        "type": "number"
                    },
                    "measurand": {
                        "$ref": "#/definitions/MeasurandEnumType"
                    },
                    "context": {
                        "$ref": "#/definitions/ReadingContextEnumType"
                    },
                    "phase": {
                        "$ref": "#/definitions/PhaseEnumType"
                    },
                    "location": {
                        "$ref": "#/definitions/LocationEnumType"
                    },
                    "signedMeterValue": {
                        "$ref": "#/definitions/SignedMeterValueType"
                    },
                    "unitOfMeasure": {
                        "$ref": "#/definitions/UnitOfMeasureType"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "value"
                ]
            },
            "SignedMeterValueType": {
                "description": "Represent a signed version of the meter value.\r\n",
                "javaType": "SignedMeterValue",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "signedMeterData": {
                        "description": "Base64 encoded, contains the signed data from the meter in the format specified in _encodingMethod_, which might contain more then just the meter value. It can contain information like timestamps, reference to a customer etc.\r\n",
                        "type": "string",
                        "maxLength": 32768
                    },
                    "signingMethod": {
                        "description": "*(2.1)* Method used to create the digital signature. Optional, if already included in _signedMeterData_. Standard values for this are defined in Appendix as SigningMethodEnumStringType.\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "encodingMethod": {
                        "description": "Format used by the energy meter to encode the meter data. For example: OCMF or EDL.\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "publicKey": {
                        "description": "*(2.1)* Base64 encoded, sending depends on configuration variable _PublicKeyWithSignedMeterValue_.\r\n",
                        "type": "string",
                        "maxLength": 2500
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "signedMeterData",
                    "encodingMethod"
                ]
            },
            "UnitOfMeasureType": {
                "description": "Represents a UnitOfMeasure with a multiplier\r\n",
                "javaType": "UnitOfMeasure",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "unit": {
                        "description": "Unit of the value. Default = \"Wh\" if the (default) measurand is an \"Energy\" type.\r\nThis field SHALL use a value from the list Standardized Units of Measurements in Part 2 Appendices. \r\nIf an applicable unit is available in that list, otherwise a \"custom\" unit might be used.\r\n",
                        "type": "string",
                        "default": "Wh",
                        "maxLength": 20
                    },
                    "multiplier": {
                        "description": "Multiplier, this value represents the exponent to base 10. I.e. multiplier 3 means 10 raised to the 3rd power. Default is 0. +\r\nThe _multiplier_ only multiplies the value of the measurand. It does not specify a conversion between units, for example, kW and W.\r\n",
                        "type": "integer",
                        "default": 0
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                }
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "evseId": {
                "description": "This contains a number (&gt;0) designating an EVSE of the Charging Station. ‘0’ (zero) is used to designate the main power meter.\r\n",
                "type": "integer",
                "minimum": 0
            },
            "meterValue": {
                "type": "array",
                "additionalItems": false,
                "items": {
                    "$ref": "#/definitions/MeterValueType"
                },
                "minItems": 1
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "evseId",
            "meterValue"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:MeterValuesResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        }
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:NotifyAllowedEnergyTransferRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "EnergyTransferModeEnumType": {
                "javaType": "EnergyTransferModeEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "AC_single_phase",
                    "AC_two_phase",
                    "AC_three_phase",
                    "DC",
                    "AC_BPT",
                    "AC_BPT_DER",
                    "AC_DER",
                    "DC_BPT",
                    "DC_ACDP",
                    "DC_ACDP_BPT",
                    "WPT"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "transactionId": {
                "description": "The transaction for which the allowed energy transfer is allowed.\r\n",
                "type": "string",
                "maxLength": 36
            },
            "allowedEnergyTransfer": {
                "description": "Modes of energy transfer that are accepted by CSMS.\r\n",
                "type": "array",
                "additionalItems": false,
                "items": {
                    "$ref": "#/definitions/EnergyTransferModeEnumType"
                },
                "minItems": 1
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "transactionId",
            "allowedEnergyTransfer"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:NotifyAllowedEnergyTransferResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "NotifyAllowedEnergyTransferStatusEnumType": {
                "javaType": "NotifyAllowedEnergyTransferStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Accepted",
                    "Rejected"
                ]
            },
            "StatusInfoType": {
                "description": "Element providing more information about the status.\r\n",
                "javaType": "StatusInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "reasonCode": {
                        "description": "A predefined code for the reason why the status is returned in this response. The string is case-insensitive.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "additionalInfo": {
                        "description": "Additional text to provide detailed information.\r\n",
                        "type": "string",
                        "maxLength": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "reasonCode"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "status": {
                "$ref": "#/definitions/NotifyAllowedEnergyTransferStatusEnumType"
            },
            "statusInfo": {
                "$ref": "#/definitions/StatusInfoType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "status"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:NotifyChargingLimitRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "ChargingRateUnitEnumType": {
                "description": "The unit of measure in which limits and setpoints are expressed.\r\n",
                "javaType": "ChargingRateUnitEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "W",
                    "A"
                ]
            },
            "CostKindEnumType": {
                "description": "The kind of cost referred to in the message element amount\r\n",
                "javaType": "CostKindEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "CarbonDioxideEmission",
                    "RelativePricePercentage",
                    "RenewableGenerationPercentage"
                ]
            },
            "OperationModeEnumType": {
                "description": "*(2.1)* Charging operation mode to use during this time interval. When absent defaults to `ChargingOnly`.\r\n",
                "javaType": "OperationModeEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Idle",
                    "ChargingOnly",
                    "CentralSetpoint",
                    "ExternalSetpoint",
                    "ExternalLimits",
                    "CentralFrequency",
                    "LocalFrequency",
                    "LocalLoadBalancing"
                ]
            },
            "AbsolutePriceScheduleType": {
                "description": "The AbsolutePriceScheduleType is modeled after the same type that is defined in ISO 15118-20, such that if it is supplied by an EMSP as a signed EXI message, the conversion from EXI to JSON (in OCPP) and back to EXI (for ISO 15118-20) does not change the digest and therefore does not invalidate the signature.\r\n\r\nimage::images/AbsolutePriceSchedule-Simple.png[]\r\n\r\n",
                "javaType": "AbsolutePriceSchedule",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "timeAnchor": {
                        "description": "Starting point of price schedule.\r\n",
                        "type": "string",
                        "format": "date-time"
                    },
                    "priceScheduleID": {
                        "description": "Unique ID of price schedule\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "priceScheduleDescription": {
                        "description": "Description of the price schedule.\r\n",
                        "type": "string",
                        "maxLength": 160
                    },
                    "currency": {
                        "description": "Currency according to ISO 4217.\r\n",
                        "type": "string",
                        "maxLength": 3
                    },
                    "language": {
                        "description": "String that indicates what language is used for the human readable strings in the price schedule. Based on ISO 639.\r\n",
                        "type": "string",
                        "maxLength": 8
                    },
                    "priceAlgorithm": {
                        "description": "A string in URN notation which shall uniquely identify an algorithm that defines how to compute an energy fee sum for a specific power profile based on the EnergyFee information from the PriceRule elements.\r\n",
                        "type": "string",
                        "maxLength": 2000
                    },
                    "minimumCost": {
                        "$ref": "#/definitions/RationalNumberType"
                    },
                    "maximumCost": {
                        "$ref": "#/definitions/RationalNumberType"
                    },
                    "priceRuleStacks": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/PriceRuleStackType"
                        },
                        "minItems": 1,
                        "maxItems": 1024
                    },
                    "taxRules": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/TaxRuleType"
                        },
                        "minItems": 1,
                        "maxItems": 10
                    },
                    "overstayRuleList": {
                        "$ref": "#/definitions/OverstayRuleListType"
                    },
                    "additionalSelectedServices": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/AdditionalSelectedServicesType"
                        },
                        "minItems": 1,
                        "maxItems": 5
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "timeAnchor",
                    "priceScheduleID",
                    "currency",
                    "language",
                    "priceAlgorithm",
                    "priceRuleStacks"
                ]
            },
            "AdditionalSelectedServicesType": {
                "description": "Part of ISO 15118-20 price schedule.\r\n\r\n",
                "javaType": "AdditionalSelectedServices",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "serviceFee": {
                        "$ref": "#/definitions/RationalNumberType"
                    },
                    "serviceName": {
                        "description": "Human readable string to identify this service.\r\n",
                        "type": "string",
                        "maxLength": 80
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "serviceName",
                    "serviceFee"
                ]
            },
            "ChargingLimitType": {
                "javaType": "ChargingLimit",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "chargingLimitSource": {
                        "description": "Represents the source of the charging limit. Values defined in appendix as ChargingLimitSourceEnumStringType.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "isLocalGeneration": {
                        "description": "*(2.1)* True when the reported limit concerns local generation that is providing extra capacity, instead of a limitation.\r\n",
                        "type": "boolean"
                    },
                    "isGridCritical": {
                        "description": "Indicates whether the charging limit is critical for the grid.\r\n",
                        "type": "boolean"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "chargingLimitSource"
                ]
            },
            "ChargingSchedulePeriodType": {
                "description": "Charging schedule period structure defines a time period in a charging schedule. It is used in: CompositeScheduleType and in ChargingScheduleType. When used in a NotifyEVChargingScheduleRequest only _startPeriod_, _limit_, _limit_L2_, _limit_L3_ are relevant.\r\n",
                "javaType": "ChargingSchedulePeriod",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "startPeriod": {
                        "description": "Start of the period, in seconds from the start of schedule. The value of StartPeriod also defines the stop time of the previous period.\r\n",
                        "type": "integer"
                    },
                    "limit": {
                        "description": "Optional only when not required by the _operationMode_, as in CentralSetpoint, ExternalSetpoint, ExternalLimits, LocalFrequency,  LocalLoadBalancing. +\r\nCharging rate limit during the schedule period, in the applicable _chargingRateUnit_. \r\nThis SHOULD be a non-negative value; a negative value is only supported for backwards compatibility with older systems that use a negative value to specify a discharging limit.\r\nWhen using _chargingRateUnit_ = `W`, this field represents the sum of the power of all phases, unless values are provided for L2 and L3, in which case this field represents phase L1.\r\n",
                        "type": "number"
                    },
                    "limit_L2": {
                        "description": "*(2.1)* Charging rate limit on phase L2  in the applicable _chargingRateUnit_. \r\n",
                        "type": "number"
                    },
                    "limit_L3": {
                        "description": "*(2.1)* Charging rate limit on phase L3  in the applicable _chargingRateUnit_. \r\n",
                        "type": "number"
                    },
                    "numberPhases": {
                        "description": "The number of phases that can be used for charging. +\r\nFor a DC EVSE this field should be omitted. +\r\nFor an AC EVSE a default value of _numberPhases_ = 3 will be assumed if the field is absent.\r\n",
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 3
                    },
                    "phaseToUse": {
                        "description": "Values: 1..3, Used if numberPhases=1 and if the EVSE is capable of switching the phase connected to the EV, i.e. ACPhaseSwitchingSupported is defined and true. It’s not allowed unless both conditions above are true. If both conditions are true, and phaseToUse is omitted, the Charging Station / EVSE will make the selection on its own.\r\n\r\n",
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 3
                    },
                    "dischargeLimit": {
                        "description": "*(2.1)* Limit in _chargingRateUnit_ that the EV is allowed to discharge with. Note, these are negative values in order to be consistent with _setpoint_, which can be positive and negative.  +\r\nFor AC this field represents the sum of all phases, unless values are provided for L2 and L3, in which case this field represents phase L1.\r\n",
                        "type": "number",
                        "maximum": 0
                    },
                    "dischargeLimit_L2": {
                        "description": "*(2.1)* Limit in _chargingRateUnit_ on phase L2 that the EV is allowed to discharge with. \r\n",
                        "type": "number",
                        "maximum": 0
                    },
                    "dischargeLimit_L3": {
                        "description": "*(2.1)* Limit in _chargingRateUnit_ on phase L3 that the EV is allowed to discharge with. \r\n",
                        "type": "number",
                        "maximum": 0
                    },
                    "setpoint": {
                        "description": "*(2.1)* Setpoint in _chargingRateUnit_ that the EV should follow as close as possible. Use negative values for discharging. +\r\nWhen a limit and/or _dischargeLimit_ are given the overshoot when following _setpoint_ must remain within these values.\r\nThis field represents the sum of all phases, unless values are provided for L2 and L3, in which case this field represents phase L1.\r\n",
                        "type": "number"
                    },
                    "setpoint_L2": {
                        "description": "*(2.1)* Setpoint in _chargingRateUnit_ that the EV should follow on phase L2 as close as possible.\r\n",
                        "type": "number"
                    },
                    "setpoint_L3": {
                        "description": "*(2.1)* Setpoint in _chargingRateUnit_ that the EV should follow on phase L3 as close as possible. \r\n",
                        "type": "number"
                    },
                    "setpointReactive": {
                        "description": "*(2.1)* Setpoint for reactive power (or current) in _chargingRateUnit_ that the EV should follow as closely as possible. Positive values for inductive, negative for capacitive reactive power or current.  +\r\nThis field represents the sum of all phases, unless values are provided for L2 and L3, in which case this field represents phase L1.\r\n",
                        "type": "number"
                    },
                    "setpointReactive_L2": {
                        "description": "*(2.1)* Setpoint for reactive power (or current) in _chargingRateUnit_ that the EV should follow on phase L2 as closely as possible. \r\n",
                        "type": "number"
                    },
                    "setpointReactive_L3": {
                        "description": "*(2.1)* Setpoint for reactive power (or current) in _chargingRateUnit_ that the EV should follow on phase L3 as closely as possible. \r\n",
                        "type": "number"
                    },
                    "preconditioningRequest": {
                        "description": "*(2.1)* If  true, the EV should attempt to keep the BMS preconditioned for this time interval.\r\n",
                        "type": "boolean"
                    },
                    "evseSleep": {
                        "description": "*(2.1)* If true, the EVSE must turn off power electronics/modules associated with this transaction. Default value when absent is false.\r\n",
                        "type": "boolean"
                    },
                    "v2xBaseline": {
                        "description": "*(2.1)* Power value that, when present, is used as a baseline on top of which values from _v2xFreqWattCurve_ and _v2xSignalWattCurve_ are added.\r\n\r\n",
                        "type": "number"
                    },
                    "operationMode": {
                        "$ref": "#/definitions/OperationModeEnumType"
                    },
                    "v2xFreqWattCurve": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/V2XFreqWattPointType"
                        },
                        "minItems": 1,
                        "maxItems": 20
                    },
                    "v2xSignalWattCurve": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/V2XSignalWattPointType"
                        },
                        "minItems": 1,
                        "maxItems": 20
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "startPeriod"
                ]
            },
            "ChargingScheduleType": {
                "description": "Charging schedule structure defines a list of charging periods, as used in: NotifyEVChargingScheduleRequest and ChargingProfileType. When used in a NotifyEVChargingScheduleRequest only _duration_ and _chargingSchedulePeriod_ are relevant and _chargingRateUnit_ must be 'W'. +\r\nAn ISO 15118-20 session may provide either an _absolutePriceSchedule_ or a _priceLevelSchedule_. An ISO 15118-2 session can only provide a_salesTariff_ element. The field _digestValue_ is used when price schedule or sales tariff are signed.\r\n\r\nimage::images/ChargingSchedule-Simple.png[]\r\n\r\n\r\n",
                "javaType": "ChargingSchedule",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "limitAtSoC": {
                        "$ref": "#/definitions/LimitAtSoCType"
                    },
                    "startSchedule": {
                        "description": "Starting point of an absolute schedule or recurring schedule.\r\n",
                        "type": "string",
                        "format": "date-time"
                    },
                    "duration": {
                        "description": "Duration of the charging schedule in seconds. If the duration is left empty, the last period will continue indefinitely or until end of the transaction in case startSchedule is absent.\r\n",
                        "type": "integer"
                    },
                    "chargingRateUnit": {
                        "$ref": "#/definitions/ChargingRateUnitEnumType"
                    },
                    "minChargingRate": {
                        "description": "Minimum charging rate supported by the EV. The unit of measure is defined by the chargingRateUnit. This parameter is intended to be used by a local smart charging algorithm to optimize the power allocation for in the case a charging process is inefficient at lower charging rates. \r\n",
                        "type": "number"
                    },
                    "powerTolerance": {
                        "description": "*(2.1)* Power tolerance when following EVPowerProfile.\r\n\r\n",
                        "type": "number"
                    },
                    "signatureId": {
                        "description": "*(2.1)* Id of this element for referencing in a signature.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "digestValue": {
                        "description": "*(2.1)* Base64 encoded hash (SHA256 for ISO 15118-2, SHA512 for ISO 15118-20) of the EXI price schedule element. Used in signature.\r\n",
                        "type": "string",
                        "maxLength": 88
                    },
                    "useLocalTime": {
                        "description": "*(2.1)* Defaults to false. When true, disregard time zone offset in dateTime fields of  _ChargingScheduleType_ and use unqualified local time at Charging Station instead.\r\n This allows the same `Absolute` or `Recurring` charging profile to be used in both summer and winter time.\r\n\r\n",
                        "type": "boolean"
                    },
                    "chargingSchedulePeriod": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/ChargingSchedulePeriodType"
                        },
                        "minItems": 1,
                        "maxItems": 1024
                    },
                    "randomizedDelay": {
                        "description": "*(2.1)* Defaults to 0. When _randomizedDelay_ not equals zero, then the start of each &lt;&lt;cmn_chargingscheduleperiodtype,ChargingSchedulePeriodType&gt;&gt; is delayed by a randomly chosen number of seconds between 0 and _randomizedDelay_.  Only allowed for TxProfile and TxDefaultProfile.\r\n\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "salesTariff": {
                        "$ref": "#/definitions/SalesTariffType"
                    },
                    "absolutePriceSchedule": {
                        "$ref": "#/definitions/AbsolutePriceScheduleType"
                    },
                    "priceLevelSchedule": {
                        "$ref": "#/definitions/PriceLevelScheduleType"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "id",
                    "chargingRateUnit",
                    "chargingSchedulePeriod"
                ]
            },
            "ConsumptionCostType": {
                "javaType": "ConsumptionCost",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "startValue": {
                        "description": "The lowest level of consumption that defines the starting point of this consumption block. The block interval extends to the start of the next interval.\r\n",
                        "type": "number"
                    },
                    "cost": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/CostType"
                        },
                        "minItems": 1,
                        "maxItems": 3
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "startValue",
                    "cost"
                ]
            },
            "CostType": {
                "javaType": "Cost",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "costKind": {
                        "$ref": "#/definitions/CostKindEnumType"
                    },
                    "amount": {
                        "description": "The estimated or actual cost per kWh\r\n",
                        "type": "integer"
                    },
                    "amountMultiplier": {
                        "description": "Values: -3..3, The amountMultiplier defines the exponent to base 10 (dec). The final value is determined by: amount * 10 ^ amountMultiplier\r\n",
                        "type": "integer"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "costKind",
                    "amount"
                ]
            },
            "LimitAtSoCType": {
                "javaType": "LimitAtSoC",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "soc": {
                        "description": "The SoC value beyond which the charging rate limit should be applied.\r\n",
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 100
                    },
                    "limit": {
                        "description": "Charging rate limit beyond the SoC value.\r\nThe unit is defined by _chargingSchedule.chargingRateUnit_.\r\n\r\n",
                        "type": "number"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "soc",
                    "limit"
                ]
            },
            "OverstayRuleListType": {
                "description": "Part of ISO 15118-20 price schedule.\r\n\r\n",
                "javaType": "OverstayRuleList",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "overstayPowerThreshold": {
                        "$ref": "#/definitions/RationalNumberType"
                    },
                    "overstayRule": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/OverstayRuleType"
                        },
                        "minItems": 1,
                        "maxItems": 5
                    },
                    "overstayTimeThreshold": {
                        "description": "Time till overstay is applied in seconds.\r\n",
                        "type": "integer"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "overstayRule"
                ]
            },
            "OverstayRuleType": {
                "description": "Part of ISO 15118-20 price schedule.\r\n\r\n",
                "javaType": "OverstayRule",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "overstayFee": {
                        "$ref": "#/definitions/RationalNumberType"
                    },
                    "overstayRuleDescription": {
                        "description": "Human readable string to identify the overstay rule.\r\n",
                        "type": "string",
                        "maxLength": 32
                    },
                    "startTime": {
                        "description": "Time in seconds after trigger of the parent Overstay Rules for this particular fee to apply.\r\n",
                        "type": "integer"
                    },
                    "overstayFeePeriod": {
                        "description": "Time till overstay will be reapplied\r\n",
                        "type": "integer"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "startTime",
                    "overstayFeePeriod",
                    "overstayFee"
                ]
            },
            "PriceLevelScheduleEntryType": {
                "description": "Part of ISO 15118-20 price schedule.\r\n",
                "javaType": "PriceLevelScheduleEntry",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "duration": {
                        "description": "The amount of seconds that define the duration of this given PriceLevelScheduleEntry.\r\n",
                        "type": "integer"
                    },
                    "priceLevel": {
                        "description": "Defines the price level of this PriceLevelScheduleEntry (referring to NumberOfPriceLevels). Small values for the PriceLevel represent a cheaper PriceLevelScheduleEntry. Large values for the PriceLevel represent a more expensive PriceLevelScheduleEntry.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "duration",
                    "priceLevel"
                ]
            },
            "PriceLevelScheduleType": {
                "description": "The PriceLevelScheduleType is modeled after the same type that is defined in ISO 15118-20, such that if it is supplied by an EMSP as a signed EXI message, the conversion from EXI to JSON (in OCPP) and back to EXI (for ISO 15118-20) does not change the digest and therefore does not invalidate the signature.\r\n",
                "javaType": "PriceLevelSchedule",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "priceLevelScheduleEntries": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/PriceLevelScheduleEntryType"
                        },
                        "minItems": 1,
                        "maxItems": 100
                    },
                    "timeAnchor": {
                        "description": "Starting point of this price schedule.\r\n",
                        "type": "string",
                        "format": "date-time"
                    },
                    "priceScheduleId": {
                        "description": "Unique ID of this price schedule.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "priceScheduleDescription": {
                        "description": "Description of the price schedule.\r\n",
                        "type": "string",
                        "maxLength": 32
                    },
                    "numberOfPriceLevels": {
                        "description": "Defines the overall number of distinct price level elements used across all PriceLevelSchedules.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "timeAnchor",
                    "priceScheduleId",
                    "numberOfPriceLevels",
                    "priceLevelScheduleEntries"
                ]
            },
            "PriceRuleStackType": {
                "description": "Part of ISO 15118-20 price schedule.\r\n",
                "javaType": "PriceRuleStack",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "duration": {
                        "description": "Duration of the stack of price rules.  he amount of seconds that define the duration of the given PriceRule(s).\r\n",
                        "type": "integer"
                    },
                    "priceRule": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/PriceRuleType"
                        },
                        "minItems": 1,
                        "maxItems": 8
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "duration",
                    "priceRule"
                ]
            },
            "PriceRuleType": {
                "description": "Part of ISO 15118-20 price schedule.\r\n\r\n",
                "javaType": "PriceRule",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "parkingFeePeriod": {
                        "description": "The duration of the parking fee period (in seconds).\r\nWhen the time enters into a ParkingFeePeriod, the ParkingFee will apply to the session. .\r\n",
                        "type": "integer"
                    },
                    "carbonDioxideEmission": {
                        "description": "Number of grams of CO2 per kWh.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "renewableGenerationPercentage": {
                        "description": "Percentage of the power that is created by renewable resources.\r\n",
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 100
                    },
                    "energyFee": {
                        "$ref": "#/definitions/RationalNumberType"
                    },
                    "parkingFee": {
                        "$ref": "#/definitions/RationalNumberType"
                    },
                    "powerRangeStart": {
                        "$ref": "#/definitions/RationalNumberType"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "energyFee",
                    "powerRangeStart"
                ]
            },
            "RationalNumberType": {
                "description": "Part of ISO 15118-20 price schedule.\r\n\r\n",
                "javaType": "RationalNumber",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "exponent": {
                        "description": "The exponent to base 10 (dec)\r\n",
                        "type": "integer"
                    },
                    "value": {
                        "description": "Value which shall be multiplied.\r\n",
                        "type": "integer"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "exponent",
                    "value"
                ]
            },
            "RelativeTimeIntervalType": {
                "javaType": "RelativeTimeInterval",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "start": {
                        "description": "Start of the interval, in seconds from NOW.\r\n",
                        "type": "integer"
                    },
                    "duration": {
                        "description": "Duration of the interval, in seconds.\r\n",
                        "type": "integer"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "start"
                ]
            },
            "SalesTariffEntryType": {
                "javaType": "SalesTariffEntry",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "relativeTimeInterval": {
                        "$ref": "#/definitions/RelativeTimeIntervalType"
                    },
                    "ePriceLevel": {
                        "description": "Defines the price level of this SalesTariffEntry (referring to NumEPriceLevels). Small values for the EPriceLevel represent a cheaper TariffEntry. Large values for the EPriceLevel represent a more expensive TariffEntry.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "consumptionCost": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/ConsumptionCostType"
                        },
                        "minItems": 1,
                        "maxItems": 3
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "relativeTimeInterval"
                ]
            },
            "SalesTariffType": {
                "description": "A SalesTariff provided by a Mobility Operator (EMSP) .\r\nNOTE: This dataType is based on dataTypes from &lt;&lt;ref-ISOIEC15118-2,ISO 15118-2&gt;&gt;.\r\n",
                "javaType": "SalesTariff",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "id": {
                        "description": "SalesTariff identifier used to identify one sales tariff. An SAID remains a unique identifier for one schedule throughout a charging session.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "salesTariffDescription": {
                        "description": "A human readable title/short description of the sales tariff e.g. for HMI display purposes.\r\n",
                        "type": "string",
                        "maxLength": 32
                    },
                    "numEPriceLevels": {
                        "description": "Defines the overall number of distinct price levels used across all provided SalesTariff elements.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "salesTariffEntry": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/SalesTariffEntryType"
                        },
                        "minItems": 1,
                        "maxItems": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "id",
                    "salesTariffEntry"
                ]
            },
            "TaxRuleType": {
                "description": "Part of ISO 15118-20 price schedule.\r\n\r\n",
                "javaType": "TaxRule",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "taxRuleID": {
                        "description": "Id for the tax rule.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "taxRuleName": {
                        "description": "Human readable string to identify the tax rule.\r\n",
                        "type": "string",
                        "maxLength": 100
                    },
                    "taxIncludedInPrice": {
                        "description": "Indicates whether the tax is included in any price or not.\r\n",
                        "type": "boolean"
                    },
                    "appliesToEnergyFee": {
                        "description": "Indicates whether this tax applies to Energy Fees.\r\n",
                        "type": "boolean"
                    },
                    "appliesToParkingFee": {
                        "description": "Indicates whether this tax applies to Parking Fees.\r\n\r\n",
                        "type": "boolean"
                    },
                    "appliesToOverstayFee": {
                        "description": "Indicates whether this tax applies to Overstay Fees.\r\n\r\n",
                        "type": "boolean"
                    },
                    "appliesToMinimumMaximumCost": {
                        "description": "Indicates whether this tax applies to Minimum/Maximum Cost.\r\n\r\n",
                        "type": "boolean"
                    },
                    "taxRate": {
                        "$ref": "#/definitions/RationalNumberType"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "taxRuleID",
                    "appliesToEnergyFee",
                    "appliesToParkingFee",
                    "appliesToOverstayFee",
                    "appliesToMinimumMaximumCost",
                    "taxRate"
                ]
            },
            "V2XFreqWattPointType": {
                "description": "*(2.1)* A point of a frequency-watt curve.\r\n",
                "javaType": "V2XFreqWattPoint",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "frequency": {
                        "description": "Net frequency in Hz.\r\n",
                        "type": "number"
                    },
                    "power": {
                        "description": "Power in W to charge (positive) or discharge (negative) at specified frequency.\r\n",
                        "type": "number"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "frequency",
                    "power"
                ]
            },
            "V2XSignalWattPointType": {
                "description": "*(2.1)* A point of a signal-watt curve.\r\n",
                "javaType": "V2XSignalWattPoint",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "signal": {
                        "description": "Signal value from an AFRRSignalRequest.\r\n",
                        "type": "integer"
                    },
                    "power": {
                        "description": "Power in W to charge (positive) or discharge (negative) at specified frequency.\r\n",
                        "type": "number"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "signal",
                    "power"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "chargingSchedule": {
                "type": "array",
                "additionalItems": false,
                "items": {
                    "$ref": "#/definitions/ChargingScheduleType"
                },
                "minItems": 1
            },
            "evseId": {
                "description": "The EVSE to which the charging limit is set. If absent or when zero, it applies to the entire Charging Station.\r\n",
                "type": "integer",
                "minimum": 0
            },
            "chargingLimit": {
                "$ref": "#/definitions/ChargingLimitType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "chargingLimit"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:NotifyChargingLimitResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        }
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:NotifyCustomerInformationRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "data": {
                "description": "(Part of) the requested data. No format specified in which the data is returned. Should be human readable.\r\n",
                "type": "string",
                "maxLength": 512
            },
            "tbc": {
                "description": "“to be continued” indicator. Indicates whether another part of the monitoringData follows in an upcoming notifyMonitoringReportRequest message. Default value when omitted is false.\r\n",
                "type": "boolean",
                "default": false
            },
            "seqNo": {
                "description": "Sequence number of this message. First message starts at 0.\r\n",
                "type": "integer",
                "minimum": 0
            },
            "generatedAt": {
                "description": " Timestamp of the moment this message was generated at the Charging Station.\r\n",
                "type": "string",
                "format": "date-time"
            },
            "requestId": {
                "description": "The Id of the request.\r\n\r\n",
                "type": "integer",
                "minimum": 0
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "data",
            "seqNo",
            "generatedAt",
            "requestId"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:NotifyCustomerInformationResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        }
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:NotifyDERAlarmRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "DERControlEnumType": {
                "description": "Name of DER control, e.g. LFMustTrip\r\n",
                "javaType": "DERControlEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "EnterService",
                    "FreqDroop",
                    "FreqWatt",
                    "FixedPFAbsorb",
                    "FixedPFInject",
                    "FixedVar",
                    "Gradients",
                    "HFMustTrip",
                    "HFMayTrip",
                    "HVMustTrip",
                    "HVMomCess",
                    "HVMayTrip",
                    "LimitMaxDischarge",
                    "LFMustTrip",
                    "LVMustTrip",
                    "LVMomCess",
                    "LVMayTrip",
                    "PowerMonitoringMustTrip",
                    "VoltVar",
                    "VoltWatt",
                    "WattPF",
                    "WattVar"
                ]
            },
            "GridEventFaultEnumType": {
                "description": "Type of grid event that caused this\r\n\r\n",
                "javaType": "GridEventFaultEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "CurrentImbalance",
                    "LocalEmergency",
                    "LowInputPower",
                    "OverCurrent",
                    "OverFrequency",
                    "OverVoltage",
                    "PhaseRotation",
                    "RemoteEmergency",
                    "UnderFrequency",
                    "UnderVoltage",
                    "VoltageImbalance"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "controlType": {
                "$ref": "#/definitions/DERControlEnumType"
            },
            "gridEventFault": {
                "$ref": "#/definitions/GridEventFaultEnumType"
            },
            "alarmEnded": {
                "description": "True when error condition has ended.\r\nAbsent or false when alarm has started.\r\n\r\n",
                "type": "boolean"
            },
            "timestamp": {
                "description": "Time of start or end of alarm.\r\n\r\n",
                "type": "string",
                "format": "date-time"
            },
            "extraInfo": {
                "description": "Optional info provided by EV.\r\n\r\n",
                "type": "string",
                "maxLength": 200
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "controlType",
            "timestamp"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:NotifyDERAlarmResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        }
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:NotifyDERStartStopRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "controlId": {
                "description": "Id of the started or stopped DER control.\r\nCorresponds to the _controlId_ of the SetDERControlRequest.\r\n\r\n",
                "type": "string",
                "maxLength": 36
            },
            "started": {
                "description": "True if DER control has started. False if it has ended.\r\n\r\n",
                "type": "boolean"
            },
            "timestamp": {
                "description": "Time of start or end of event.\r\n\r\n",
                "type": "string",
                "format": "date-time"
            },
            "supersededIds": {
                "description": "List of controlIds that are superseded as a result of this control starting.\r\n\r\n",
                "type": "array",
                "additionalItems": false,
                "items": {
                    "type": "string",
                    "maxLength": 36
                },
                "minItems": 1,
                "maxItems": 24
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "controlId",
            "started",
            "timestamp"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:NotifyDERStartStopResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        }
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:NotifyDisplayMessagesRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "MessageFormatEnumType": {
                "description": "Format of the message.\r\n",
                "javaType": "MessageFormatEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "ASCII",
                    "HTML",
                    "URI",
                    "UTF8",
                    "QRCODE"
                ]
            },
            "MessagePriorityEnumType": {
                "description": "With what priority should this message be shown\r\n",
                "javaType": "MessagePriorityEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "AlwaysFront",
                    "InFront",
                    "NormalCycle"
                ]
            },
            "MessageStateEnumType": {
                "description": "During what state should this message be shown. When omitted this message should be shown in any state of the Charging Station.\r\n",
                "javaType": "MessageStateEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Charging",
                    "Faulted",
                    "Idle",
                    "Unavailable",
                    "Suspended",
                    "Discharging"
                ]
            },
            "ComponentType": {
                "description": "A physical or logical component\r\n",
                "javaType": "Component",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "evse": {
                        "$ref": "#/definitions/EVSEType"
                    },
                    "name": {
                        "description": "Name of the component. Name should be taken from the list of standardized component names whenever possible. Case Insensitive. strongly advised to use Camel Case.\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "instance": {
                        "description": "Name of instance in case the component exists as multiple instances. Case Insensitive. strongly advised to use Camel Case.\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "name"
                ]
            },
            "EVSEType": {
                "description": "Electric Vehicle Supply Equipment\r\n",
                "javaType": "EVSE",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "id": {
                        "description": "EVSE Identifier. This contains a number (&gt; 0) designating an EVSE of the Charging Station.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "connectorId": {
                        "description": "An id to designate a specific connector (on an EVSE) by connector index number.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "id"
                ]
            },
            "MessageContentType": {
                "description": "Contains message details, for a message to be displayed on a Charging Station.\r\n\r\n",
                "javaType": "MessageContent",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "format": {
                        "$ref": "#/definitions/MessageFormatEnumType"
                    },
                    "language": {
                        "description": "Message language identifier. Contains a language code as defined in &lt;&lt;ref-RFC5646,[RFC5646]&gt;&gt;.\r\n",
                        "type": "string",
                        "maxLength": 8
                    },
                    "content": {
                        "description": "*(2.1)* Required. Message contents. +\r\nMaximum length supported by Charging Station is given in OCPPCommCtrlr.FieldLength[\"MessageContentType.content\"].\r\n    Maximum length defaults to 1024.\r\n\r\n",
                        "type": "string",
                        "maxLength": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "format",
                    "content"
                ]
            },
            "MessageInfoType": {
                "description": "Contains message details, for a message to be displayed on a Charging Station.\r\n",
                "javaType": "MessageInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "display": {
                        "$ref": "#/definitions/ComponentType"
                    },
                    "id": {
                        "description": "Unique id within an exchange context. It is defined within the OCPP context as a positive Integer value (greater or equal to zero).\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "priority": {
                        "$ref": "#/definitions/MessagePriorityEnumType"
                    },
                    "state": {
                        "$ref": "#/definitions/MessageStateEnumType"
                    },
                    "startDateTime": {
                        "description": "From what date-time should this message be shown. If omitted: directly.\r\n",
                        "type": "string",
                        "format": "date-time"
                    },
                    "endDateTime": {
                        "description": "Until what date-time should this message be shown, after this date/time this message SHALL be removed.\r\n",
                        "type": "string",
                        "format": "date-time"
                    },
                    "transactionId": {
                        "description": "During which transaction shall this message be shown.\r\nMessage SHALL be removed by the Charging Station after transaction has\r\nended.\r\n",
                        "type": "string",
                        "maxLength": 36
                    },
                    "message": {
                        "$ref": "#/definitions/MessageContentType"
                    },
                    "messageExtra": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/MessageContentType"
                        },
                        "minItems": 1,
                        "maxItems": 4
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "id",
                    "priority",
                    "message"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "messageInfo": {
                "type": "array",
                "additionalItems": false,
                "items": {
                    "$ref": "#/definitions/MessageInfoType"
                },
                "minItems": 1
            },
            "requestId": {
                "description": "The id of the &lt;&lt;getdisplaymessagesrequest,GetDisplayMessagesRequest&gt;&gt; that requested this message.\r\n",
                "type": "integer"
            },
            "tbc": {
                "description": "\"to be continued\" indicator. Indicates whether another part of the report follows in an upcoming NotifyDisplayMessagesRequest message. Default value when omitted is false.\r\n",
                "type": "boolean",
                "default": false
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "requestId"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:NotifyDisplayMessagesResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        }
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:NotifyEVChargingNeedsRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "ControlModeEnumType": {
                "description": "*(2.1)* Indicates whether EV wants to operate in Dynamic or Scheduled mode. When absent, Scheduled mode is assumed for backwards compatibility. +\r\n*ISO 15118-20:* +\r\nServiceSelectionReq(SelectedEnergyTransferService)\r\n",
                "javaType": "ControlModeEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "ScheduledControl",
                    "DynamicControl"
                ]
            },
            "DERControlEnumType": {
                "javaType": "DERControlEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "EnterService",
                    "FreqDroop",
                    "FreqWatt",
                    "FixedPFAbsorb",
                    "FixedPFInject",
                    "FixedVar",
                    "Gradients",
                    "HFMustTrip",
                    "HFMayTrip",
                    "HVMustTrip",
                    "HVMomCess",
                    "HVMayTrip",
                    "LimitMaxDischarge",
                    "LFMustTrip",
                    "LVMustTrip",
                    "LVMomCess",
                    "LVMayTrip",
                    "PowerMonitoringMustTrip",
                    "VoltVar",
                    "VoltWatt",
                    "WattPF",
                    "WattVar"
                ]
            },
            "EnergyTransferModeEnumType": {
                "description": "Mode of energy transfer requested by the EV.\r\n",
                "javaType": "EnergyTransferModeEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "AC_single_phase",
                    "AC_two_phase",
                    "AC_three_phase",
                    "DC",
                    "AC_BPT",
                    "AC_BPT_DER",
                    "AC_DER",
                    "DC_BPT",
                    "DC_ACDP",
                    "DC_ACDP_BPT",
                    "WPT"
                ]
            },
            "IslandingDetectionEnumType": {
                "javaType": "IslandingDetectionEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "NoAntiIslandingSupport",
                    "RoCoF",
                    "UVP_OVP",
                    "UFP_OFP",
                    "VoltageVectorShift",
                    "ZeroCrossingDetection",
                    "OtherPassive",
                    "ImpedanceMeasurement",
                    "ImpedanceAtFrequency",
                    "SlipModeFrequencyShift",
                    "SandiaFrequencyShift",
                    "SandiaVoltageShift",
                    "FrequencyJump",
                    "RCLQFactor",
                    "OtherActive"
                ]
            },
            "MobilityNeedsModeEnumType": {
                "description": "*(2.1)* Value of EVCC indicates that EV determines min/target SOC and departure time. +\r\nA value of EVCC_SECC indicates that charging station or CSMS may also update min/target SOC and departure time. +\r\n*ISO 15118-20:* +\r\nServiceSelectionReq(SelectedEnergyTransferService)\r\n",
                "javaType": "MobilityNeedsModeEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "EVCC",
                    "EVCC_SECC"
                ]
            },
            "ACChargingParametersType": {
                "description": "EV AC charging parameters for ISO 15118-2\r\n\r\n",
                "javaType": "ACChargingParameters",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "energyAmount": {
                        "description": "Amount of energy requested (in Wh). This includes energy required for preconditioning.\r\nRelates to: +\r\n*ISO 15118-2*: AC_EVChargeParameterType: EAmount +\r\n*ISO 15118-20*: Dynamic/Scheduled_SEReqControlModeType: EVTargetEnergyRequest\r\n\r\n",
                        "type": "number"
                    },
                    "evMinCurrent": {
                        "description": "Minimum current (amps) supported by the electric vehicle (per phase).\r\nRelates to: +\r\n*ISO 15118-2*: AC_EVChargeParameterType: EVMinCurrent\r\n\r\n",
                        "type": "number"
                    },
                    "evMaxCurrent": {
                        "description": "Maximum current (amps) supported by the electric vehicle (per phase). Includes cable capacity.\r\nRelates to: +\r\n*ISO 15118-2*: AC_EVChargeParameterType: EVMaxCurrent\r\n\r\n",
                        "type": "number"
                    },
                    "evMaxVoltage": {
                        "description": "Maximum voltage supported by the electric vehicle.\r\nRelates to: +\r\n*ISO 15118-2*: AC_EVChargeParameterType: EVMaxVoltage\r\n\r\n",
                        "type": "number"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "energyAmount",
                    "evMinCurrent",
                    "evMaxCurrent",
                    "evMaxVoltage"
                ]
            },
            "ChargingNeedsType": {
                "javaType": "ChargingNeeds",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "acChargingParameters": {
                        "$ref": "#/definitions/ACChargingParametersType"
                    },
                    "derChargingParameters": {
                        "$ref": "#/definitions/DERChargingParametersType"
                    },
                    "evEnergyOffer": {
                        "$ref": "#/definitions/EVEnergyOfferType"
                    },
                    "requestedEnergyTransfer": {
                        "$ref": "#/definitions/EnergyTransferModeEnumType"
                    },
                    "dcChargingParameters": {
                        "$ref": "#/definitions/DCChargingParametersType"
                    },
                    "v2xChargingParameters": {
                        "$ref": "#/definitions/V2XChargingParametersType"
                    },
                    "availableEnergyTransfer": {
                        "description": "*(2.1)* Modes of energy transfer that are marked as available by EV.\r\n",
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/EnergyTransferModeEnumType"
                        },
                        "minItems": 1
                    },
                    "controlMode": {
                        "$ref": "#/definitions/ControlModeEnumType"
                    },
                    "mobilityNeedsMode": {
                        "$ref": "#/definitions/MobilityNeedsModeEnumType"
                    },
                    "departureTime": {
                        "description": "Estimated departure time of the EV. +\r\n*ISO 15118-2:* AC/DC_EVChargeParameterType: DepartureTime +\r\n*ISO 15118-20:* Dynamic/Scheduled_SEReqControlModeType: DepartureTIme\r\n",
                        "type": "string",
                        "format": "date-time"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "requestedEnergyTransfer"
                ]
            },
            "DCChargingParametersType": {
                "description": "EV DC charging parameters for ISO 15118-2\r\n",
                "javaType": "DCChargingParameters",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "evMaxCurrent": {
                        "description": "Maximum current (in A) supported by the electric vehicle. Includes cable capacity.\r\nRelates to: +\r\n*ISO 15118-2*: DC_EVChargeParameterType:EVMaximumCurrentLimit\r\n",
                        "type": "number"
                    },
                    "evMaxVoltage": {
                        "description": "Maximum voltage supported by the electric vehicle.\r\nRelates to: +\r\n*ISO 15118-2*: DC_EVChargeParameterType: EVMaximumVoltageLimit\r\n\r\n",
                        "type": "number"
                    },
                    "evMaxPower": {
                        "description": "Maximum power (in W) supported by the electric vehicle. Required for DC charging.\r\nRelates to: +\r\n*ISO 15118-2*: DC_EVChargeParameterType: EVMaximumPowerLimit\r\n\r\n",
                        "type": "number"
                    },
                    "evEnergyCapacity": {
                        "description": "Capacity of the electric vehicle battery (in Wh).\r\nRelates to: +\r\n*ISO 15118-2*: DC_EVChargeParameterType: EVEnergyCapacity\r\n\r\n",
                        "type": "number"
                    },
                    "energyAmount": {
                        "description": "Amount of energy requested (in Wh). This inludes energy required for preconditioning.\r\nRelates to: +\r\n*ISO 15118-2*: DC_EVChargeParameterType: EVEnergyRequest\r\n\r\n\r\n",
                        "type": "number"
                    },
                    "stateOfCharge": {
                        "description": "Energy available in the battery (in percent of the battery capacity)\r\nRelates to: +\r\n*ISO 15118-2*: DC_EVChargeParameterType: DC_EVStatus: EVRESSSOC\r\n\r\n",
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 100
                    },
                    "fullSoC": {
                        "description": "Percentage of SoC at which the EV considers the battery fully charged. (possible values: 0 - 100)\r\nRelates to: +\r\n*ISO 15118-2*: DC_EVChargeParameterType: FullSOC\r\n\r\n",
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 100
                    },
                    "bulkSoC": {
                        "description": "Percentage of SoC at which the EV considers a fast charging process to end. (possible values: 0 - 100)\r\nRelates to: +\r\n*ISO 15118-2*: DC_EVChargeParameterType: BulkSOC\r\n\r\n",
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 100
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "evMaxCurrent",
                    "evMaxVoltage"
                ]
            },
            "DERChargingParametersType": {
                "description": "*(2.1)* DERChargingParametersType is used in ChargingNeedsType during an ISO 15118-20 session for AC_BPT_DER to report the inverter settings related to DER control that were agreed between EVSE and EV.\r\n\r\nFields starting with \"ev\" contain values from the EV.\r\nOther fields contain a value that is supported by both EV and EVSE.\r\n\r\nDERChargingParametersType type is only relevant in case of an ISO 15118-20 AC_BPT_DER/AC_DER charging session.\r\n\r\nNOTE: All these fields have values greater or equal to zero (i.e. are non-negative)\r\n\r\n",
                "javaType": "DERChargingParameters",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "evSupportedDERControl": {
                        "description": "DER control functions supported by EV. +\r\n    *ISO 15118-20*: DER_BPT_AC_CPDReqEnergyTransferModeType:DERControlFunctions (bitmap)\r\n",
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/DERControlEnumType"
                        },
                        "minItems": 1
                    },
                    "evOverExcitedMaxDischargePower": {
                        "description": "Rated maximum injected active power by EV, at specified over-excited power factor (overExcitedPowerFactor). +\r\nIt can also be defined as the rated maximum discharge power at the rated minimum injected reactive power value. This means that if the EV is providing reactive power support, and it is requested to discharge at max power (e.g. to satisfy an EMS request), the EV may override the request and discharge up to overExcitedMaximumDischargePower to meet the minimum reactive power requirements. +\r\nCorresponds to the WOvPF attribute in IEC 61850. +\r\n    *ISO 15118-20*: DER_BPT_AC_CPDReqEnergyTransferModeType: EVOverExcitedMaximumDischargePower\r\n",
                        "type": "number"
                    },
                    "evOverExcitedPowerFactor": {
                        "description": "EV power factor when injecting (over excited) the minimum reactive power. +\r\nCorresponds to the OvPF attribute in IEC 61850. +\r\n    *ISO 15118-20*: DER_BPT_AC_CPDReqEnergyTransferModeType: EVOverExcitedPowerFactor\r\n",
                        "type": "number"
                    },
                    "evUnderExcitedMaxDischargePower": {
                        "description": "Rated maximum injected active power by EV supported at specified under-excited power factor (EVUnderExcitedPowerFactor). +\r\nIt can also be defined as the rated maximum dischargePower at the rated minimum absorbed reactive power value.\r\nThis means that if the EV is providing reactive power support, and it is requested to discharge at max power (e.g. to satisfy an EMS request), the EV may override the request and discharge up to underExcitedMaximumDischargePower to meet the minimum reactive power requirements. +\r\nThis corresponds to the WUnPF attribute in the IEC 61850. +\r\n    *ISO 15118-20*: DER_BPT_AC_CPDReqEnergyTransferModeType: EVUnderExcitedMaximumDischargePower\r\n",
                        "type": "number"
                    },
                    "evUnderExcitedPowerFactor": {
                        "description": "EV power factor when injecting (under excited) the minimum reactive power. +\r\nCorresponds to the OvPF attribute in IEC 61850. +\r\n    *ISO 15118-20*: DER_BPT_AC_CPDReqEnergyTransferModeType: EVUnderExcitedPowerFactor\r\n",
                        "type": "number"
                    },
                    "maxApparentPower": {
                        "description": "Rated maximum total apparent power, defined by min(EV, EVSE) in va.\r\nCorresponds to the VAMaxRtg in IEC 61850. +\r\n    *ISO 15118-20*: DER_BPT_AC_CPDReqEnergyTransferModeType: EVMaximumApparentPower\r\n",
                        "type": "number"
                    },
                    "maxChargeApparentPower": {
                        "description": "Rated maximum absorbed apparent power, defined by min(EV, EVSE) in va. +\r\n    This field represents the sum of all phases, unless values are provided for L2 and L3,\r\n    in which case this field represents phase L1. +\r\n    Corresponds to the ChaVAMaxRtg in IEC 61850. +\r\n    *ISO 15118-20*: DER_BPT_AC_CPDReqEnergyTransferModeType: EVMaximumChargeApparentPower\r\n",
                        "type": "number"
                    },
                    "maxChargeApparentPower_L2": {
                        "description": "Rated maximum absorbed apparent power on phase L2, defined by min(EV, EVSE) in va.\r\nCorresponds to the ChaVAMaxRtg in IEC 61850. +\r\n    *ISO 15118-20*: DER_BPT_AC_CPDReqEnergyTransferModeType: EVMaximumChargeApparentPower_L2\r\n",
                        "type": "number"
                    },
                    "maxChargeApparentPower_L3": {
                        "description": "Rated maximum absorbed apparent power on phase L3, defined by min(EV, EVSE) in va.\r\nCorresponds to the ChaVAMaxRtg in IEC 61850. +\r\n    *ISO 15118-20*: DER_BPT_AC_CPDReqEnergyTransferModeType: EVMaximumChargeApparentPower_L3\r\n",
                        "type": "number"
                    },
                    "maxDischargeApparentPower": {
                        "description": "Rated maximum injected apparent power, defined by min(EV, EVSE) in va. +\r\n    This field represents the sum of all phases, unless values are provided for L2 and L3,\r\n    in which case this field represents phase L1. +\r\n    Corresponds to the DisVAMaxRtg in IEC 61850. +\r\n    *ISO 15118-20*: DER_BPT_AC_CPDReqEnergyTransferModeType: EVMaximumDischargeApparentPower\r\n",
                        "type": "number"
                    },
                    "maxDischargeApparentPower_L2": {
                        "description": "Rated maximum injected apparent power on phase L2, defined by min(EV, EVSE) in va. +\r\n    Corresponds to the DisVAMaxRtg in IEC 61850. +\r\n    *ISO 15118-20*: DER_BPT_AC_CPDReqEnergyTransferModeType: EVMaximumDischargeApparentPower_L2\r\n",
                        "type": "number"
                    },
                    "maxDischargeApparentPower_L3": {
                        "description": "Rated maximum injected apparent power on phase L3, defined by min(EV, EVSE) in va. +\r\n    Corresponds to the DisVAMaxRtg in IEC 61850. +\r\n    *ISO 15118-20*: DER_BPT_AC_CPDReqEnergyTransferModeType: EVMaximumDischargeApparentPower_L3\r\n",
                        "type": "number"
                    },
                    "maxChargeReactivePower": {
                        "description": "Rated maximum absorbed reactive power, defined by min(EV, EVSE), in vars. +\r\n    This field represents the sum of all phases, unless values are provided for L2 and L3,\r\n    in which case this field represents phase L1. +\r\nCorresponds to the AvarMax attribute in the IEC 61850. +\r\n    *ISO 15118-20*: DER_BPT_AC_CPDReqEnergyTransferModeType: EVMaximumChargeReactivePower\r\n",
                        "type": "number"
                    },
                    "maxChargeReactivePower_L2": {
                        "description": "Rated maximum absorbed reactive power, defined by min(EV, EVSE), in vars on phase L2. +\r\nCorresponds to the AvarMax attribute in the IEC 61850. +\r\n    *ISO 15118-20*: DER_BPT_AC_CPDReqEnergyTransferModeType: EVMaximumChargeReactivePower_L2\r\n",
                        "type": "number"
                    },
                    "maxChargeReactivePower_L3": {
                        "description": "Rated maximum absorbed reactive power, defined by min(EV, EVSE), in vars on phase L3. +\r\nCorresponds to the AvarMax attribute in the IEC 61850. +\r\n    *ISO 15118-20*: DER_BPT_AC_CPDReqEnergyTransferModeType: EVMaximumChargeReactivePower_L3\r\n",
                        "type": "number"
                    },
                    "minChargeReactivePower": {
                        "description": "Rated minimum absorbed reactive power, defined by max(EV, EVSE), in vars. +\r\n    This field represents the sum of all phases, unless values are provided for L2 and L3,\r\n    in which case this field represents phase L1. +\r\n    *ISO 15118-20*: DER_BPT_AC_CPDReqEnergyTransferModeType: EVMinimumChargeReactivePower\r\n",
                        "type": "number"
                    },
                    "minChargeReactivePower_L2": {
                        "description": "Rated minimum absorbed reactive power, defined by max(EV, EVSE), in vars on phase L2. +\r\n    *ISO 15118-20*: DER_BPT_AC_CPDReqEnergyTransferModeType: EVMinimumChargeReactivePower_L2\r\n",
                        "type": "number"
                    },
                    "minChargeReactivePower_L3": {
                        "description": "Rated minimum absorbed reactive power, defined by max(EV, EVSE), in vars on phase L3. +\r\n    *ISO 15118-20*: DER_BPT_AC_CPDReqEnergyTransferModeType: EVMinimumChargeReactivePower_L3\r\n",
                        "type": "number"
                    },
                    "maxDischargeReactivePower": {
                        "description": "Rated maximum injected reactive power, defined by min(EV, EVSE), in vars. +\r\n    This field represents the sum of all phases, unless values are provided for L2 and L3,\r\n    in which case this field represents phase L1. +\r\nCorresponds to the IvarMax attribute in the IEC 61850. +\r\n    *ISO 15118-20*: DER_BPT_AC_CPDReqEnergyTransferModeType: EVMaximumDischargeReactivePower\r\n",
                        "type": "number"
                    },
                    "maxDischargeReactivePower_L2": {
                        "description": "Rated maximum injected reactive power, defined by min(EV, EVSE), in vars on phase L2. +\r\nCorresponds to the IvarMax attribute in the IEC 61850. +\r\n    *ISO 15118-20*: DER_BPT_AC_CPDReqEnergyTransferModeType: EVMaximumDischargeReactivePower_L2\r\n",
                        "type": "number"
                    },
                    "maxDischargeReactivePower_L3": {
                        "description": "Rated maximum injected reactive power, defined by min(EV, EVSE), in vars on phase L3. +\r\nCorresponds to the IvarMax attribute in the IEC 61850. +\r\n    *ISO 15118-20*: DER_BPT_AC_CPDReqEnergyTransferModeType: EVMaximumDischargeReactivePower_L3\r\n",
                        "type": "number"
                    },
                    "minDischargeReactivePower": {
                        "description": "Rated minimum injected reactive power, defined by max(EV, EVSE), in vars. +\r\n    This field represents the sum of all phases, unless values are provided for L2 and L3,\r\n    in which case this field represents phase L1. +\r\n        *ISO 15118-20*: DER_BPT_AC_CPDReqEnergyTransferModeType: EVMinimumDischargeReactivePower\r\n",
                        "type": "number"
                    },
                    "minDischargeReactivePower_L2": {
                        "description": "Rated minimum injected reactive power, defined by max(EV, EVSE), in var on phase L2. +\r\n        *ISO 15118-20*: DER_BPT_AC_CPDReqEnergyTransferModeType: EVMinimumDischargeReactivePower_L2\r\n",
                        "type": "number"
                    },
                    "minDischargeReactivePower_L3": {
                        "description": "Rated minimum injected reactive power, defined by max(EV, EVSE), in var on phase L3. +\r\n        *ISO 15118-20*: DER_BPT_AC_CPDReqEnergyTransferModeType: EVMinimumDischargeReactivePower_L3\r\n",
                        "type": "number"
                    },
                    "nominalVoltage": {
                        "description": "Line voltage supported by EVSE and EV.\r\n        *ISO 15118-20*: DER_BPT_AC_CPDReqEnergyTransferModeType: EVNominalVoltage\r\n",
                        "type": "number"
                    },
                    "nominalVoltageOffset": {
                        "description": "The nominal AC voltage (rms) offset between the Charging Station's electrical connection point and the utility’s point of common coupling. +\r\n        *ISO 15118-20*: DER_BPT_AC_CPDReqEnergyTransferModeType: EVNominalVoltageOffset\r\n",
                        "type": "number"
                    },
                    "maxNominalVoltage": {
                        "description": "Maximum AC rms voltage, as defined by min(EV, EVSE)  to operate with. +\r\n       *ISO 15118-20*: DER_BPT_AC_CPDReqEnergyTransferModeType: EVMaximumNominalVoltage\r\n",
                        "type": "number"
                    },
                    "minNominalVoltage": {
                        "description": "Minimum AC rms voltage, as defined by max(EV, EVSE)  to operate with. +\r\n       *ISO 15118-20*: DER_BPT_AC_CPDReqEnergyTransferModeType: EVMinimumNominalVoltage\r\n",
                        "type": "number"
                    },
                    "evInverterManufacturer": {
                        "description": "Manufacturer of the EV inverter. +\r\n       *ISO 15118-20*: DER_BPT_AC_CPDReqEnergyTransferModeType: EVInverterManufacturer\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "evInverterModel": {
                        "description": "Model name of the EV inverter. +\r\n       *ISO 15118-20*: DER_BPT_AC_CPDReqEnergyTransferModeType: EVInverterModel\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "evInverterSerialNumber": {
                        "description": "Serial number of the EV inverter. +\r\n       *ISO 15118-20*: DER_BPT_AC_CPDReqEnergyTransferModeType: EVInverterSerialNumber\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "evInverterSwVersion": {
                        "description": "Software version of EV inverter. +\r\n       *ISO 15118-20*: DER_BPT_AC_CPDReqEnergyTransferModeType: EVInverterSwVersion\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "evInverterHwVersion": {
                        "description": "Hardware version of EV inverter. +\r\n       *ISO 15118-20*: DER_BPT_AC_CPDReqEnergyTransferModeType: EVInverterHwVersion\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "evIslandingDetectionMethod": {
                        "description": "Type of islanding detection method. Only mandatory when islanding detection is required at the site, as set in the ISO 15118 Service Details configuration. +\r\n       *ISO 15118-20*: DER_BPT_AC_CPDReqEnergyTransferModeType: EVIslandingDetectionMethod\r\n",
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/IslandingDetectionEnumType"
                        },
                        "minItems": 1
                    },
                    "evIslandingTripTime": {
                        "description": "Time after which EV will trip if an island has been detected. +\r\n       *ISO 15118-20*: DER_BPT_AC_CPDReqEnergyTransferModeType: EVIslandingTripTime\r\n",
                        "type": "number"
                    },
                    "evMaximumLevel1DCInjection": {
                        "description": "Maximum injected DC current allowed at level 1 charging. +\r\n       *ISO 15118-20*: DER_BPT_AC_CPDReqEnergyTransferModeType: EVMaximumLevel1DCInjection\r\n",
                        "type": "number"
                    },
                    "evDurationLevel1DCInjection": {
                        "description": "Maximum allowed duration of DC injection at level 1 charging. +\r\n       *ISO 15118-20*: DER_BPT_AC_CPDReqEnergyTransferModeType: EVDurationLevel1DCInjection\r\n",
                        "type": "number"
                    },
                    "evMaximumLevel2DCInjection": {
                        "description": "Maximum injected DC current allowed at level 2 charging. +\r\n       *ISO 15118-20*: DER_BPT_AC_CPDReqEnergyTransferModeType: EVMaximumLevel2DCInjection\r\n",
                        "type": "number"
                    },
                    "evDurationLevel2DCInjection": {
                        "description": "Maximum allowed duration of DC injection at level 2 charging. +\r\n       *ISO 15118-20*: DER_BPT_AC_CPDReqEnergyTransferModeType: EVDurationLevel2DCInjection\r\n",
                        "type": "number"
                    },
                    "evReactiveSusceptance": {
                        "description": "\tMeasure of the susceptibility of the circuit to reactance, in Siemens (S). +\r\n       *ISO 15118-20*: DER_BPT_AC_CPDReqEnergyTransferModeType: EVReactiveSusceptance\r\n\r\n\r\n",
                        "type": "number"
                    },
                    "evSessionTotalDischargeEnergyAvailable": {
                        "description": "Total energy value, in Wh, that EV is allowed to provide during the entire V2G session. The value is independent of the V2X Cycling area. Once this value reaches the value of 0, the EV may block any attempt to discharge in order to protect the battery health.\r\n       *ISO 15118-20*: DER_BPT_AC_CPDReqEnergyTransferModeType: EVSessionTotalDischargeEnergyAvailable\r\n\r\n\r\n",
                        "type": "number"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                }
            },
            "EVAbsolutePriceScheduleEntryType": {
                "description": "*(2.1)* An entry in price schedule over time for which EV is willing to discharge.\r\n",
                "javaType": "EVAbsolutePriceScheduleEntry",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "duration": {
                        "description": "The amount of seconds of this entry.\r\n",
                        "type": "integer"
                    },
                    "evPriceRule": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/EVPriceRuleType"
                        },
                        "minItems": 1,
                        "maxItems": 8
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "duration",
                    "evPriceRule"
                ]
            },
            "EVAbsolutePriceScheduleType": {
                "description": "*(2.1)* Price schedule of EV energy offer.\r\n",
                "javaType": "EVAbsolutePriceSchedule",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "timeAnchor": {
                        "description": "Starting point in time of the EVEnergyOffer.\r\n",
                        "type": "string",
                        "format": "date-time"
                    },
                    "currency": {
                        "description": "Currency code according to ISO 4217.\r\n",
                        "type": "string",
                        "maxLength": 3
                    },
                    "evAbsolutePriceScheduleEntries": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/EVAbsolutePriceScheduleEntryType"
                        },
                        "minItems": 1,
                        "maxItems": 1024
                    },
                    "priceAlgorithm": {
                        "description": "ISO 15118-20 URN of price algorithm: Power, PeakPower, StackedEnergy.\r\n",
                        "type": "string",
                        "maxLength": 2000
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "timeAnchor",
                    "currency",
                    "priceAlgorithm",
                    "evAbsolutePriceScheduleEntries"
                ]
            },
            "EVEnergyOfferType": {
                "description": "*(2.1)* A schedule of the energy amount over time that EV is willing to discharge. A negative value indicates the willingness to discharge under specific conditions, a positive value indicates that the EV currently is not able to offer energy to discharge. \r\n",
                "javaType": "EVEnergyOffer",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "evAbsolutePriceSchedule": {
                        "$ref": "#/definitions/EVAbsolutePriceScheduleType"
                    },
                    "evPowerSchedule": {
                        "$ref": "#/definitions/EVPowerScheduleType"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "evPowerSchedule"
                ]
            },
            "EVPowerScheduleEntryType": {
                "description": "*(2.1)* An entry in schedule of the energy amount over time that EV is willing to discharge. A negative value indicates the willingness to discharge under specific conditions, a positive value indicates that the EV currently is not able to offer energy to discharge.\r\n",
                "javaType": "EVPowerScheduleEntry",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "duration": {
                        "description": "The duration of this entry.\r\n",
                        "type": "integer"
                    },
                    "power": {
                        "description": "Defines maximum amount of power for the duration of this EVPowerScheduleEntry to be discharged from the EV battery through EVSE power outlet. Negative values are used for discharging.\r\n",
                        "type": "number"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "duration",
                    "power"
                ]
            },
            "EVPowerScheduleType": {
                "description": "*(2.1)* Schedule of EV energy offer.\r\n",
                "javaType": "EVPowerSchedule",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "evPowerScheduleEntries": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/EVPowerScheduleEntryType"
                        },
                        "minItems": 1,
                        "maxItems": 1024
                    },
                    "timeAnchor": {
                        "description": "The time that defines the starting point for the EVEnergyOffer.\r\n",
                        "type": "string",
                        "format": "date-time"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "timeAnchor",
                    "evPowerScheduleEntries"
                ]
            },
            "EVPriceRuleType": {
                "description": "*(2.1)* An entry in price schedule over time for which EV is willing to discharge.\r\n",
                "javaType": "EVPriceRule",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "energyFee": {
                        "description": "Cost per kWh.\r\n",
                        "type": "number"
                    },
                    "powerRangeStart": {
                        "description": "The EnergyFee applies between this value and the value of the PowerRangeStart of the subsequent EVPriceRule. If the power is below this value, the EnergyFee of the previous EVPriceRule applies. Negative values are used for discharging.\r\n",
                        "type": "number"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "energyFee",
                    "powerRangeStart"
                ]
            },
            "V2XChargingParametersType": {
                "description": "Charging parameters for ISO 15118-20, also supporting V2X charging/discharging.+\r\nAll values are greater or equal to zero, with the exception of EVMinEnergyRequest, EVMaxEnergyRequest, EVTargetEnergyRequest, EVMinV2XEnergyRequest and EVMaxV2XEnergyRequest.\r\n",
                "javaType": "V2XChargingParameters",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "minChargePower": {
                        "description": "Minimum charge power in W, defined by max(EV, EVSE).\r\nThis field represents the sum of all phases, unless values are provided for L2 and L3, in which case this field represents phase L1.\r\nRelates to:\r\n*ISO 15118-20*: BPT_AC/DC_CPDReqEnergyTransferModeType: EVMinimumChargePower\r\n",
                        "type": "number"
                    },
                    "minChargePower_L2": {
                        "description": "Minimum charge power on phase L2 in W, defined by max(EV, EVSE).\r\nRelates to:\r\n*ISO 15118-20*: BPT_AC/DC_CPDReqEnergyTransferModeType: EVMinimumChargePower_L2\r\n",
                        "type": "number"
                    },
                    "minChargePower_L3": {
                        "description": "Minimum charge power on phase L3 in W, defined by max(EV, EVSE).\r\nRelates to:\r\n*ISO 15118-20*: BPT_AC/DC_CPDReqEnergyTransferModeType: EVMinimumChargePower_L3\r\n",
                        "type": "number"
                    },
                    "maxChargePower": {
                        "description": "Maximum charge (absorbed) power in W, defined by min(EV, EVSE) at unity power factor. +\r\nThis field represents the sum of all phases, unless values are provided for L2 and L3, in which case this field represents phase L1.\r\nIt corresponds to the ChaWMax attribute in the IEC 61850.\r\nIt is usually equivalent to the rated apparent power of the EV when discharging (ChaVAMax) in IEC 61850. +\r\n\r\nRelates to: \r\n*ISO 15118-20*: BPT_AC/DC_CPDReqEnergyTransferModeType: EVMaximumChargePower\r\n\r\n",
                        "type": "number"
                    },
                    "maxChargePower_L2": {
                        "description": "Maximum charge power on phase L2 in W, defined by min(EV, EVSE)\r\nRelates to: \r\n*ISO 15118-20*: BPT_AC/DC_CPDReqEnergyTransferModeType: EVMaximumChargePower_L2\r\n\r\n\r\n",
                        "type": "number"
                    },
                    "maxChargePower_L3": {
                        "description": "Maximum charge power on phase L3 in W, defined by min(EV, EVSE)\r\nRelates to: \r\n*ISO 15118-20*: BPT_AC/DC_CPDReqEnergyTransferModeType: EVMaximumChargePower_L3\r\n\r\n\r\n",
                        "type": "number"
                    },
                    "minDischargePower": {
                        "description": "Minimum discharge (injected) power in W, defined by max(EV, EVSE) at unity power factor. Value &gt;= 0. +\r\nThis field represents the sum of all phases, unless values are provided for L2 and L3, in which case this field represents phase L1. +\r\nIt corresponds to the WMax attribute in the IEC 61850.\r\nIt is usually equivalent to the rated apparent power of the EV when discharging (VAMax attribute in the IEC 61850).\r\n\r\nRelates to:\r\n*ISO 15118-20*: BPT_AC/DC_CPDReqEnergyTransferModeType: EVMinimumDischargePower\r\n\r\n",
                        "type": "number"
                    },
                    "minDischargePower_L2": {
                        "description": "Minimum discharge power on phase L2 in W, defined by max(EV, EVSE).  Value &gt;= 0.\r\nRelates to:\r\n*ISO 15118-20*: BPT_AC/DC_CPDReqEnergyTransferModeType: EVMinimumDischargePower_L2\r\n\r\n",
                        "type": "number"
                    },
                    "minDischargePower_L3": {
                        "description": "Minimum discharge power on phase L3 in W, defined by max(EV, EVSE).  Value &gt;= 0.\r\nRelates to:\r\n*ISO 15118-20*: BPT_AC/DC_CPDReqEnergyTransferModeType: EVMinimumDischargePower_L3\r\n\r\n",
                        "type": "number"
                    },
                    "maxDischargePower": {
                        "description": "Maximum discharge (injected) power in W, defined by min(EV, EVSE) at unity power factor.  Value &gt;= 0.\r\nThis field represents the sum of all phases, unless values are provided for L2 and L3, in which case this field represents phase L1.\r\nRelates to:\r\n*ISO 15118-20*: BPT_AC/DC_CPDReqEnergyTransferModeType: EVMaximumDischargePower\r\n\r\n\r\n",
                        "type": "number"
                    },
                    "maxDischargePower_L2": {
                        "description": "Maximum discharge power on phase L2 in W, defined by min(EV, EVSE).  Value &gt;= 0.\r\nRelates to:\r\n*ISO 15118-20*: BPT_AC/DC_CPDReqEnergyTransferModeType: EVMaximumDischargePowe_L2\r\n\r\n",
                        "type": "number"
                    },
                    "maxDischargePower_L3": {
                        "description": "Maximum discharge power on phase L3 in W, defined by min(EV, EVSE).  Value &gt;= 0.\r\nRelates to:\r\n*ISO 15118-20*: BPT_AC/DC_CPDReqEnergyTransferModeType: EVMaximumDischargePower_L3\r\n\r\n",
                        "type": "number"
                    },
                    "minChargeCurrent": {
                        "description": "Minimum charge current in A, defined by max(EV, EVSE)\r\nRelates to: \r\n*ISO 15118-20*: BPT_DC_CPDReqEnergyTransferModeType: EVMinimumChargeCurrent\r\n\r\n",
                        "type": "number"
                    },
                    "maxChargeCurrent": {
                        "description": "Maximum charge current in A, defined by min(EV, EVSE)\r\nRelates to: \r\n*ISO 15118-20*: BPT_DC_CPDReqEnergyTransferModeType: EVMaximumChargeCurrent\r\n\r\n\r\n",
                        "type": "number"
                    },
                    "minDischargeCurrent": {
                        "description": "Minimum discharge current in A, defined by max(EV, EVSE).  Value &gt;= 0.\r\nRelates to: \r\n*ISO 15118-20*: BPT_DC_CPDReqEnergyTransferModeType: EVMinimumDischargeCurrent\r\n\r\n\r\n",
                        "type": "number"
                    },
                    "maxDischargeCurrent": {
                        "description": "Maximum discharge current in A, defined by min(EV, EVSE).  Value &gt;= 0.\r\nRelates to: \r\n*ISO 15118-20*: BPT_DC_CPDReqEnergyTransferModeType: EVMaximumDischargeCurrent\r\n\r\n",
                        "type": "number"
                    },
                    "minVoltage": {
                        "description": "Minimum voltage in V, defined by max(EV, EVSE)\r\nRelates to:\r\n*ISO 15118-20*: BPT_DC_CPDReqEnergyTransferModeType: EVMinimumVoltage\r\n\r\n",
                        "type": "number"
                    },
                    "maxVoltage": {
                        "description": "Maximum voltage in V, defined by min(EV, EVSE)\r\nRelates to:\r\n*ISO 15118-20*: BPT_DC_CPDReqEnergyTransferModeType: EVMaximumVoltage\r\n\r\n",
                        "type": "number"
                    },
                    "evTargetEnergyRequest": {
                        "description": "Energy to requested state of charge in Wh\r\nRelates to:\r\n*ISO 15118-20*: Dynamic/Scheduled_SEReqControlModeType: EVTargetEnergyRequest\r\n\r\n",
                        "type": "number"
                    },
                    "evMinEnergyRequest": {
                        "description": "Energy to minimum allowed state of charge in Wh\r\nRelates to:\r\n*ISO 15118-20*: Dynamic/Scheduled_SEReqControlModeType: EVMinimumEnergyRequest\r\n\r\n",
                        "type": "number"
                    },
                    "evMaxEnergyRequest": {
                        "description": "Energy to maximum state of charge in Wh\r\nRelates to:\r\n*ISO 15118-20*: Dynamic/Scheduled_SEReqControlModeType: EVMaximumEnergyRequest\r\n\r\n",
                        "type": "number"
                    },
                    "evMinV2XEnergyRequest": {
                        "description": "Energy (in Wh) to minimum state of charge for cycling (V2X) activity. \r\nPositive value means that current state of charge is below V2X range.\r\nRelates to:\r\n*ISO 15118-20*: Dynamic_SEReqControlModeType: EVMinimumV2XEnergyRequest\r\n\r\n",
                        "type": "number"
                    },
                    "evMaxV2XEnergyRequest": {
                        "description": "Energy (in Wh) to maximum state of charge for cycling (V2X) activity.\r\nNegative value indicates that current state of charge is above V2X range.\r\nRelates to:\r\n*ISO 15118-20*: Dynamic_SEReqControlModeType: EVMaximumV2XEnergyRequest\r\n\r\n\r\n",
                        "type": "number"
                    },
                    "targetSoC": {
                        "description": "Target state of charge at departure as percentage.\r\nRelates to:\r\n*ISO 15118-20*: BPT_DC_CPDReqEnergyTransferModeType: TargetSOC\r\n\r\n",
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 100
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                }
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "evseId": {
                "description": "Defines the EVSE and connector to which the EV is connected. EvseId may not be 0.\r\n",
                "type": "integer",
                "minimum": 1
            },
            "maxScheduleTuples": {
                "description": "Contains the maximum elements the EV supports for: +\r\n- ISO 15118-2: schedule tuples in SASchedule (both Pmax and Tariff). +\r\n- ISO 15118-20: PowerScheduleEntry, PriceRule and PriceLevelScheduleEntries.\r\n",
                "type": "integer",
                "minimum": 0
            },
            "chargingNeeds": {
                "$ref": "#/definitions/ChargingNeedsType"
            },
            "timestamp": {
                "description": "*(2.1)* Time when EV charging needs were received. +\r\nField can be added when charging station was offline when charging needs were received.\r\n\r\n",
                "type": "string",
                "format": "date-time"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "evseId",
            "chargingNeeds"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:NotifyEVChargingNeedsResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "NotifyEVChargingNeedsStatusEnumType": {
                "description": "Returns whether the CSMS has been able to process the message successfully. It does not imply that the evChargingNeeds can be met with the current charging profile.\r\n",
                "javaType": "NotifyEVChargingNeedsStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Accepted",
                    "Rejected",
                    "Processing",
                    "NoChargingProfile"
                ]
            },
            "StatusInfoType": {
                "description": "Element providing more information about the status.\r\n",
                "javaType": "StatusInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "reasonCode": {
                        "description": "A predefined code for the reason why the status is returned in this response. The string is case-insensitive.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "additionalInfo": {
                        "description": "Additional text to provide detailed information.\r\n",
                        "type": "string",
                        "maxLength": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "reasonCode"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "status": {
                "$ref": "#/definitions/NotifyEVChargingNeedsStatusEnumType"
            },
            "statusInfo": {
                "$ref": "#/definitions/StatusInfoType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "status"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:NotifyEVChargingScheduleRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "ChargingRateUnitEnumType": {
                "description": "The unit of measure in which limits and setpoints are expressed.\r\n",
                "javaType": "ChargingRateUnitEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "W",
                    "A"
                ]
            },
            "CostKindEnumType": {
                "description": "The kind of cost referred to in the message element amount\r\n",
                "javaType": "CostKindEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "CarbonDioxideEmission",
                    "RelativePricePercentage",
                    "RenewableGenerationPercentage"
                ]
            },
            "OperationModeEnumType": {
                "description": "*(2.1)* Charging operation mode to use during this time interval. When absent defaults to `ChargingOnly`.\r\n",
                "javaType": "OperationModeEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Idle",
                    "ChargingOnly",
                    "CentralSetpoint",
                    "ExternalSetpoint",
                    "ExternalLimits",
                    "CentralFrequency",
                    "LocalFrequency",
                    "LocalLoadBalancing"
                ]
            },
            "AbsolutePriceScheduleType": {
                "description": "The AbsolutePriceScheduleType is modeled after the same type that is defined in ISO 15118-20, such that if it is supplied by an EMSP as a signed EXI message, the conversion from EXI to JSON (in OCPP) and back to EXI (for ISO 15118-20) does not change the digest and therefore does not invalidate the signature.\r\n\r\nimage::images/AbsolutePriceSchedule-Simple.png[]\r\n\r\n",
                "javaType": "AbsolutePriceSchedule",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "timeAnchor": {
                        "description": "Starting point of price schedule.\r\n",
                        "type": "string",
                        "format": "date-time"
                    },
                    "priceScheduleID": {
                        "description": "Unique ID of price schedule\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "priceScheduleDescription": {
                        "description": "Description of the price schedule.\r\n",
                        "type": "string",
                        "maxLength": 160
                    },
                    "currency": {
                        "description": "Currency according to ISO 4217.\r\n",
                        "type": "string",
                        "maxLength": 3
                    },
                    "language": {
                        "description": "String that indicates what language is used for the human readable strings in the price schedule. Based on ISO 639.\r\n",
                        "type": "string",
                        "maxLength": 8
                    },
                    "priceAlgorithm": {
                        "description": "A string in URN notation which shall uniquely identify an algorithm that defines how to compute an energy fee sum for a specific power profile based on the EnergyFee information from the PriceRule elements.\r\n",
                        "type": "string",
                        "maxLength": 2000
                    },
                    "minimumCost": {
                        "$ref": "#/definitions/RationalNumberType"
                    },
                    "maximumCost": {
                        "$ref": "#/definitions/RationalNumberType"
                    },
                    "priceRuleStacks": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/PriceRuleStackType"
                        },
                        "minItems": 1,
                        "maxItems": 1024
                    },
                    "taxRules": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/TaxRuleType"
                        },
                        "minItems": 1,
                        "maxItems": 10
                    },
                    "overstayRuleList": {
                        "$ref": "#/definitions/OverstayRuleListType"
                    },
                    "additionalSelectedServices": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/AdditionalSelectedServicesType"
                        },
                        "minItems": 1,
                        "maxItems": 5
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "timeAnchor",
                    "priceScheduleID",
                    "currency",
                    "language",
                    "priceAlgorithm",
                    "priceRuleStacks"
                ]
            },
            "AdditionalSelectedServicesType": {
                "description": "Part of ISO 15118-20 price schedule.\r\n\r\n",
                "javaType": "AdditionalSelectedServices",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "serviceFee": {
                        "$ref": "#/definitions/RationalNumberType"
                    },
                    "serviceName": {
                        "description": "Human readable string to identify this service.\r\n",
                        "type": "string",
                        "maxLength": 80
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "serviceName",
                    "serviceFee"
                ]
            },
            "ChargingSchedulePeriodType": {
                "description": "Charging schedule period structure defines a time period in a charging schedule. It is used in: CompositeScheduleType and in ChargingScheduleType. When used in a NotifyEVChargingScheduleRequest only _startPeriod_, _limit_, _limit_L2_, _limit_L3_ are relevant.\r\n",
                "javaType": "ChargingSchedulePeriod",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "startPeriod": {
                        "description": "Start of the period, in seconds from the start of schedule. The value of StartPeriod also defines the stop time of the previous period.\r\n",
                        "type": "integer"
                    },
                    "limit": {
                        "description": "Optional only when not required by the _operationMode_, as in CentralSetpoint, ExternalSetpoint, ExternalLimits, LocalFrequency,  LocalLoadBalancing. +\r\nCharging rate limit during the schedule period, in the applicable _chargingRateUnit_. \r\nThis SHOULD be a non-negative value; a negative value is only supported for backwards compatibility with older systems that use a negative value to specify a discharging limit.\r\nWhen using _chargingRateUnit_ = `W`, this field represents the sum of the power of all phases, unless values are provided for L2 and L3, in which case this field represents phase L1.\r\n",
                        "type": "number"
                    },
                    "limit_L2": {
                        "description": "*(2.1)* Charging rate limit on phase L2  in the applicable _chargingRateUnit_. \r\n",
                        "type": "number"
                    },
                    "limit_L3": {
                        "description": "*(2.1)* Charging rate limit on phase L3  in the applicable _chargingRateUnit_. \r\n",
                        "type": "number"
                    },
                    "numberPhases": {
                        "description": "The number of phases that can be used for charging. +\r\nFor a DC EVSE this field should be omitted. +\r\nFor an AC EVSE a default value of _numberPhases_ = 3 will be assumed if the field is absent.\r\n",
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 3
                    },
                    "phaseToUse": {
                        "description": "Values: 1..3, Used if numberPhases=1 and if the EVSE is capable of switching the phase connected to the EV, i.e. ACPhaseSwitchingSupported is defined and true. It’s not allowed unless both conditions above are true. If both conditions are true, and phaseToUse is omitted, the Charging Station / EVSE will make the selection on its own.\r\n\r\n",
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 3
                    },
                    "dischargeLimit": {
                        "description": "*(2.1)* Limit in _chargingRateUnit_ that the EV is allowed to discharge with. Note, these are negative values in order to be consistent with _setpoint_, which can be positive and negative.  +\r\nFor AC this field represents the sum of all phases, unless values are provided for L2 and L3, in which case this field represents phase L1.\r\n",
                        "type": "number",
                        "maximum": 0
                    },
                    "dischargeLimit_L2": {
                        "description": "*(2.1)* Limit in _chargingRateUnit_ on phase L2 that the EV is allowed to discharge with. \r\n",
                        "type": "number",
                        "maximum": 0
                    },
                    "dischargeLimit_L3": {
                        "description": "*(2.1)* Limit in _chargingRateUnit_ on phase L3 that the EV is allowed to discharge with. \r\n",
                        "type": "number",
                        "maximum": 0
                    },
                    "setpoint": {
                        "description": "*(2.1)* Setpoint in _chargingRateUnit_ that the EV should follow as close as possible. Use negative values for discharging. +\r\nWhen a limit and/or _dischargeLimit_ are given the overshoot when following _setpoint_ must remain within these values.\r\nThis field represents the sum of all phases, unless values are provided for L2 and L3, in which case this field represents phase L1.\r\n",
                        "type": "number"
                    },
                    "setpoint_L2": {
                        "description": "*(2.1)* Setpoint in _chargingRateUnit_ that the EV should follow on phase L2 as close as possible.\r\n",
                        "type": "number"
                    },
                    "setpoint_L3": {
                        "description": "*(2.1)* Setpoint in _chargingRateUnit_ that the EV should follow on phase L3 as close as possible. \r\n",
                        "type": "number"
                    },
                    "setpointReactive": {
                        "description": "*(2.1)* Setpoint for reactive power (or current) in _chargingRateUnit_ that the EV should follow as closely as possible. Positive values for inductive, negative for capacitive reactive power or current.  +\r\nThis field represents the sum of all phases, unless values are provided for L2 and L3, in which case this field represents phase L1.\r\n",
                        "type": "number"
                    },
                    "setpointReactive_L2": {
                        "description": "*(2.1)* Setpoint for reactive power (or current) in _chargingRateUnit_ that the EV should follow on phase L2 as closely as possible. \r\n",
                        "type": "number"
                    },
                    "setpointReactive_L3": {
                        "description": "*(2.1)* Setpoint for reactive power (or current) in _chargingRateUnit_ that the EV should follow on phase L3 as closely as possible. \r\n",
                        "type": "number"
                    },
                    "preconditioningRequest": {
                        "description": "*(2.1)* If  true, the EV should attempt to keep the BMS preconditioned for this time interval.\r\n",
                        "type": "boolean"
                    },
                    "evseSleep": {
                        "description": "*(2.1)* If true, the EVSE must turn off power electronics/modules associated with this transaction. Default value when absent is false.\r\n",
                        "type": "boolean"
                    },
                    "v2xBaseline": {
                        "description": "*(2.1)* Power value that, when present, is used as a baseline on top of which values from _v2xFreqWattCurve_ and _v2xSignalWattCurve_ are added.\r\n\r\n",
                        "type": "number"
                    },
                    "operationMode": {
                        "$ref": "#/definitions/OperationModeEnumType"
                    },
                    "v2xFreqWattCurve": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/V2XFreqWattPointType"
                        },
                        "minItems": 1,
                        "maxItems": 20
                    },
                    "v2xSignalWattCurve": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/V2XSignalWattPointType"
                        },
                        "minItems": 1,
                        "maxItems": 20
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "startPeriod"
                ]
            },
            "ChargingScheduleType": {
                "description": "Charging schedule structure defines a list of charging periods, as used in: NotifyEVChargingScheduleRequest and ChargingProfileType. When used in a NotifyEVChargingScheduleRequest only _duration_ and _chargingSchedulePeriod_ are relevant and _chargingRateUnit_ must be 'W'. +\r\nAn ISO 15118-20 session may provide either an _absolutePriceSchedule_ or a _priceLevelSchedule_. An ISO 15118-2 session can only provide a_salesTariff_ element. The field _digestValue_ is used when price schedule or sales tariff are signed.\r\n\r\nimage::images/ChargingSchedule-Simple.png[]\r\n\r\n\r\n",
                "javaType": "ChargingSchedule",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "limitAtSoC": {
                        "$ref": "#/definitions/LimitAtSoCType"
                    },
                    "startSchedule": {
                        "description": "Starting point of an absolute schedule or recurring schedule.\r\n",
                        "type": "string",
                        "format": "date-time"
                    },
                    "duration": {
                        "description": "Duration of the charging schedule in seconds. If the duration is left empty, the last period will continue indefinitely or until end of the transaction in case startSchedule is absent.\r\n",
                        "type": "integer"
                    },
                    "chargingRateUnit": {
                        "$ref": "#/definitions/ChargingRateUnitEnumType"
                    },
                    "minChargingRate": {
                        "description": "Minimum charging rate supported by the EV. The unit of measure is defined by the chargingRateUnit. This parameter is intended to be used by a local smart charging algorithm to optimize the power allocation for in the case a charging process is inefficient at lower charging rates. \r\n",
                        "type": "number"
                    },
                    "powerTolerance": {
                        "description": "*(2.1)* Power tolerance when following EVPowerProfile.\r\n\r\n",
                        "type": "number"
                    },
                    "signatureId": {
                        "description": "*(2.1)* Id of this element for referencing in a signature.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "digestValue": {
                        "description": "*(2.1)* Base64 encoded hash (SHA256 for ISO 15118-2, SHA512 for ISO 15118-20) of the EXI price schedule element. Used in signature.\r\n",
                        "type": "string",
                        "maxLength": 88
                    },
                    "useLocalTime": {
                        "description": "*(2.1)* Defaults to false. When true, disregard time zone offset in dateTime fields of  _ChargingScheduleType_ and use unqualified local time at Charging Station instead.\r\n This allows the same `Absolute` or `Recurring` charging profile to be used in both summer and winter time.\r\n\r\n",
                        "type": "boolean"
                    },
                    "chargingSchedulePeriod": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/ChargingSchedulePeriodType"
                        },
                        "minItems": 1,
                        "maxItems": 1024
                    },
                    "randomizedDelay": {
                        "description": "*(2.1)* Defaults to 0. When _randomizedDelay_ not equals zero, then the start of each &lt;&lt;cmn_chargingscheduleperiodtype,ChargingSchedulePeriodType&gt;&gt; is delayed by a randomly chosen number of seconds between 0 and _randomizedDelay_.  Only allowed for TxProfile and TxDefaultProfile.\r\n\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "salesTariff": {
                        "$ref": "#/definitions/SalesTariffType"
                    },
                    "absolutePriceSchedule": {
                        "$ref": "#/definitions/AbsolutePriceScheduleType"
                    },
                    "priceLevelSchedule": {
                        "$ref": "#/definitions/PriceLevelScheduleType"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "id",
                    "chargingRateUnit",
                    "chargingSchedulePeriod"
                ]
            },
            "ConsumptionCostType": {
                "javaType": "ConsumptionCost",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "startValue": {
                        "description": "The lowest level of consumption that defines the starting point of this consumption block. The block interval extends to the start of the next interval.\r\n",
                        "type": "number"
                    },
                    "cost": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/CostType"
                        },
                        "minItems": 1,
                        "maxItems": 3
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "startValue",
                    "cost"
                ]
            },
            "CostType": {
                "javaType": "Cost",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "costKind": {
                        "$ref": "#/definitions/CostKindEnumType"
                    },
                    "amount": {
                        "description": "The estimated or actual cost per kWh\r\n",
                        "type": "integer"
                    },
                    "amountMultiplier": {
                        "description": "Values: -3..3, The amountMultiplier defines the exponent to base 10 (dec). The final value is determined by: amount * 10 ^ amountMultiplier\r\n",
                        "type": "integer"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "costKind",
                    "amount"
                ]
            },
            "LimitAtSoCType": {
                "javaType": "LimitAtSoC",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "soc": {
                        "description": "The SoC value beyond which the charging rate limit should be applied.\r\n",
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 100
                    },
                    "limit": {
                        "description": "Charging rate limit beyond the SoC value.\r\nThe unit is defined by _chargingSchedule.chargingRateUnit_.\r\n\r\n",
                        "type": "number"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "soc",
                    "limit"
                ]
            },
            "OverstayRuleListType": {
                "description": "Part of ISO 15118-20 price schedule.\r\n\r\n",
                "javaType": "OverstayRuleList",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "overstayPowerThreshold": {
                        "$ref": "#/definitions/RationalNumberType"
                    },
                    "overstayRule": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/OverstayRuleType"
                        },
                        "minItems": 1,
                        "maxItems": 5
                    },
                    "overstayTimeThreshold": {
                        "description": "Time till overstay is applied in seconds.\r\n",
                        "type": "integer"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "overstayRule"
                ]
            },
            "OverstayRuleType": {
                "description": "Part of ISO 15118-20 price schedule.\r\n\r\n",
                "javaType": "OverstayRule",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "overstayFee": {
                        "$ref": "#/definitions/RationalNumberType"
                    },
                    "overstayRuleDescription": {
                        "description": "Human readable string to identify the overstay rule.\r\n",
                        "type": "string",
                        "maxLength": 32
                    },
                    "startTime": {
                        "description": "Time in seconds after trigger of the parent Overstay Rules for this particular fee to apply.\r\n",
                        "type": "integer"
                    },
                    "overstayFeePeriod": {
                        "description": "Time till overstay will be reapplied\r\n",
                        "type": "integer"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "startTime",
                    "overstayFeePeriod",
                    "overstayFee"
                ]
            },
            "PriceLevelScheduleEntryType": {
                "description": "Part of ISO 15118-20 price schedule.\r\n",
                "javaType": "PriceLevelScheduleEntry",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "duration": {
                        "description": "The amount of seconds that define the duration of this given PriceLevelScheduleEntry.\r\n",
                        "type": "integer"
                    },
                    "priceLevel": {
                        "description": "Defines the price level of this PriceLevelScheduleEntry (referring to NumberOfPriceLevels). Small values for the PriceLevel represent a cheaper PriceLevelScheduleEntry. Large values for the PriceLevel represent a more expensive PriceLevelScheduleEntry.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "duration",
                    "priceLevel"
                ]
            },
            "PriceLevelScheduleType": {
                "description": "The PriceLevelScheduleType is modeled after the same type that is defined in ISO 15118-20, such that if it is supplied by an EMSP as a signed EXI message, the conversion from EXI to JSON (in OCPP) and back to EXI (for ISO 15118-20) does not change the digest and therefore does not invalidate the signature.\r\n",
                "javaType": "PriceLevelSchedule",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "priceLevelScheduleEntries": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/PriceLevelScheduleEntryType"
                        },
                        "minItems": 1,
                        "maxItems": 100
                    },
                    "timeAnchor": {
                        "description": "Starting point of this price schedule.\r\n",
                        "type": "string",
                        "format": "date-time"
                    },
                    "priceScheduleId": {
                        "description": "Unique ID of this price schedule.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "priceScheduleDescription": {
                        "description": "Description of the price schedule.\r\n",
                        "type": "string",
                        "maxLength": 32
                    },
                    "numberOfPriceLevels": {
                        "description": "Defines the overall number of distinct price level elements used across all PriceLevelSchedules.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "timeAnchor",
                    "priceScheduleId",
                    "numberOfPriceLevels",
                    "priceLevelScheduleEntries"
                ]
            },
            "PriceRuleStackType": {
                "description": "Part of ISO 15118-20 price schedule.\r\n",
                "javaType": "PriceRuleStack",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "duration": {
                        "description": "Duration of the stack of price rules.  he amount of seconds that define the duration of the given PriceRule(s).\r\n",
                        "type": "integer"
                    },
                    "priceRule": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/PriceRuleType"
                        },
                        "minItems": 1,
                        "maxItems": 8
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "duration",
                    "priceRule"
                ]
            },
            "PriceRuleType": {
                "description": "Part of ISO 15118-20 price schedule.\r\n\r\n",
                "javaType": "PriceRule",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "parkingFeePeriod": {
                        "description": "The duration of the parking fee period (in seconds).\r\nWhen the time enters into a ParkingFeePeriod, the ParkingFee will apply to the session. .\r\n",
                        "type": "integer"
                    },
                    "carbonDioxideEmission": {
                        "description": "Number of grams of CO2 per kWh.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "renewableGenerationPercentage": {
                        "description": "Percentage of the power that is created by renewable resources.\r\n",
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 100
                    },
                    "energyFee": {
                        "$ref": "#/definitions/RationalNumberType"
                    },
                    "parkingFee": {
                        "$ref": "#/definitions/RationalNumberType"
                    },
                    "powerRangeStart": {
                        "$ref": "#/definitions/RationalNumberType"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "energyFee",
                    "powerRangeStart"
                ]
            },
            "RationalNumberType": {
                "description": "Part of ISO 15118-20 price schedule.\r\n\r\n",
                "javaType": "RationalNumber",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "exponent": {
                        "description": "The exponent to base 10 (dec)\r\n",
                        "type": "integer"
                    },
                    "value": {
                        "description": "Value which shall be multiplied.\r\n",
                        "type": "integer"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "exponent",
                    "value"
                ]
            },
            "RelativeTimeIntervalType": {
                "javaType": "RelativeTimeInterval",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "start": {
                        "description": "Start of the interval, in seconds from NOW.\r\n",
                        "type": "integer"
                    },
                    "duration": {
                        "description": "Duration of the interval, in seconds.\r\n",
                        "type": "integer"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "start"
                ]
            },
            "SalesTariffEntryType": {
                "javaType": "SalesTariffEntry",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "relativeTimeInterval": {
                        "$ref": "#/definitions/RelativeTimeIntervalType"
                    },
                    "ePriceLevel": {
                        "description": "Defines the price level of this SalesTariffEntry (referring to NumEPriceLevels). Small values for the EPriceLevel represent a cheaper TariffEntry. Large values for the EPriceLevel represent a more expensive TariffEntry.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "consumptionCost": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/ConsumptionCostType"
                        },
                        "minItems": 1,
                        "maxItems": 3
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "relativeTimeInterval"
                ]
            },
            "SalesTariffType": {
                "description": "A SalesTariff provided by a Mobility Operator (EMSP) .\r\nNOTE: This dataType is based on dataTypes from &lt;&lt;ref-ISOIEC15118-2,ISO 15118-2&gt;&gt;.\r\n",
                "javaType": "SalesTariff",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "id": {
                        "description": "SalesTariff identifier used to identify one sales tariff. An SAID remains a unique identifier for one schedule throughout a charging session.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "salesTariffDescription": {
                        "description": "A human readable title/short description of the sales tariff e.g. for HMI display purposes.\r\n",
                        "type": "string",
                        "maxLength": 32
                    },
                    "numEPriceLevels": {
                        "description": "Defines the overall number of distinct price levels used across all provided SalesTariff elements.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "salesTariffEntry": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/SalesTariffEntryType"
                        },
                        "minItems": 1,
                        "maxItems": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "id",
                    "salesTariffEntry"
                ]
            },
            "TaxRuleType": {
                "description": "Part of ISO 15118-20 price schedule.\r\n\r\n",
                "javaType": "TaxRule",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "taxRuleID": {
                        "description": "Id for the tax rule.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "taxRuleName": {
                        "description": "Human readable string to identify the tax rule.\r\n",
                        "type": "string",
                        "maxLength": 100
                    },
                    "taxIncludedInPrice": {
                        "description": "Indicates whether the tax is included in any price or not.\r\n",
                        "type": "boolean"
                    },
                    "appliesToEnergyFee": {
                        "description": "Indicates whether this tax applies to Energy Fees.\r\n",
                        "type": "boolean"
                    },
                    "appliesToParkingFee": {
                        "description": "Indicates whether this tax applies to Parking Fees.\r\n\r\n",
                        "type": "boolean"
                    },
                    "appliesToOverstayFee": {
                        "description": "Indicates whether this tax applies to Overstay Fees.\r\n\r\n",
                        "type": "boolean"
                    },
                    "appliesToMinimumMaximumCost": {
                        "description": "Indicates whether this tax applies to Minimum/Maximum Cost.\r\n\r\n",
                        "type": "boolean"
                    },
                    "taxRate": {
                        "$ref": "#/definitions/RationalNumberType"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "taxRuleID",
                    "appliesToEnergyFee",
                    "appliesToParkingFee",
                    "appliesToOverstayFee",
                    "appliesToMinimumMaximumCost",
                    "taxRate"
                ]
            },
            "V2XFreqWattPointType": {
                "description": "*(2.1)* A point of a frequency-watt curve.\r\n",
                "javaType": "V2XFreqWattPoint",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "frequency": {
                        "description": "Net frequency in Hz.\r\n",
                        "type": "number"
                    },
                    "power": {
                        "description": "Power in W to charge (positive) or discharge (negative) at specified frequency.\r\n",
                        "type": "number"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "frequency",
                    "power"
                ]
            },
            "V2XSignalWattPointType": {
                "description": "*(2.1)* A point of a signal-watt curve.\r\n",
                "javaType": "V2XSignalWattPoint",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "signal": {
                        "description": "Signal value from an AFRRSignalRequest.\r\n",
                        "type": "integer"
                    },
                    "power": {
                        "description": "Power in W to charge (positive) or discharge (negative) at specified frequency.\r\n",
                        "type": "number"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "signal",
                    "power"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "timeBase": {
                "description": "Periods contained in the charging profile are relative to this point in time.\r\n",
                "type": "string",
                "format": "date-time"
            },
            "chargingSchedule": {
                "$ref": "#/definitions/ChargingScheduleType"
            },
            "evseId": {
                "description": "The charging schedule contained in this notification applies to an EVSE. EvseId must be &gt; 0.\r\n",
                "type": "integer",
                "minimum": 1
            },
            "selectedChargingScheduleId": {
                "description": "*(2.1)* Id  of the _chargingSchedule_ that EV selected from the provided ChargingProfile.\r\n",
                "type": "integer",
                "minimum": 0
            },
            "powerToleranceAcceptance": {
                "description": "*(2.1)* True when power tolerance is accepted by EV.\r\nThis value is taken from EVPowerProfile.PowerToleranceAcceptance in the ISO 15118-20 PowerDeliverReq message..\r\n",
                "type": "boolean"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "timeBase",
            "evseId",
            "chargingSchedule"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:NotifyEVChargingScheduleResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "GenericStatusEnumType": {
                "description": "Returns whether the CSMS has been able to process the message successfully. It does not imply any approval of the charging schedule.\r\n",
                "javaType": "GenericStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Accepted",
                    "Rejected"
                ]
            },
            "StatusInfoType": {
                "description": "Element providing more information about the status.\r\n",
                "javaType": "StatusInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "reasonCode": {
                        "description": "A predefined code for the reason why the status is returned in this response. The string is case-insensitive.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "additionalInfo": {
                        "description": "Additional text to provide detailed information.\r\n",
                        "type": "string",
                        "maxLength": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "reasonCode"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "status": {
                "$ref": "#/definitions/GenericStatusEnumType"
            },
            "statusInfo": {
                "$ref": "#/definitions/StatusInfoType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "status"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:NotifyEventRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "EventNotificationEnumType": {
                "description": "Specifies the event notification type of the message.\r\n\r\n",
                "javaType": "EventNotificationEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "HardWiredNotification",
                    "HardWiredMonitor",
                    "PreconfiguredMonitor",
                    "CustomMonitor"
                ]
            },
            "EventTriggerEnumType": {
                "description": "Type of trigger for this event, e.g. exceeding a threshold value.\r\n\r\n",
                "javaType": "EventTriggerEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Alerting",
                    "Delta",
                    "Periodic"
                ]
            },
            "ComponentType": {
                "description": "A physical or logical component\r\n",
                "javaType": "Component",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "evse": {
                        "$ref": "#/definitions/EVSEType"
                    },
                    "name": {
                        "description": "Name of the component. Name should be taken from the list of standardized component names whenever possible. Case Insensitive. strongly advised to use Camel Case.\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "instance": {
                        "description": "Name of instance in case the component exists as multiple instances. Case Insensitive. strongly advised to use Camel Case.\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "name"
                ]
            },
            "EventDataType": {
                "description": "Class to report an event notification for a component-variable.\r\n",
                "javaType": "EventData",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "eventId": {
                        "description": "Identifies the event. This field can be referred to as a cause by other events.\r\n\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "timestamp": {
                        "description": "Timestamp of the moment the report was generated.\r\n",
                        "type": "string",
                        "format": "date-time"
                    },
                    "trigger": {
                        "$ref": "#/definitions/EventTriggerEnumType"
                    },
                    "cause": {
                        "description": "Refers to the Id of an event that is considered to be the cause for this event.\r\n\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "actualValue": {
                        "description": "Actual value (_attributeType_ Actual) of the variable.\r\n\r\nThe Configuration Variable &lt;&lt;configkey-reporting-value-size,ReportingValueSize&gt;&gt; can be used to limit GetVariableResult.attributeValue, VariableAttribute.value and EventData.actualValue. The max size of these values will always remain equal. \r\n\r\n",
                        "type": "string",
                        "maxLength": 2500
                    },
                    "techCode": {
                        "description": "Technical (error) code as reported by component.\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "techInfo": {
                        "description": "Technical detail information as reported by component.\r\n",
                        "type": "string",
                        "maxLength": 500
                    },
                    "cleared": {
                        "description": "_Cleared_ is set to true to report the clearing of a monitored situation, i.e. a 'return to normal'. \r\n\r\n",
                        "type": "boolean"
                    },
                    "transactionId": {
                        "description": "If an event notification is linked to a specific transaction, this field can be used to specify its transactionId.\r\n",
                        "type": "string",
                        "maxLength": 36
                    },
                    "component": {
                        "$ref": "#/definitions/ComponentType"
                    },
                    "variableMonitoringId": {
                        "description": "Identifies the VariableMonitoring which triggered the event.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "eventNotificationType": {
                        "$ref": "#/definitions/EventNotificationEnumType"
                    },
                    "variable": {
                        "$ref": "#/definitions/VariableType"
                    },
                    "severity": {
                        "description": "*(2.1)* Severity associated with the monitor in _variableMonitoringId_ or with the hardwired notification.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "eventId",
                    "timestamp",
                    "trigger",
                    "actualValue",
                    "eventNotificationType",
                    "component",
                    "variable"
                ]
            },
            "EVSEType": {
                "description": "Electric Vehicle Supply Equipment\r\n",
                "javaType": "EVSE",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "id": {
                        "description": "EVSE Identifier. This contains a number (&gt; 0) designating an EVSE of the Charging Station.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "connectorId": {
                        "description": "An id to designate a specific connector (on an EVSE) by connector index number.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "id"
                ]
            },
            "VariableType": {
                "description": "Reference key to a component-variable.\r\n",
                "javaType": "Variable",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "name": {
                        "description": "Name of the variable. Name should be taken from the list of standardized variable names whenever possible. Case Insensitive. strongly advised to use Camel Case.\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "instance": {
                        "description": "Name of instance in case the variable exists as multiple instances. Case Insensitive. strongly advised to use Camel Case.\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "name"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "generatedAt": {
                "description": "Timestamp of the moment this message was generated at the Charging Station.\r\n",
                "type": "string",
                "format": "date-time"
            },
            "tbc": {
                "description": "“to be continued” indicator. Indicates whether another part of the report follows in an upcoming notifyEventRequest message. Default value when omitted is false. \r\n",
                "type": "boolean",
                "default": false
            },
            "seqNo": {
                "description": "Sequence number of this message. First message starts at 0.\r\n",
                "type": "integer",
                "minimum": 0
            },
            "eventData": {
                "type": "array",
                "additionalItems": false,
                "items": {
                    "$ref": "#/definitions/EventDataType"
                },
                "minItems": 1
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "generatedAt",
            "seqNo",
            "eventData"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:NotifyEventResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        }
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:NotifyMonitoringReportRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "EventNotificationEnumType": {
                "description": "*(2.1)* Type of monitor.\r\n",
                "javaType": "EventNotificationEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "HardWiredNotification",
                    "HardWiredMonitor",
                    "PreconfiguredMonitor",
                    "CustomMonitor"
                ]
            },
            "MonitorEnumType": {
                "description": "The type of this monitor, e.g. a threshold, delta or periodic monitor. \r\n",
                "javaType": "MonitorEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "UpperThreshold",
                    "LowerThreshold",
                    "Delta",
                    "Periodic",
                    "PeriodicClockAligned",
                    "TargetDelta",
                    "TargetDeltaRelative"
                ]
            },
            "ComponentType": {
                "description": "A physical or logical component\r\n",
                "javaType": "Component",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "evse": {
                        "$ref": "#/definitions/EVSEType"
                    },
                    "name": {
                        "description": "Name of the component. Name should be taken from the list of standardized component names whenever possible. Case Insensitive. strongly advised to use Camel Case.\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "instance": {
                        "description": "Name of instance in case the component exists as multiple instances. Case Insensitive. strongly advised to use Camel Case.\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "name"
                ]
            },
            "EVSEType": {
                "description": "Electric Vehicle Supply Equipment\r\n",
                "javaType": "EVSE",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "id": {
                        "description": "EVSE Identifier. This contains a number (&gt; 0) designating an EVSE of the Charging Station.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "connectorId": {
                        "description": "An id to designate a specific connector (on an EVSE) by connector index number.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "id"
                ]
            },
            "MonitoringDataType": {
                "description": "Class to hold parameters of SetVariableMonitoring request.\r\n",
                "javaType": "MonitoringData",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "component": {
                        "$ref": "#/definitions/ComponentType"
                    },
                    "variable": {
                        "$ref": "#/definitions/VariableType"
                    },
                    "variableMonitoring": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/VariableMonitoringType"
                        },
                        "minItems": 1
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "component",
                    "variable",
                    "variableMonitoring"
                ]
            },
            "VariableMonitoringType": {
                "description": "A monitoring setting for a variable.\r\n",
                "javaType": "VariableMonitoring",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "id": {
                        "description": "Identifies the monitor.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "transaction": {
                        "description": "Monitor only active when a transaction is ongoing on a component relevant to this transaction. \r\n",
                        "type": "boolean"
                    },
                    "value": {
                        "description": "Value for threshold or delta monitoring.\r\nFor Periodic or PeriodicClockAligned this is the interval in seconds.\r\n",
                        "type": "number"
                    },
                    "type": {
                        "$ref": "#/definitions/MonitorEnumType"
                    },
                    "severity": {
                        "description": "The severity that will be assigned to an event that is triggered by this monitor. The severity range is 0-9, with 0 as the highest and 9 as the lowest severity level.\r\n\r\nThe severity levels have the following meaning: +\r\n*0-Danger* +\r\nIndicates lives are potentially in danger. Urgent attention is needed and action should be taken immediately. +\r\n*1-Hardware Failure* +\r\nIndicates that the Charging Station is unable to continue regular operations due to Hardware issues. Action is required. +\r\n*2-System Failure* +\r\nIndicates that the Charging Station is unable to continue regular operations due to software or minor hardware issues. Action is required. +\r\n*3-Critical* +\r\nIndicates a critical error. Action is required. +\r\n*4-Error* +\r\nIndicates a non-urgent error. Action is required. +\r\n*5-Alert* +\r\nIndicates an alert event. Default severity for any type of monitoring event.  +\r\n*6-Warning* +\r\nIndicates a warning event. Action may be required. +\r\n*7-Notice* +\r\nIndicates an unusual event. No immediate action is required. +\r\n*8-Informational* +\r\nIndicates a regular operational event. May be used for reporting, measuring throughput, etc. No action is required. +\r\n*9-Debug* +\r\nIndicates information useful to developers for debugging, not useful during operations.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "eventNotificationType": {
                        "$ref": "#/definitions/EventNotificationEnumType"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "id",
                    "transaction",
                    "value",
                    "type",
                    "severity",
                    "eventNotificationType"
                ]
            },
            "VariableType": {
                "description": "Reference key to a component-variable.\r\n",
                "javaType": "Variable",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "name": {
                        "description": "Name of the variable. Name should be taken from the list of standardized variable names whenever possible. Case Insensitive. strongly advised to use Camel Case.\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "instance": {
                        "description": "Name of instance in case the variable exists as multiple instances. Case Insensitive. strongly advised to use Camel Case.\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "name"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "monitor": {
                "type": "array",
                "additionalItems": false,
                "items": {
                    "$ref": "#/definitions/MonitoringDataType"
                },
                "minItems": 1
            },
            "requestId": {
                "description": "The id of the GetMonitoringRequest that requested this report.\r\n\r\n",
                "type": "integer"
            },
            "tbc": {
                "description": "“to be continued” indicator. Indicates whether another part of the monitoringData follows in an upcoming notifyMonitoringReportRequest message. Default value when omitted is false.\r\n",
                "type": "boolean",
                "default": false
            },
            "seqNo": {
                "description": "Sequence number of this message. First message starts at 0.\r\n",
                "type": "integer",
                "minimum": 0
            },
            "generatedAt": {
                "description": "Timestamp of the moment this message was generated at the Charging Station.\r\n",
                "type": "string",
                "format": "date-time"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "requestId",
            "seqNo",
            "generatedAt"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:NotifyMonitoringReportResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        }
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:NotifyPeriodicEventStream",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "StreamDataElementType": {
                "javaType": "StreamDataElement",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "t": {
                        "description": "Offset relative to _basetime_ of this message. _basetime_ + _t_ is timestamp of recorded value.\r\n",
                        "type": "number"
                    },
                    "v": {
                        "type": "string",
                        "maxLength": 2500
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "t",
                    "v"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "data": {
                "type": "array",
                "additionalItems": false,
                "items": {
                    "$ref": "#/definitions/StreamDataElementType"
                },
                "minItems": 1
            },
            "id": {
                "description": "Id of stream.\r\n",
                "type": "integer",
                "minimum": 0
            },
            "pending": {
                "description": "Number of data elements still pending to be sent.\r\n",
                "type": "integer",
                "minimum": 0
            },
            "basetime": {
                "description": "Base timestamp to add to time offset of values.\r\n",
                "type": "string",
                "format": "date-time"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "id",
            "pending",
            "basetime",
            "data"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:NotifyPriorityChargingRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "transactionId": {
                "description": "The transaction for which priority charging is requested.\r\n",
                "type": "string",
                "maxLength": 36
            },
            "activated": {
                "description": "True if priority charging was activated. False if it has stopped using the priority charging profile.\r\n",
                "type": "boolean"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "transactionId",
            "activated"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:NotifyPriorityChargingResponse",
        "description": "This response message has an empty body.\r\n",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        }
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:NotifyReportRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "AttributeEnumType": {
                "description": "Attribute: Actual, MinSet, MaxSet, etc.\r\nDefaults to Actual if absent.\r\n",
                "javaType": "AttributeEnum",
                "type": "string",
                "default": "Actual",
                "additionalProperties": false,
                "enum": [
                    "Actual",
                    "Target",
                    "MinSet",
                    "MaxSet"
                ]
            },
            "DataEnumType": {
                "description": "Data type of this variable.\r\n",
                "javaType": "DataEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "string",
                    "decimal",
                    "integer",
                    "dateTime",
                    "boolean",
                    "OptionList",
                    "SequenceList",
                    "MemberList"
                ]
            },
            "MutabilityEnumType": {
                "description": "Defines the mutability of this attribute. Default is ReadWrite when omitted.\r\n",
                "javaType": "MutabilityEnum",
                "type": "string",
                "default": "ReadWrite",
                "additionalProperties": false,
                "enum": [
                    "ReadOnly",
                    "WriteOnly",
                    "ReadWrite"
                ]
            },
            "ComponentType": {
                "description": "A physical or logical component\r\n",
                "javaType": "Component",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "evse": {
                        "$ref": "#/definitions/EVSEType"
                    },
                    "name": {
                        "description": "Name of the component. Name should be taken from the list of standardized component names whenever possible. Case Insensitive. strongly advised to use Camel Case.\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "instance": {
                        "description": "Name of instance in case the component exists as multiple instances. Case Insensitive. strongly advised to use Camel Case.\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "name"
                ]
            },
            "EVSEType": {
                "description": "Electric Vehicle Supply Equipment\r\n",
                "javaType": "EVSE",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "id": {
                        "description": "EVSE Identifier. This contains a number (&gt; 0) designating an EVSE of the Charging Station.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "connectorId": {
                        "description": "An id to designate a specific connector (on an EVSE) by connector index number.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "id"
                ]
            },
            "ReportDataType": {
                "description": "Class to report components, variables and variable attributes and characteristics.\r\n",
                "javaType": "ReportData",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "component": {
                        "$ref": "#/definitions/ComponentType"
                    },
                    "variable": {
                        "$ref": "#/definitions/VariableType"
                    },
                    "variableAttribute": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/VariableAttributeType"
                        },
                        "minItems": 1,
                        "maxItems": 4
                    },
                    "variableCharacteristics": {
                        "$ref": "#/definitions/VariableCharacteristicsType"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "component",
                    "variable",
                    "variableAttribute"
                ]
            },
            "VariableAttributeType": {
                "description": "Attribute data of a variable.\r\n",
                "javaType": "VariableAttribute",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "type": {
                        "$ref": "#/definitions/AttributeEnumType"
                    },
                    "value": {
                        "description": "Value of the attribute. May only be omitted when mutability is set to 'WriteOnly'.\r\n\r\nThe Configuration Variable &lt;&lt;configkey-reporting-value-size,ReportingValueSize&gt;&gt; can be used to limit GetVariableResult.attributeValue, VariableAttribute.value and EventData.actualValue. The max size of these values will always remain equal. \r\n",
                        "type": "string",
                        "maxLength": 2500
                    },
                    "mutability": {
                        "$ref": "#/definitions/MutabilityEnumType"
                    },
                    "persistent": {
                        "description": "If true, value will be persistent across system reboots or power down. Default when omitted is false.\r\n",
                        "type": "boolean",
                        "default": false
                    },
                    "constant": {
                        "description": "If true, value that will never be changed by the Charging Station at runtime. Default when omitted is false.\r\n",
                        "type": "boolean",
                        "default": false
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                }
            },
            "VariableCharacteristicsType": {
                "description": "Fixed read-only parameters of a variable.\r\n",
                "javaType": "VariableCharacteristics",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "unit": {
                        "description": "Unit of the variable. When the transmitted value has a unit, this field SHALL be included.\r\n",
                        "type": "string",
                        "maxLength": 16
                    },
                    "dataType": {
                        "$ref": "#/definitions/DataEnumType"
                    },
                    "minLimit": {
                        "description": "Minimum possible value of this variable.\r\n",
                        "type": "number"
                    },
                    "maxLimit": {
                        "description": "Maximum possible value of this variable. When the datatype of this Variable is String, OptionList, SequenceList or MemberList, this field defines the maximum length of the (CSV) string.\r\n",
                        "type": "number"
                    },
                    "maxElements": {
                        "description": "*(2.1)* Maximum number of elements from _valuesList_ that are supported as _attributeValue_.\r\n",
                        "type": "integer",
                        "minimum": 1
                    },
                    "valuesList": {
                        "description": "Mandatory when _dataType_ = OptionList, MemberList or SequenceList. In that case _valuesList_ specifies the allowed values for the type.\r\n\r\nThe length of this field can be limited by DeviceDataCtrlr.ConfigurationValueSize.\r\n\r\n* OptionList: The (Actual) Variable value must be a single value from the reported (CSV) enumeration list.\r\n\r\n* MemberList: The (Actual) Variable value  may be an (unordered) (sub-)set of the reported (CSV) valid values list.\r\n\r\n* SequenceList: The (Actual) Variable value  may be an ordered (priority, etc)  (sub-)set of the reported (CSV) valid values.\r\n\r\nThis is a comma separated list.\r\n\r\nThe Configuration Variable &lt;&lt;configkey-configuration-value-size,ConfigurationValueSize&gt;&gt; can be used to limit SetVariableData.attributeValue and VariableCharacteristics.valuesList. The max size of these values will always remain equal. \r\n\r\n\r\n",
                        "type": "string",
                        "maxLength": 1000
                    },
                    "supportsMonitoring": {
                        "description": "Flag indicating if this variable supports monitoring. \r\n",
                        "type": "boolean"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "dataType",
                    "supportsMonitoring"
                ]
            },
            "VariableType": {
                "description": "Reference key to a component-variable.\r\n",
                "javaType": "Variable",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "name": {
                        "description": "Name of the variable. Name should be taken from the list of standardized variable names whenever possible. Case Insensitive. strongly advised to use Camel Case.\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "instance": {
                        "description": "Name of instance in case the variable exists as multiple instances. Case Insensitive. strongly advised to use Camel Case.\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "name"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "requestId": {
                "description": "The id of the GetReportRequest  or GetBaseReportRequest that requested this report\r\n",
                "type": "integer"
            },
            "generatedAt": {
                "description": "Timestamp of the moment this message was generated at the Charging Station.\r\n",
                "type": "string",
                "format": "date-time"
            },
            "reportData": {
                "type": "array",
                "additionalItems": false,
                "items": {
                    "$ref": "#/definitions/ReportDataType"
                },
                "minItems": 1
            },
            "tbc": {
                "description": "“to be continued” indicator. Indicates whether another part of the report follows in an upcoming notifyReportRequest message. Default value when omitted is false.\r\n\r\n",
                "type": "boolean",
                "default": false
            },
            "seqNo": {
                "description": "Sequence number of this message. First message starts at 0.\r\n",
                "type": "integer",
                "minimum": 0
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "requestId",
            "generatedAt",
            "seqNo"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:NotifyReportResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        }
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:NotifySettlementRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "PaymentStatusEnumType": {
                "description": "The status of the settlement attempt.\r\n\r\n",
                "javaType": "PaymentStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Settled",
                    "Canceled",
                    "Rejected",
                    "Failed"
                ]
            },
            "AddressType": {
                "description": "*(2.1)* A generic address format.\r\n",
                "javaType": "Address",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "name": {
                        "description": "Name of person/company\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "address1": {
                        "description": "Address line 1\r\n",
                        "type": "string",
                        "maxLength": 100
                    },
                    "address2": {
                        "description": "Address line 2\r\n",
                        "type": "string",
                        "maxLength": 100
                    },
                    "city": {
                        "description": "City\r\n",
                        "type": "string",
                        "maxLength": 100
                    },
                    "postalCode": {
                        "description": "Postal code\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "country": {
                        "description": "Country name\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "name",
                    "address1",
                    "city",
                    "country"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "transactionId": {
                "description": "The _transactionId_ that the settlement belongs to. Can be empty if the payment transaction is canceled prior to the start of the OCPP transaction.\r\n\r\n",
                "type": "string",
                "maxLength": 36
            },
            "pspRef": {
                "description": "The payment reference received from the payment terminal and is used as the value for _idToken_. \r\n\r\n",
                "type": "string",
                "maxLength": 255
            },
            "status": {
                "$ref": "#/definitions/PaymentStatusEnumType"
            },
            "statusInfo": {
                "description": "Additional information from payment terminal/payment process.\r\n\r\n",
                "type": "string",
                "maxLength": 500
            },
            "settlementAmount": {
                "description": "The amount that was settled, or attempted to be settled (in case of failure).\r\n\r\n",
                "type": "number"
            },
            "settlementTime": {
                "description": "The time when the settlement was done.\r\n\r\n",
                "type": "string",
                "format": "date-time"
            },
            "receiptId": {
                "type": "string",
                "maxLength": 50
            },
            "receiptUrl": {
                "description": "The receipt URL, to be used if the receipt is generated by the payment terminal or the CS.\r\n\r\n",
                "type": "string",
                "maxLength": 2000
            },
            "vatCompany": {
                "$ref": "#/definitions/AddressType"
            },
            "vatNumber": {
                "description": "VAT number for a company receipt.\r\n\r\n",
                "type": "string",
                "maxLength": 20
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "pspRef",
            "status",
            "settlementAmount",
            "settlementTime"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:NotifySettlementResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "receiptUrl": {
                "description": "The receipt URL if receipt generated by CSMS. The Charging Station can QR encode it and show it to the EV Driver.\r\n\r\n",
                "type": "string",
                "maxLength": 2000
            },
            "receiptId": {
                "description": "The receipt id if the receipt is generated by CSMS.\r\n\r\n",
                "type": "string",
                "maxLength": 50
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        }
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:NotifyWebPaymentStartedRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "evseId": {
                "description": "EVSE id for which transaction is requested.\r\n\r\n",
                "type": "integer",
                "minimum": 0
            },
            "timeout": {
                "description": "Timeout value in seconds after which no result of web payment process (e.g. QR code scanning) is to be expected anymore.\r\n",
                "type": "integer"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "evseId",
            "timeout"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:NotifyWebPaymentStartedResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        }
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:OpenPeriodicEventStreamRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "ConstantStreamDataType": {
                "javaType": "ConstantStreamData",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "id": {
                        "description": "Uniquely identifies the stream\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "params": {
                        "$ref": "#/definitions/PeriodicEventStreamParamsType"
                    },
                    "variableMonitoringId": {
                        "description": "Id of monitor used to report his event. It can be a preconfigured or hardwired monitor.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "id",
                    "variableMonitoringId",
                    "params"
                ]
            },
            "PeriodicEventStreamParamsType": {
                "javaType": "PeriodicEventStreamParams",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "interval": {
                        "description": "Time in seconds after which stream data is sent.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "values": {
                        "description": "Number of items to be sent together in stream.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                }
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "constantStreamData": {
                "$ref": "#/definitions/ConstantStreamDataType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "constantStreamData"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:OpenPeriodicEventStreamResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "GenericStatusEnumType": {
                "description": "Result of request.\r\n",
                "javaType": "GenericStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Accepted",
                    "Rejected"
                ]
            },
            "StatusInfoType": {
                "description": "Element providing more information about the status.\r\n",
                "javaType": "StatusInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "reasonCode": {
                        "description": "A predefined code for the reason why the status is returned in this response. The string is case-insensitive.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "additionalInfo": {
                        "description": "Additional text to provide detailed information.\r\n",
                        "type": "string",
                        "maxLength": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "reasonCode"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "status": {
                "$ref": "#/definitions/GenericStatusEnumType"
            },
            "statusInfo": {
                "$ref": "#/definitions/StatusInfoType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "status"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:PublishFirmwareRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "location": {
                "description": "This contains a string containing a URI pointing to a\r\nlocation from which to retrieve the firmware.\r\n",
                "type": "string",
                "maxLength": 2000
            },
            "retries": {
                "description": "This specifies how many times Charging Station must retry\r\nto download the firmware before giving up. If this field is not\r\npresent, it is left to Charging Station to decide how many times it wants to retry.\r\nIf the value is 0, it means: no retries.\r\n",
                "type": "integer",
                "minimum": 0
            },
            "checksum": {
                "description": "The MD5 checksum over the entire firmware file as a hexadecimal string of length 32. \r\n",
                "type": "string",
                "maxLength": 32
            },
            "requestId": {
                "description": "The Id of the request.\r\n",
                "type": "integer",
                "minimum": 0
            },
            "retryInterval": {
                "description": "The interval in seconds\r\nafter which a retry may be\r\nattempted. If this field is not\r\npresent, it is left to Charging\r\nStation to decide how long to wait\r\nbetween attempts.\r\n",
                "type": "integer",
                "minimum": 0
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "location",
            "checksum",
            "requestId"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:PublishFirmwareResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "GenericStatusEnumType": {
                "description": "Indicates whether the request was accepted.\r\n",
                "javaType": "GenericStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Accepted",
                    "Rejected"
                ]
            },
            "StatusInfoType": {
                "description": "Element providing more information about the status.\r\n",
                "javaType": "StatusInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "reasonCode": {
                        "description": "A predefined code for the reason why the status is returned in this response. The string is case-insensitive.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "additionalInfo": {
                        "description": "Additional text to provide detailed information.\r\n",
                        "type": "string",
                        "maxLength": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "reasonCode"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "status": {
                "$ref": "#/definitions/GenericStatusEnumType"
            },
            "statusInfo": {
                "$ref": "#/definitions/StatusInfoType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "status"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:PublishFirmwareStatusNotificationRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "PublishFirmwareStatusEnumType": {
                "description": "This contains the progress status of the publishfirmware\r\ninstallation.\r\n",
                "javaType": "PublishFirmwareStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Idle",
                    "DownloadScheduled",
                    "Downloading",
                    "Downloaded",
                    "Published",
                    "DownloadFailed",
                    "DownloadPaused",
                    "InvalidChecksum",
                    "ChecksumVerified",
                    "PublishFailed"
                ]
            },
            "StatusInfoType": {
                "description": "Element providing more information about the status.\r\n",
                "javaType": "StatusInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "reasonCode": {
                        "description": "A predefined code for the reason why the status is returned in this response. The string is case-insensitive.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "additionalInfo": {
                        "description": "Additional text to provide detailed information.\r\n",
                        "type": "string",
                        "maxLength": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "reasonCode"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "status": {
                "$ref": "#/definitions/PublishFirmwareStatusEnumType"
            },
            "location": {
                "description": "Required if status is Published. Can be multiple URI’s, if the Local Controller supports e.g. HTTP, HTTPS, and FTP.\r\n",
                "type": "array",
                "additionalItems": false,
                "items": {
                    "type": "string",
                    "maxLength": 2000
                },
                "minItems": 1
            },
            "requestId": {
                "description": "The request id that was\r\nprovided in the\r\nPublishFirmwareRequest which\r\ntriggered this action.\r\n",
                "type": "integer",
                "minimum": 0
            },
            "statusInfo": {
                "$ref": "#/definitions/StatusInfoType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "status"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:PublishFirmwareStatusNotificationResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        }
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:PullDynamicScheduleUpdateRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "chargingProfileId": {
                "description": "Id of charging profile to update.\r\n",
                "type": "integer"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "chargingProfileId"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:PullDynamicScheduleUpdateResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "ChargingProfileStatusEnumType": {
                "description": "Result of request.\r\n\r\n",
                "javaType": "ChargingProfileStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Accepted",
                    "Rejected"
                ]
            },
            "ChargingScheduleUpdateType": {
                "description": "Updates to a ChargingSchedulePeriodType for dynamic charging profiles.\r\n\r\n",
                "javaType": "ChargingScheduleUpdate",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "limit": {
                        "description": "Optional only when not required by the _operationMode_, as in CentralSetpoint, ExternalSetpoint, ExternalLimits, LocalFrequency,  LocalLoadBalancing. +\r\nCharging rate limit during the schedule period, in the applicable _chargingRateUnit_. \r\nThis SHOULD be a non-negative value; a negative value is only supported for backwards compatibility with older systems that use a negative value to specify a discharging limit.\r\nFor AC this field represents the sum of all phases, unless values are provided for L2 and L3, in which case this field represents phase L1.\r\n",
                        "type": "number"
                    },
                    "limit_L2": {
                        "description": "*(2.1)* Charging rate limit on phase L2  in the applicable _chargingRateUnit_. \r\n",
                        "type": "number"
                    },
                    "limit_L3": {
                        "description": "*(2.1)* Charging rate limit on phase L3  in the applicable _chargingRateUnit_. \r\n",
                        "type": "number"
                    },
                    "dischargeLimit": {
                        "description": "*(2.1)* Limit in _chargingRateUnit_ that the EV is allowed to discharge with. Note, these are negative values in order to be consistent with _setpoint_, which can be positive and negative.  +\r\nFor AC this field represents the sum of all phases, unless values are provided for L2 and L3, in which case this field represents phase L1.\r\n",
                        "type": "number",
                        "maximum": 0
                    },
                    "dischargeLimit_L2": {
                        "description": "*(2.1)* Limit in _chargingRateUnit_ on phase L2 that the EV is allowed to discharge with. \r\n",
                        "type": "number",
                        "maximum": 0
                    },
                    "dischargeLimit_L3": {
                        "description": "*(2.1)* Limit in _chargingRateUnit_ on phase L3 that the EV is allowed to discharge with. \r\n",
                        "type": "number",
                        "maximum": 0
                    },
                    "setpoint": {
                        "description": "*(2.1)* Setpoint in _chargingRateUnit_ that the EV should follow as close as possible. Use negative values for discharging. +\r\nWhen a limit and/or _dischargeLimit_ are given the overshoot when following _setpoint_ must remain within these values.\r\nThis field represents the sum of all phases, unless values are provided for L2 and L3, in which case this field represents phase L1.\r\n",
                        "type": "number"
                    },
                    "setpoint_L2": {
                        "description": "*(2.1)* Setpoint in _chargingRateUnit_ that the EV should follow on phase L2 as close as possible.\r\n",
                        "type": "number"
                    },
                    "setpoint_L3": {
                        "description": "*(2.1)* Setpoint in _chargingRateUnit_ that the EV should follow on phase L3 as close as possible. \r\n",
                        "type": "number"
                    },
                    "setpointReactive": {
                        "description": "*(2.1)* Setpoint for reactive power (or current) in _chargingRateUnit_ that the EV should follow as closely as possible. Positive values for inductive, negative for capacitive reactive power or current.  +\r\nThis field represents the sum of all phases, unless values are provided for L2 and L3, in which case this field represents phase L1.\r\n",
                        "type": "number"
                    },
                    "setpointReactive_L2": {
                        "description": "*(2.1)* Setpoint for reactive power (or current) in _chargingRateUnit_ that the EV should follow on phase L2 as closely as possible. \r\n",
                        "type": "number"
                    },
                    "setpointReactive_L3": {
                        "description": "*(2.1)* Setpoint for reactive power (or current) in _chargingRateUnit_ that the EV should follow on phase L3 as closely as possible. \r\n",
                        "type": "number"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                }
            },
            "StatusInfoType": {
                "description": "Element providing more information about the status.\r\n",
                "javaType": "StatusInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "reasonCode": {
                        "description": "A predefined code for the reason why the status is returned in this response. The string is case-insensitive.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "additionalInfo": {
                        "description": "Additional text to provide detailed information.\r\n",
                        "type": "string",
                        "maxLength": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "reasonCode"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "scheduleUpdate": {
                "$ref": "#/definitions/ChargingScheduleUpdateType"
            },
            "status": {
                "$ref": "#/definitions/ChargingProfileStatusEnumType"
            },
            "statusInfo": {
                "$ref": "#/definitions/StatusInfoType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "status"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:ReportChargingProfilesRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "ChargingProfileKindEnumType": {
                "description": "Indicates the kind of schedule.\r\n",
                "javaType": "ChargingProfileKindEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Absolute",
                    "Recurring",
                    "Relative",
                    "Dynamic"
                ]
            },
            "ChargingProfilePurposeEnumType": {
                "description": "Defines the purpose of the schedule transferred by this profile\r\n",
                "javaType": "ChargingProfilePurposeEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "ChargingStationExternalConstraints",
                    "ChargingStationMaxProfile",
                    "TxDefaultProfile",
                    "TxProfile",
                    "PriorityCharging",
                    "LocalGeneration"
                ]
            },
            "ChargingRateUnitEnumType": {
                "description": "The unit of measure in which limits and setpoints are expressed.\r\n",
                "javaType": "ChargingRateUnitEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "W",
                    "A"
                ]
            },
            "CostKindEnumType": {
                "description": "The kind of cost referred to in the message element amount\r\n",
                "javaType": "CostKindEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "CarbonDioxideEmission",
                    "RelativePricePercentage",
                    "RenewableGenerationPercentage"
                ]
            },
            "OperationModeEnumType": {
                "description": "*(2.1)* Charging operation mode to use during this time interval. When absent defaults to `ChargingOnly`.\r\n",
                "javaType": "OperationModeEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Idle",
                    "ChargingOnly",
                    "CentralSetpoint",
                    "ExternalSetpoint",
                    "ExternalLimits",
                    "CentralFrequency",
                    "LocalFrequency",
                    "LocalLoadBalancing"
                ]
            },
            "RecurrencyKindEnumType": {
                "description": "Indicates the start point of a recurrence.\r\n",
                "javaType": "RecurrencyKindEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Daily",
                    "Weekly"
                ]
            },
            "AbsolutePriceScheduleType": {
                "description": "The AbsolutePriceScheduleType is modeled after the same type that is defined in ISO 15118-20, such that if it is supplied by an EMSP as a signed EXI message, the conversion from EXI to JSON (in OCPP) and back to EXI (for ISO 15118-20) does not change the digest and therefore does not invalidate the signature.\r\n\r\nimage::images/AbsolutePriceSchedule-Simple.png[]\r\n\r\n",
                "javaType": "AbsolutePriceSchedule",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "timeAnchor": {
                        "description": "Starting point of price schedule.\r\n",
                        "type": "string",
                        "format": "date-time"
                    },
                    "priceScheduleID": {
                        "description": "Unique ID of price schedule\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "priceScheduleDescription": {
                        "description": "Description of the price schedule.\r\n",
                        "type": "string",
                        "maxLength": 160
                    },
                    "currency": {
                        "description": "Currency according to ISO 4217.\r\n",
                        "type": "string",
                        "maxLength": 3
                    },
                    "language": {
                        "description": "String that indicates what language is used for the human readable strings in the price schedule. Based on ISO 639.\r\n",
                        "type": "string",
                        "maxLength": 8
                    },
                    "priceAlgorithm": {
                        "description": "A string in URN notation which shall uniquely identify an algorithm that defines how to compute an energy fee sum for a specific power profile based on the EnergyFee information from the PriceRule elements.\r\n",
                        "type": "string",
                        "maxLength": 2000
                    },
                    "minimumCost": {
                        "$ref": "#/definitions/RationalNumberType"
                    },
                    "maximumCost": {
                        "$ref": "#/definitions/RationalNumberType"
                    },
                    "priceRuleStacks": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/PriceRuleStackType"
                        },
                        "minItems": 1,
                        "maxItems": 1024
                    },
                    "taxRules": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/TaxRuleType"
                        },
                        "minItems": 1,
                        "maxItems": 10
                    },
                    "overstayRuleList": {
                        "$ref": "#/definitions/OverstayRuleListType"
                    },
                    "additionalSelectedServices": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/AdditionalSelectedServicesType"
                        },
                        "minItems": 1,
                        "maxItems": 5
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "timeAnchor",
                    "priceScheduleID",
                    "currency",
                    "language",
                    "priceAlgorithm",
                    "priceRuleStacks"
                ]
            },
            "AdditionalSelectedServicesType": {
                "description": "Part of ISO 15118-20 price schedule.\r\n\r\n",
                "javaType": "AdditionalSelectedServices",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "serviceFee": {
                        "$ref": "#/definitions/RationalNumberType"
                    },
                    "serviceName": {
                        "description": "Human readable string to identify this service.\r\n",
                        "type": "string",
                        "maxLength": 80
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "serviceName",
                    "serviceFee"
                ]
            },
            "ChargingProfileType": {
                "description": "A ChargingProfile consists of 1 to 3 ChargingSchedules with a list of ChargingSchedulePeriods, describing the amount of power or current that can be delivered per time interval.\r\n\r\nimage::images/ChargingProfile-Simple.png[]\r\n\r\n",
                "javaType": "ChargingProfile",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "id": {
                        "description": "Id of ChargingProfile. Unique within charging station. Id can have a negative value. This is useful to distinguish charging profiles from an external actor (external constraints) from charging profiles received from CSMS.\r\n",
                        "type": "integer"
                    },
                    "stackLevel": {
                        "description": "Value determining level in hierarchy stack of profiles. Higher values have precedence over lower values. Lowest level is 0.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "chargingProfilePurpose": {
                        "$ref": "#/definitions/ChargingProfilePurposeEnumType"
                    },
                    "chargingProfileKind": {
                        "$ref": "#/definitions/ChargingProfileKindEnumType"
                    },
                    "recurrencyKind": {
                        "$ref": "#/definitions/RecurrencyKindEnumType"
                    },
                    "validFrom": {
                        "description": "Point in time at which the profile starts to be valid. If absent, the profile is valid as soon as it is received by the Charging Station.\r\n",
                        "type": "string",
                        "format": "date-time"
                    },
                    "validTo": {
                        "description": "Point in time at which the profile stops to be valid. If absent, the profile is valid until it is replaced by another profile.\r\n",
                        "type": "string",
                        "format": "date-time"
                    },
                    "transactionId": {
                        "description": "SHALL only be included if ChargingProfilePurpose is set to TxProfile in a SetChargingProfileRequest. The transactionId is used to match the profile to a specific transaction.\r\n",
                        "type": "string",
                        "maxLength": 36
                    },
                    "maxOfflineDuration": {
                        "description": "*(2.1)* Period in seconds that this charging profile remains valid after the Charging Station has gone offline. After this period the charging profile becomes invalid for as long as it is offline and the Charging Station reverts back to a valid profile with a lower stack level. \r\nIf _invalidAfterOfflineDuration_ is true, then this charging profile will become permanently invalid.\r\nA value of 0 means that the charging profile is immediately invalid while offline. When the field is absent, then  no timeout applies and the charging profile remains valid when offline.\r\n",
                        "type": "integer"
                    },
                    "chargingSchedule": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/ChargingScheduleType"
                        },
                        "minItems": 1,
                        "maxItems": 3
                    },
                    "invalidAfterOfflineDuration": {
                        "description": "*(2.1)* When set to true this charging profile will not be valid anymore after being offline for more than _maxOfflineDuration_. +\r\n    When absent defaults to false.\r\n",
                        "type": "boolean"
                    },
                    "dynUpdateInterval": {
                        "description": "*(2.1)*  Interval in seconds after receipt of last update, when to request a profile update by sending a PullDynamicScheduleUpdateRequest message.\r\n    A value of 0 or no value means that no update interval applies. +\r\n    Only relevant in a dynamic charging profile.\r\n\r\n",
                        "type": "integer"
                    },
                    "dynUpdateTime": {
                        "description": "*(2.1)* Time at which limits or setpoints in this charging profile were last updated by a PullDynamicScheduleUpdateRequest or UpdateDynamicScheduleRequest or by an external actor. +\r\n    Only relevant in a dynamic charging profile.\r\n\r\n",
                        "type": "string",
                        "format": "date-time"
                    },
                    "priceScheduleSignature": {
                        "description": "*(2.1)* ISO 15118-20 signature for all price schedules in _chargingSchedules_. +\r\nNote: for 256-bit elliptic curves (like secp256k1) the ECDSA signature is 512 bits (64 bytes) and for 521-bit curves (like secp521r1) the signature is 1042 bits. This equals 131 bytes, which can be encoded as base64 in 176 bytes.\r\n",
                        "type": "string",
                        "maxLength": 256
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "id",
                    "stackLevel",
                    "chargingProfilePurpose",
                    "chargingProfileKind",
                    "chargingSchedule"
                ]
            },
            "ChargingSchedulePeriodType": {
                "description": "Charging schedule period structure defines a time period in a charging schedule. It is used in: CompositeScheduleType and in ChargingScheduleType. When used in a NotifyEVChargingScheduleRequest only _startPeriod_, _limit_, _limit_L2_, _limit_L3_ are relevant.\r\n",
                "javaType": "ChargingSchedulePeriod",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "startPeriod": {
                        "description": "Start of the period, in seconds from the start of schedule. The value of StartPeriod also defines the stop time of the previous period.\r\n",
                        "type": "integer"
                    },
                    "limit": {
                        "description": "Optional only when not required by the _operationMode_, as in CentralSetpoint, ExternalSetpoint, ExternalLimits, LocalFrequency,  LocalLoadBalancing. +\r\nCharging rate limit during the schedule period, in the applicable _chargingRateUnit_. \r\nThis SHOULD be a non-negative value; a negative value is only supported for backwards compatibility with older systems that use a negative value to specify a discharging limit.\r\nWhen using _chargingRateUnit_ = `W`, this field represents the sum of the power of all phases, unless values are provided for L2 and L3, in which case this field represents phase L1.\r\n",
                        "type": "number"
                    },
                    "limit_L2": {
                        "description": "*(2.1)* Charging rate limit on phase L2  in the applicable _chargingRateUnit_. \r\n",
                        "type": "number"
                    },
                    "limit_L3": {
                        "description": "*(2.1)* Charging rate limit on phase L3  in the applicable _chargingRateUnit_. \r\n",
                        "type": "number"
                    },
                    "numberPhases": {
                        "description": "The number of phases that can be used for charging. +\r\nFor a DC EVSE this field should be omitted. +\r\nFor an AC EVSE a default value of _numberPhases_ = 3 will be assumed if the field is absent.\r\n",
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 3
                    },
                    "phaseToUse": {
                        "description": "Values: 1..3, Used if numberPhases=1 and if the EVSE is capable of switching the phase connected to the EV, i.e. ACPhaseSwitchingSupported is defined and true. It’s not allowed unless both conditions above are true. If both conditions are true, and phaseToUse is omitted, the Charging Station / EVSE will make the selection on its own.\r\n\r\n",
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 3
                    },
                    "dischargeLimit": {
                        "description": "*(2.1)* Limit in _chargingRateUnit_ that the EV is allowed to discharge with. Note, these are negative values in order to be consistent with _setpoint_, which can be positive and negative.  +\r\nFor AC this field represents the sum of all phases, unless values are provided for L2 and L3, in which case this field represents phase L1.\r\n",
                        "type": "number",
                        "maximum": 0
                    },
                    "dischargeLimit_L2": {
                        "description": "*(2.1)* Limit in _chargingRateUnit_ on phase L2 that the EV is allowed to discharge with. \r\n",
                        "type": "number",
                        "maximum": 0
                    },
                    "dischargeLimit_L3": {
                        "description": "*(2.1)* Limit in _chargingRateUnit_ on phase L3 that the EV is allowed to discharge with. \r\n",
                        "type": "number",
                        "maximum": 0
                    },
                    "setpoint": {
                        "description": "*(2.1)* Setpoint in _chargingRateUnit_ that the EV should follow as close as possible. Use negative values for discharging. +\r\nWhen a limit and/or _dischargeLimit_ are given the overshoot when following _setpoint_ must remain within these values.\r\nThis field represents the sum of all phases, unless values are provided for L2 and L3, in which case this field represents phase L1.\r\n",
                        "type": "number"
                    },
                    "setpoint_L2": {
                        "description": "*(2.1)* Setpoint in _chargingRateUnit_ that the EV should follow on phase L2 as close as possible.\r\n",
                        "type": "number"
                    },
                    "setpoint_L3": {
                        "description": "*(2.1)* Setpoint in _chargingRateUnit_ that the EV should follow on phase L3 as close as possible. \r\n",
                        "type": "number"
                    },
                    "setpointReactive": {
                        "description": "*(2.1)* Setpoint for reactive power (or current) in _chargingRateUnit_ that the EV should follow as closely as possible. Positive values for inductive, negative for capacitive reactive power or current.  +\r\nThis field represents the sum of all phases, unless values are provided for L2 and L3, in which case this field represents phase L1.\r\n",
                        "type": "number"
                    },
                    "setpointReactive_L2": {
                        "description": "*(2.1)* Setpoint for reactive power (or current) in _chargingRateUnit_ that the EV should follow on phase L2 as closely as possible. \r\n",
                        "type": "number"
                    },
                    "setpointReactive_L3": {
                        "description": "*(2.1)* Setpoint for reactive power (or current) in _chargingRateUnit_ that the EV should follow on phase L3 as closely as possible. \r\n",
                        "type": "number"
                    },
                    "preconditioningRequest": {
                        "description": "*(2.1)* If  true, the EV should attempt to keep the BMS preconditioned for this time interval.\r\n",
                        "type": "boolean"
                    },
                    "evseSleep": {
                        "description": "*(2.1)* If true, the EVSE must turn off power electronics/modules associated with this transaction. Default value when absent is false.\r\n",
                        "type": "boolean"
                    },
                    "v2xBaseline": {
                        "description": "*(2.1)* Power value that, when present, is used as a baseline on top of which values from _v2xFreqWattCurve_ and _v2xSignalWattCurve_ are added.\r\n\r\n",
                        "type": "number"
                    },
                    "operationMode": {
                        "$ref": "#/definitions/OperationModeEnumType"
                    },
                    "v2xFreqWattCurve": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/V2XFreqWattPointType"
                        },
                        "minItems": 1,
                        "maxItems": 20
                    },
                    "v2xSignalWattCurve": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/V2XSignalWattPointType"
                        },
                        "minItems": 1,
                        "maxItems": 20
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "startPeriod"
                ]
            },
            "ChargingScheduleType": {
                "description": "Charging schedule structure defines a list of charging periods, as used in: NotifyEVChargingScheduleRequest and ChargingProfileType. When used in a NotifyEVChargingScheduleRequest only _duration_ and _chargingSchedulePeriod_ are relevant and _chargingRateUnit_ must be 'W'. +\r\nAn ISO 15118-20 session may provide either an _absolutePriceSchedule_ or a _priceLevelSchedule_. An ISO 15118-2 session can only provide a_salesTariff_ element. The field _digestValue_ is used when price schedule or sales tariff are signed.\r\n\r\nimage::images/ChargingSchedule-Simple.png[]\r\n\r\n\r\n",
                "javaType": "ChargingSchedule",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "limitAtSoC": {
                        "$ref": "#/definitions/LimitAtSoCType"
                    },
                    "startSchedule": {
                        "description": "Starting point of an absolute schedule or recurring schedule.\r\n",
                        "type": "string",
                        "format": "date-time"
                    },
                    "duration": {
                        "description": "Duration of the charging schedule in seconds. If the duration is left empty, the last period will continue indefinitely or until end of the transaction in case startSchedule is absent.\r\n",
                        "type": "integer"
                    },
                    "chargingRateUnit": {
                        "$ref": "#/definitions/ChargingRateUnitEnumType"
                    },
                    "minChargingRate": {
                        "description": "Minimum charging rate supported by the EV. The unit of measure is defined by the chargingRateUnit. This parameter is intended to be used by a local smart charging algorithm to optimize the power allocation for in the case a charging process is inefficient at lower charging rates. \r\n",
                        "type": "number"
                    },
                    "powerTolerance": {
                        "description": "*(2.1)* Power tolerance when following EVPowerProfile.\r\n\r\n",
                        "type": "number"
                    },
                    "signatureId": {
                        "description": "*(2.1)* Id of this element for referencing in a signature.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "digestValue": {
                        "description": "*(2.1)* Base64 encoded hash (SHA256 for ISO 15118-2, SHA512 for ISO 15118-20) of the EXI price schedule element. Used in signature.\r\n",
                        "type": "string",
                        "maxLength": 88
                    },
                    "useLocalTime": {
                        "description": "*(2.1)* Defaults to false. When true, disregard time zone offset in dateTime fields of  _ChargingScheduleType_ and use unqualified local time at Charging Station instead.\r\n This allows the same `Absolute` or `Recurring` charging profile to be used in both summer and winter time.\r\n\r\n",
                        "type": "boolean"
                    },
                    "chargingSchedulePeriod": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/ChargingSchedulePeriodType"
                        },
                        "minItems": 1,
                        "maxItems": 1024
                    },
                    "randomizedDelay": {
                        "description": "*(2.1)* Defaults to 0. When _randomizedDelay_ not equals zero, then the start of each &lt;&lt;cmn_chargingscheduleperiodtype,ChargingSchedulePeriodType&gt;&gt; is delayed by a randomly chosen number of seconds between 0 and _randomizedDelay_.  Only allowed for TxProfile and TxDefaultProfile.\r\n\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "salesTariff": {
                        "$ref": "#/definitions/SalesTariffType"
                    },
                    "absolutePriceSchedule": {
                        "$ref": "#/definitions/AbsolutePriceScheduleType"
                    },
                    "priceLevelSchedule": {
                        "$ref": "#/definitions/PriceLevelScheduleType"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "id",
                    "chargingRateUnit",
                    "chargingSchedulePeriod"
                ]
            },
            "ConsumptionCostType": {
                "javaType": "ConsumptionCost",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "startValue": {
                        "description": "The lowest level of consumption that defines the starting point of this consumption block. The block interval extends to the start of the next interval.\r\n",
                        "type": "number"
                    },
                    "cost": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/CostType"
                        },
                        "minItems": 1,
                        "maxItems": 3
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "startValue",
                    "cost"
                ]
            },
            "CostType": {
                "javaType": "Cost",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "costKind": {
                        "$ref": "#/definitions/CostKindEnumType"
                    },
                    "amount": {
                        "description": "The estimated or actual cost per kWh\r\n",
                        "type": "integer"
                    },
                    "amountMultiplier": {
                        "description": "Values: -3..3, The amountMultiplier defines the exponent to base 10 (dec). The final value is determined by: amount * 10 ^ amountMultiplier\r\n",
                        "type": "integer"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "costKind",
                    "amount"
                ]
            },
            "LimitAtSoCType": {
                "javaType": "LimitAtSoC",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "soc": {
                        "description": "The SoC value beyond which the charging rate limit should be applied.\r\n",
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 100
                    },
                    "limit": {
                        "description": "Charging rate limit beyond the SoC value.\r\nThe unit is defined by _chargingSchedule.chargingRateUnit_.\r\n\r\n",
                        "type": "number"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "soc",
                    "limit"
                ]
            },
            "OverstayRuleListType": {
                "description": "Part of ISO 15118-20 price schedule.\r\n\r\n",
                "javaType": "OverstayRuleList",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "overstayPowerThreshold": {
                        "$ref": "#/definitions/RationalNumberType"
                    },
                    "overstayRule": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/OverstayRuleType"
                        },
                        "minItems": 1,
                        "maxItems": 5
                    },
                    "overstayTimeThreshold": {
                        "description": "Time till overstay is applied in seconds.\r\n",
                        "type": "integer"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "overstayRule"
                ]
            },
            "OverstayRuleType": {
                "description": "Part of ISO 15118-20 price schedule.\r\n\r\n",
                "javaType": "OverstayRule",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "overstayFee": {
                        "$ref": "#/definitions/RationalNumberType"
                    },
                    "overstayRuleDescription": {
                        "description": "Human readable string to identify the overstay rule.\r\n",
                        "type": "string",
                        "maxLength": 32
                    },
                    "startTime": {
                        "description": "Time in seconds after trigger of the parent Overstay Rules for this particular fee to apply.\r\n",
                        "type": "integer"
                    },
                    "overstayFeePeriod": {
                        "description": "Time till overstay will be reapplied\r\n",
                        "type": "integer"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "startTime",
                    "overstayFeePeriod",
                    "overstayFee"
                ]
            },
            "PriceLevelScheduleEntryType": {
                "description": "Part of ISO 15118-20 price schedule.\r\n",
                "javaType": "PriceLevelScheduleEntry",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "duration": {
                        "description": "The amount of seconds that define the duration of this given PriceLevelScheduleEntry.\r\n",
                        "type": "integer"
                    },
                    "priceLevel": {
                        "description": "Defines the price level of this PriceLevelScheduleEntry (referring to NumberOfPriceLevels). Small values for the PriceLevel represent a cheaper PriceLevelScheduleEntry. Large values for the PriceLevel represent a more expensive PriceLevelScheduleEntry.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "duration",
                    "priceLevel"
                ]
            },
            "PriceLevelScheduleType": {
                "description": "The PriceLevelScheduleType is modeled after the same type that is defined in ISO 15118-20, such that if it is supplied by an EMSP as a signed EXI message, the conversion from EXI to JSON (in OCPP) and back to EXI (for ISO 15118-20) does not change the digest and therefore does not invalidate the signature.\r\n",
                "javaType": "PriceLevelSchedule",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "priceLevelScheduleEntries": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/PriceLevelScheduleEntryType"
                        },
                        "minItems": 1,
                        "maxItems": 100
                    },
                    "timeAnchor": {
                        "description": "Starting point of this price schedule.\r\n",
                        "type": "string",
                        "format": "date-time"
                    },
                    "priceScheduleId": {
                        "description": "Unique ID of this price schedule.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "priceScheduleDescription": {
                        "description": "Description of the price schedule.\r\n",
                        "type": "string",
                        "maxLength": 32
                    },
                    "numberOfPriceLevels": {
                        "description": "Defines the overall number of distinct price level elements used across all PriceLevelSchedules.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "timeAnchor",
                    "priceScheduleId",
                    "numberOfPriceLevels",
                    "priceLevelScheduleEntries"
                ]
            },
            "PriceRuleStackType": {
                "description": "Part of ISO 15118-20 price schedule.\r\n",
                "javaType": "PriceRuleStack",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "duration": {
                        "description": "Duration of the stack of price rules.  he amount of seconds that define the duration of the given PriceRule(s).\r\n",
                        "type": "integer"
                    },
                    "priceRule": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/PriceRuleType"
                        },
                        "minItems": 1,
                        "maxItems": 8
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "duration",
                    "priceRule"
                ]
            },
            "PriceRuleType": {
                "description": "Part of ISO 15118-20 price schedule.\r\n\r\n",
                "javaType": "PriceRule",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "parkingFeePeriod": {
                        "description": "The duration of the parking fee period (in seconds).\r\nWhen the time enters into a ParkingFeePeriod, the ParkingFee will apply to the session. .\r\n",
                        "type": "integer"
                    },
                    "carbonDioxideEmission": {
                        "description": "Number of grams of CO2 per kWh.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "renewableGenerationPercentage": {
                        "description": "Percentage of the power that is created by renewable resources.\r\n",
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 100
                    },
                    "energyFee": {
                        "$ref": "#/definitions/RationalNumberType"
                    },
                    "parkingFee": {
                        "$ref": "#/definitions/RationalNumberType"
                    },
                    "powerRangeStart": {
                        "$ref": "#/definitions/RationalNumberType"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "energyFee",
                    "powerRangeStart"
                ]
            },
            "RationalNumberType": {
                "description": "Part of ISO 15118-20 price schedule.\r\n\r\n",
                "javaType": "RationalNumber",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "exponent": {
                        "description": "The exponent to base 10 (dec)\r\n",
                        "type": "integer"
                    },
                    "value": {
                        "description": "Value which shall be multiplied.\r\n",
                        "type": "integer"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "exponent",
                    "value"
                ]
            },
            "RelativeTimeIntervalType": {
                "javaType": "RelativeTimeInterval",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "start": {
                        "description": "Start of the interval, in seconds from NOW.\r\n",
                        "type": "integer"
                    },
                    "duration": {
                        "description": "Duration of the interval, in seconds.\r\n",
                        "type": "integer"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "start"
                ]
            },
            "SalesTariffEntryType": {
                "javaType": "SalesTariffEntry",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "relativeTimeInterval": {
                        "$ref": "#/definitions/RelativeTimeIntervalType"
                    },
                    "ePriceLevel": {
                        "description": "Defines the price level of this SalesTariffEntry (referring to NumEPriceLevels). Small values for the EPriceLevel represent a cheaper TariffEntry. Large values for the EPriceLevel represent a more expensive TariffEntry.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "consumptionCost": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/ConsumptionCostType"
                        },
                        "minItems": 1,
                        "maxItems": 3
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "relativeTimeInterval"
                ]
            },
            "SalesTariffType": {
                "description": "A SalesTariff provided by a Mobility Operator (EMSP) .\r\nNOTE: This dataType is based on dataTypes from &lt;&lt;ref-ISOIEC15118-2,ISO 15118-2&gt;&gt;.\r\n",
                "javaType": "SalesTariff",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "id": {
                        "description": "SalesTariff identifier used to identify one sales tariff. An SAID remains a unique identifier for one schedule throughout a charging session.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "salesTariffDescription": {
                        "description": "A human readable title/short description of the sales tariff e.g. for HMI display purposes.\r\n",
                        "type": "string",
                        "maxLength": 32
                    },
                    "numEPriceLevels": {
                        "description": "Defines the overall number of distinct price levels used across all provided SalesTariff elements.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "salesTariffEntry": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/SalesTariffEntryType"
                        },
                        "minItems": 1,
                        "maxItems": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "id",
                    "salesTariffEntry"
                ]
            },
            "TaxRuleType": {
                "description": "Part of ISO 15118-20 price schedule.\r\n\r\n",
                "javaType": "TaxRule",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "taxRuleID": {
                        "description": "Id for the tax rule.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "taxRuleName": {
                        "description": "Human readable string to identify the tax rule.\r\n",
                        "type": "string",
                        "maxLength": 100
                    },
                    "taxIncludedInPrice": {
                        "description": "Indicates whether the tax is included in any price or not.\r\n",
                        "type": "boolean"
                    },
                    "appliesToEnergyFee": {
                        "description": "Indicates whether this tax applies to Energy Fees.\r\n",
                        "type": "boolean"
                    },
                    "appliesToParkingFee": {
                        "description": "Indicates whether this tax applies to Parking Fees.\r\n\r\n",
                        "type": "boolean"
                    },
                    "appliesToOverstayFee": {
                        "description": "Indicates whether this tax applies to Overstay Fees.\r\n\r\n",
                        "type": "boolean"
                    },
                    "appliesToMinimumMaximumCost": {
                        "description": "Indicates whether this tax applies to Minimum/Maximum Cost.\r\n\r\n",
                        "type": "boolean"
                    },
                    "taxRate": {
                        "$ref": "#/definitions/RationalNumberType"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "taxRuleID",
                    "appliesToEnergyFee",
                    "appliesToParkingFee",
                    "appliesToOverstayFee",
                    "appliesToMinimumMaximumCost",
                    "taxRate"
                ]
            },
            "V2XFreqWattPointType": {
                "description": "*(2.1)* A point of a frequency-watt curve.\r\n",
                "javaType": "V2XFreqWattPoint",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "frequency": {
                        "description": "Net frequency in Hz.\r\n",
                        "type": "number"
                    },
                    "power": {
                        "description": "Power in W to charge (positive) or discharge (negative) at specified frequency.\r\n",
                        "type": "number"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "frequency",
                    "power"
                ]
            },
            "V2XSignalWattPointType": {
                "description": "*(2.1)* A point of a signal-watt curve.\r\n",
                "javaType": "V2XSignalWattPoint",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "signal": {
                        "description": "Signal value from an AFRRSignalRequest.\r\n",
                        "type": "integer"
                    },
                    "power": {
                        "description": "Power in W to charge (positive) or discharge (negative) at specified frequency.\r\n",
                        "type": "number"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "signal",
                    "power"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "requestId": {
                "description": "Id used to match the &lt;&lt;getchargingprofilesrequest, GetChargingProfilesRequest&gt;&gt; message with the resulting ReportChargingProfilesRequest messages. When the CSMS provided a requestId in the &lt;&lt;getchargingprofilesrequest, GetChargingProfilesRequest&gt;&gt;, this field SHALL contain the same value.\r\n",
                "type": "integer"
            },
            "chargingLimitSource": {
                "description": "Source that has installed this charging profile. Values defined in Appendix as ChargingLimitSourceEnumStringType.\r\n",
                "type": "string",
                "maxLength": 20
            },
            "chargingProfile": {
                "type": "array",
                "additionalItems": false,
                "items": {
                    "$ref": "#/definitions/ChargingProfileType"
                },
                "minItems": 1
            },
            "tbc": {
                "description": "To Be Continued. Default value when omitted: false. false indicates that there are no further messages as part of this report.\r\n",
                "type": "boolean",
                "default": false
            },
            "evseId": {
                "description": "The evse to which the charging profile applies. If evseId = 0, the message contains an overall limit for the Charging Station.\r\n",
                "type": "integer",
                "minimum": 0
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "requestId",
            "chargingLimitSource",
            "evseId",
            "chargingProfile"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:ReportChargingProfilesResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        }
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:ReportDERControlRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "DERControlEnumType": {
                "description": "Type of DER curve\r\n\r\n",
                "javaType": "DERControlEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "EnterService",
                    "FreqDroop",
                    "FreqWatt",
                    "FixedPFAbsorb",
                    "FixedPFInject",
                    "FixedVar",
                    "Gradients",
                    "HFMustTrip",
                    "HFMayTrip",
                    "HVMustTrip",
                    "HVMomCess",
                    "HVMayTrip",
                    "LimitMaxDischarge",
                    "LFMustTrip",
                    "LVMustTrip",
                    "LVMomCess",
                    "LVMayTrip",
                    "PowerMonitoringMustTrip",
                    "VoltVar",
                    "VoltWatt",
                    "WattPF",
                    "WattVar"
                ]
            },
            "DERUnitEnumType": {
                "description": "Unit of the Y-axis of DER curve\r\n",
                "javaType": "DERUnitEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Not_Applicable",
                    "PctMaxW",
                    "PctMaxVar",
                    "PctWAvail",
                    "PctVarAvail",
                    "PctEffectiveV"
                ]
            },
            "PowerDuringCessationEnumType": {
                "description": "Parameter is only sent, if the EV has to feed-in power or reactive power during fault-ride through (FRT) as defined by HVMomCess curve and LVMomCess curve.\r\n\r\n\r\n",
                "javaType": "PowerDuringCessationEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Active",
                    "Reactive"
                ]
            },
            "DERCurveGetType": {
                "javaType": "DERCurveGet",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "curve": {
                        "$ref": "#/definitions/DERCurveType"
                    },
                    "id": {
                        "description": "Id of DER curve\r\n\r\n",
                        "type": "string",
                        "maxLength": 36
                    },
                    "curveType": {
                        "$ref": "#/definitions/DERControlEnumType"
                    },
                    "isDefault": {
                        "description": "True if this is a default curve\r\n\r\n",
                        "type": "boolean"
                    },
                    "isSuperseded": {
                        "description": "True if this setting is superseded by a higher priority setting (i.e. lower value of _priority_)\r\n\r\n",
                        "type": "boolean"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "id",
                    "curveType",
                    "isDefault",
                    "isSuperseded",
                    "curve"
                ]
            },
            "DERCurvePointsType": {
                "javaType": "DERCurvePoints",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "x": {
                        "description": "The data value of the X-axis (independent) variable, depending on the curve type.\r\n\r\n\r\n",
                        "type": "number"
                    },
                    "y": {
                        "description": "The data value of the Y-axis (dependent) variable, depending on the  &lt;&lt;cmn_derunitenumtype&gt;&gt; of the curve. If _y_ is power factor, then a positive value means DER is absorbing reactive power (under-excited), a negative value when DER is injecting reactive power (over-excited).\r\n\r\n",
                        "type": "number"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "x",
                    "y"
                ]
            },
            "DERCurveType": {
                "javaType": "DERCurve",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "curveData": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/DERCurvePointsType"
                        },
                        "minItems": 1,
                        "maxItems": 10
                    },
                    "hysteresis": {
                        "$ref": "#/definitions/HysteresisType"
                    },
                    "priority": {
                        "description": "Priority of curve (0=highest)\r\n\r\n\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "reactivePowerParams": {
                        "$ref": "#/definitions/ReactivePowerParamsType"
                    },
                    "voltageParams": {
                        "$ref": "#/definitions/VoltageParamsType"
                    },
                    "yUnit": {
                        "$ref": "#/definitions/DERUnitEnumType"
                    },
                    "responseTime": {
                        "description": "Open loop response time, the time to ramp up to 90% of the new target in response to the change in voltage, in seconds. A value of 0 is used to mean no limit. When not present, the device should follow its default behavior.\r\n\r\n\r\n",
                        "type": "number"
                    },
                    "startTime": {
                        "description": "Point in time when this curve will become activated. Only absent when _default_ is true.\r\n\r\n",
                        "type": "string",
                        "format": "date-time"
                    },
                    "duration": {
                        "description": "Duration in seconds that this curve will be active. Only absent when _default_ is true.\r\n\r\n\r\n",
                        "type": "number"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "priority",
                    "yUnit",
                    "curveData"
                ]
            },
            "EnterServiceGetType": {
                "javaType": "EnterServiceGet",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "enterService": {
                        "$ref": "#/definitions/EnterServiceType"
                    },
                    "id": {
                        "description": "Id of setting\r\n\r\n",
                        "type": "string",
                        "maxLength": 36
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "id",
                    "enterService"
                ]
            },
            "EnterServiceType": {
                "javaType": "EnterService",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "priority": {
                        "description": "Priority of setting (0=highest)\r\n\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "highVoltage": {
                        "description": "Enter service voltage high\r\n",
                        "type": "number"
                    },
                    "lowVoltage": {
                        "description": "Enter service voltage low\r\n\r\n\r\n",
                        "type": "number"
                    },
                    "highFreq": {
                        "description": "Enter service frequency high\r\n\r\n",
                        "type": "number"
                    },
                    "lowFreq": {
                        "description": "Enter service frequency low\r\n\r\n\r\n",
                        "type": "number"
                    },
                    "delay": {
                        "description": "Enter service delay\r\n\r\n\r\n",
                        "type": "number"
                    },
                    "randomDelay": {
                        "description": "Enter service randomized delay\r\n\r\n\r\n",
                        "type": "number"
                    },
                    "rampRate": {
                        "description": "Enter service ramp rate in seconds\r\n\r\n\r\n",
                        "type": "number"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "priority",
                    "highVoltage",
                    "lowVoltage",
                    "highFreq",
                    "lowFreq"
                ]
            },
            "FixedPFGetType": {
                "javaType": "FixedPFGet",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "fixedPF": {
                        "$ref": "#/definitions/FixedPFType"
                    },
                    "id": {
                        "description": "Id of setting.\r\n",
                        "type": "string",
                        "maxLength": 36
                    },
                    "isDefault": {
                        "description": "True if setting is a default control.\r\n",
                        "type": "boolean"
                    },
                    "isSuperseded": {
                        "description": "True if this setting is superseded by a lower priority setting.\r\n",
                        "type": "boolean"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "id",
                    "isDefault",
                    "isSuperseded",
                    "fixedPF"
                ]
            },
            "FixedPFType": {
                "javaType": "FixedPF",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "priority": {
                        "description": "Priority of setting (0=highest)\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "displacement": {
                        "description": "Power factor, cos(phi), as value between 0..1.\r\n",
                        "type": "number"
                    },
                    "excitation": {
                        "description": "True when absorbing reactive power (under-excited), false when injecting reactive power (over-excited).\r\n",
                        "type": "boolean"
                    },
                    "startTime": {
                        "description": "Time when this setting becomes active\r\n",
                        "type": "string",
                        "format": "date-time"
                    },
                    "duration": {
                        "description": "Duration in seconds that this setting is active.\r\n",
                        "type": "number"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "priority",
                    "displacement",
                    "excitation"
                ]
            },
            "FixedVarGetType": {
                "javaType": "FixedVarGet",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "fixedVar": {
                        "$ref": "#/definitions/FixedVarType"
                    },
                    "id": {
                        "description": "Id of setting\r\n\r\n",
                        "type": "string",
                        "maxLength": 36
                    },
                    "isDefault": {
                        "description": "True if setting is a default control.\r\n",
                        "type": "boolean"
                    },
                    "isSuperseded": {
                        "description": "True if this setting is superseded by a lower priority setting\r\n\r\n",
                        "type": "boolean"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "id",
                    "isDefault",
                    "isSuperseded",
                    "fixedVar"
                ]
            },
            "FixedVarType": {
                "javaType": "FixedVar",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "priority": {
                        "description": "Priority of setting (0=highest)\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "setpoint": {
                        "description": "The value specifies a target var output interpreted as a signed percentage (-100 to 100). \r\n    A negative value refers to charging, whereas a positive one refers to discharging.\r\n    The value type is determined by the unit field.\r\n",
                        "type": "number"
                    },
                    "unit": {
                        "$ref": "#/definitions/DERUnitEnumType"
                    },
                    "startTime": {
                        "description": "Time when this setting becomes active.\r\n",
                        "type": "string",
                        "format": "date-time"
                    },
                    "duration": {
                        "description": "Duration in seconds that this setting is active.\r\n",
                        "type": "number"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "priority",
                    "setpoint",
                    "unit"
                ]
            },
            "FreqDroopGetType": {
                "javaType": "FreqDroopGet",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "freqDroop": {
                        "$ref": "#/definitions/FreqDroopType"
                    },
                    "id": {
                        "description": "Id of setting\r\n\r\n",
                        "type": "string",
                        "maxLength": 36
                    },
                    "isDefault": {
                        "description": "True if setting is a default control.\r\n",
                        "type": "boolean"
                    },
                    "isSuperseded": {
                        "description": "True if this setting is superseded by a higher priority setting (i.e. lower value of _priority_)\r\n\r\n",
                        "type": "boolean"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "id",
                    "isDefault",
                    "isSuperseded",
                    "freqDroop"
                ]
            },
            "FreqDroopType": {
                "javaType": "FreqDroop",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "priority": {
                        "description": "Priority of setting (0=highest)\r\n\r\n\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "overFreq": {
                        "description": "Over-frequency start of droop\r\n\r\n\r\n",
                        "type": "number"
                    },
                    "underFreq": {
                        "description": "Under-frequency start of droop\r\n\r\n\r\n",
                        "type": "number"
                    },
                    "overDroop": {
                        "description": "Over-frequency droop per unit, oFDroop\r\n\r\n\r\n",
                        "type": "number"
                    },
                    "underDroop": {
                        "description": "Under-frequency droop per unit, uFDroop\r\n\r\n",
                        "type": "number"
                    },
                    "responseTime": {
                        "description": "Open loop response time in seconds\r\n\r\n",
                        "type": "number"
                    },
                    "startTime": {
                        "description": "Time when this setting becomes active\r\n\r\n\r\n",
                        "type": "string",
                        "format": "date-time"
                    },
                    "duration": {
                        "description": "Duration in seconds that this setting is active\r\n\r\n\r\n",
                        "type": "number"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "priority",
                    "overFreq",
                    "underFreq",
                    "overDroop",
                    "underDroop",
                    "responseTime"
                ]
            },
            "GradientGetType": {
                "javaType": "GradientGet",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "gradient": {
                        "$ref": "#/definitions/GradientType"
                    },
                    "id": {
                        "description": "Id of setting\r\n\r\n",
                        "type": "string",
                        "maxLength": 36
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "id",
                    "gradient"
                ]
            },
            "GradientType": {
                "javaType": "Gradient",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "priority": {
                        "description": "Id of setting\r\n\r\n\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "gradient": {
                        "description": "Default ramp rate in seconds (0 if not applicable)\r\n\r\n\r\n",
                        "type": "number"
                    },
                    "softGradient": {
                        "description": "Soft-start ramp rate in seconds (0 if not applicable)\r\n\r\n\r\n",
                        "type": "number"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "priority",
                    "gradient",
                    "softGradient"
                ]
            },
            "HysteresisType": {
                "javaType": "Hysteresis",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "hysteresisHigh": {
                        "description": "High value for return to normal operation after a grid event, in absolute value. This value adopts the same unit as defined by yUnit\r\n\r\n\r\n",
                        "type": "number"
                    },
                    "hysteresisLow": {
                        "description": "Low value for return to normal operation after a grid event, in absolute value. This value adopts the same unit as defined by yUnit\r\n\r\n\r\n",
                        "type": "number"
                    },
                    "hysteresisDelay": {
                        "description": "Delay in seconds, once grid parameter within HysteresisLow and HysteresisHigh, for the EV to return to normal operation after a grid event.\r\n\r\n\r\n",
                        "type": "number"
                    },
                    "hysteresisGradient": {
                        "description": "Set default rate of change (ramp rate %/s) for the EV to return to normal operation after a grid event\r\n\r\n\r\n",
                        "type": "number"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                }
            },
            "LimitMaxDischargeGetType": {
                "javaType": "LimitMaxDischargeGet",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "id": {
                        "description": "Id of setting\r\n\r\n",
                        "type": "string",
                        "maxLength": 36
                    },
                    "isDefault": {
                        "description": "True if setting is a default control.\r\n",
                        "type": "boolean"
                    },
                    "isSuperseded": {
                        "description": "True if this setting is superseded by a higher priority setting (i.e. lower value of _priority_)\r\n\r\n",
                        "type": "boolean"
                    },
                    "limitMaxDischarge": {
                        "$ref": "#/definitions/LimitMaxDischargeType"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "id",
                    "isDefault",
                    "isSuperseded",
                    "limitMaxDischarge"
                ]
            },
            "LimitMaxDischargeType": {
                "javaType": "LimitMaxDischarge",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "priority": {
                        "description": "Priority of setting (0=highest)\r\n\r\n\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "pctMaxDischargePower": {
                        "description": "Only for PowerMonitoring. +\r\n    The value specifies a percentage (0 to 100) of the rated maximum discharge power of EV. \r\n    The PowerMonitoring curve becomes active when power exceeds this percentage.\r\n\r\n\r\n",
                        "type": "number"
                    },
                    "powerMonitoringMustTrip": {
                        "$ref": "#/definitions/DERCurveType"
                    },
                    "startTime": {
                        "description": "Time when this setting becomes active\r\n\r\n\r\n",
                        "type": "string",
                        "format": "date-time"
                    },
                    "duration": {
                        "description": "Duration in seconds that this setting is active\r\n\r\n\r\n",
                        "type": "number"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "priority"
                ]
            },
            "ReactivePowerParamsType": {
                "javaType": "ReactivePowerParams",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "vRef": {
                        "description": "Only for VoltVar curve: The nominal ac voltage (rms) adjustment to the voltage curve points for Volt-Var curves (percentage).\r\n\r\n\r\n",
                        "type": "number"
                    },
                    "autonomousVRefEnable": {
                        "description": "Only for VoltVar: Enable/disable autonomous VRef adjustment\r\n\r\n\r\n",
                        "type": "boolean"
                    },
                    "autonomousVRefTimeConstant": {
                        "description": "Only for VoltVar: Adjustment range for VRef time constant\r\n\r\n\r\n",
                        "type": "number"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                }
            },
            "VoltageParamsType": {
                "javaType": "VoltageParams",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "hv10MinMeanValue": {
                        "description": "EN 50549-1 chapter 4.9.3.4\r\n    Voltage threshold for the 10 min time window mean value monitoring.\r\n    The 10 min mean is recalculated up to every 3 s. \r\n    If the present voltage is above this threshold for more than the time defined by _hv10MinMeanValue_, the EV must trip.\r\n    This value is mandatory if _hv10MinMeanTripDelay_ is set.\r\n\r\n\r\n",
                        "type": "number"
                    },
                    "hv10MinMeanTripDelay": {
                        "description": "Time for which the voltage is allowed to stay above the 10 min mean value. \r\n    After this time, the EV must trip.\r\n    This value is mandatory if OverVoltageMeanValue10min is set.\r\n\r\n\r\n",
                        "type": "number"
                    },
                    "powerDuringCessation": {
                        "$ref": "#/definitions/PowerDuringCessationEnumType"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                }
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "curve": {
                "type": "array",
                "additionalItems": false,
                "items": {
                    "$ref": "#/definitions/DERCurveGetType"
                },
                "minItems": 1,
                "maxItems": 24
            },
            "enterService": {
                "type": "array",
                "additionalItems": false,
                "items": {
                    "$ref": "#/definitions/EnterServiceGetType"
                },
                "minItems": 1,
                "maxItems": 24
            },
            "fixedPFAbsorb": {
                "type": "array",
                "additionalItems": false,
                "items": {
                    "$ref": "#/definitions/FixedPFGetType"
                },
                "minItems": 1,
                "maxItems": 24
            },
            "fixedPFInject": {
                "type": "array",
                "additionalItems": false,
                "items": {
                    "$ref": "#/definitions/FixedPFGetType"
                },
                "minItems": 1,
                "maxItems": 24
            },
            "fixedVar": {
                "type": "array",
                "additionalItems": false,
                "items": {
                    "$ref": "#/definitions/FixedVarGetType"
                },
                "minItems": 1,
                "maxItems": 24
            },
            "freqDroop": {
                "type": "array",
                "additionalItems": false,
                "items": {
                    "$ref": "#/definitions/FreqDroopGetType"
                },
                "minItems": 1,
                "maxItems": 24
            },
            "gradient": {
                "type": "array",
                "additionalItems": false,
                "items": {
                    "$ref": "#/definitions/GradientGetType"
                },
                "minItems": 1,
                "maxItems": 24
            },
            "limitMaxDischarge": {
                "type": "array",
                "additionalItems": false,
                "items": {
                    "$ref": "#/definitions/LimitMaxDischargeGetType"
                },
                "minItems": 1,
                "maxItems": 24
            },
            "requestId": {
                "description": "RequestId from GetDERControlRequest.\r\n",
                "type": "integer"
            },
            "tbc": {
                "description": "To Be Continued. Default value when omitted: false. +\r\nFalse indicates that there are no further messages as part of this report.\r\n",
                "type": "boolean"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "requestId"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:ReportDERControlResponse",
        "description": "This message has no parameters.\r\n\r\n",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        }
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:RequestBatterySwapRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "AdditionalInfoType": {
                "description": "Contains a case insensitive identifier to use for the authorization and the type of authorization to support multiple forms of identifiers.\r\n",
                "javaType": "AdditionalInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "additionalIdToken": {
                        "description": "*(2.1)* This field specifies the additional IdToken.\r\n",
                        "type": "string",
                        "maxLength": 255
                    },
                    "type": {
                        "description": "_additionalInfo_ can be used to send extra information to CSMS in addition to the regular authorization with _IdToken_. _AdditionalInfo_ contains one or more custom _types_, which need to be agreed upon by all parties involved. When the _type_ is not supported, the CSMS/Charging Station MAY ignore the _additionalInfo_.\r\n\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "additionalIdToken",
                    "type"
                ]
            },
            "IdTokenType": {
                "description": "Contains a case insensitive identifier to use for the authorization and the type of authorization to support multiple forms of identifiers.\r\n",
                "javaType": "IdToken",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "additionalInfo": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/AdditionalInfoType"
                        },
                        "minItems": 1
                    },
                    "idToken": {
                        "description": "*(2.1)* IdToken is case insensitive. Might hold the hidden id of an RFID tag, but can for example also contain a UUID.\r\n",
                        "type": "string",
                        "maxLength": 255
                    },
                    "type": {
                        "description": "*(2.1)* Enumeration of possible idToken types. Values defined in Appendix as IdTokenEnumStringType.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "idToken",
                    "type"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "idToken": {
                "$ref": "#/definitions/IdTokenType"
            },
            "requestId": {
                "description": "Request id to match with BatterySwapRequest.\r\n\r\n",
                "type": "integer"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "requestId",
            "idToken"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:RequestBatterySwapResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "GenericStatusEnumType": {
                "description": "Accepted or rejected the request.\r\n",
                "javaType": "GenericStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Accepted",
                    "Rejected"
                ]
            },
            "StatusInfoType": {
                "description": "Element providing more information about the status.\r\n",
                "javaType": "StatusInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "reasonCode": {
                        "description": "A predefined code for the reason why the status is returned in this response. The string is case-insensitive.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "additionalInfo": {
                        "description": "Additional text to provide detailed information.\r\n",
                        "type": "string",
                        "maxLength": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "reasonCode"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "status": {
                "$ref": "#/definitions/GenericStatusEnumType"
            },
            "statusInfo": {
                "$ref": "#/definitions/StatusInfoType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "status"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:RequestStartTransactionRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "ChargingProfileKindEnumType": {
                "description": "Indicates the kind of schedule.\r\n",
                "javaType": "ChargingProfileKindEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Absolute",
                    "Recurring",
                    "Relative",
                    "Dynamic"
                ]
            },
            "ChargingProfilePurposeEnumType": {
                "description": "Defines the purpose of the schedule transferred by this profile\r\n",
                "javaType": "ChargingProfilePurposeEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "ChargingStationExternalConstraints",
                    "ChargingStationMaxProfile",
                    "TxDefaultProfile",
                    "TxProfile",
                    "PriorityCharging",
                    "LocalGeneration"
                ]
            },
            "ChargingRateUnitEnumType": {
                "description": "The unit of measure in which limits and setpoints are expressed.\r\n",
                "javaType": "ChargingRateUnitEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "W",
                    "A"
                ]
            },
            "CostKindEnumType": {
                "description": "The kind of cost referred to in the message element amount\r\n",
                "javaType": "CostKindEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "CarbonDioxideEmission",
                    "RelativePricePercentage",
                    "RenewableGenerationPercentage"
                ]
            },
            "OperationModeEnumType": {
                "description": "*(2.1)* Charging operation mode to use during this time interval. When absent defaults to `ChargingOnly`.\r\n",
                "javaType": "OperationModeEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Idle",
                    "ChargingOnly",
                    "CentralSetpoint",
                    "ExternalSetpoint",
                    "ExternalLimits",
                    "CentralFrequency",
                    "LocalFrequency",
                    "LocalLoadBalancing"
                ]
            },
            "RecurrencyKindEnumType": {
                "description": "Indicates the start point of a recurrence.\r\n",
                "javaType": "RecurrencyKindEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Daily",
                    "Weekly"
                ]
            },
            "AbsolutePriceScheduleType": {
                "description": "The AbsolutePriceScheduleType is modeled after the same type that is defined in ISO 15118-20, such that if it is supplied by an EMSP as a signed EXI message, the conversion from EXI to JSON (in OCPP) and back to EXI (for ISO 15118-20) does not change the digest and therefore does not invalidate the signature.\r\n\r\nimage::images/AbsolutePriceSchedule-Simple.png[]\r\n\r\n",
                "javaType": "AbsolutePriceSchedule",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "timeAnchor": {
                        "description": "Starting point of price schedule.\r\n",
                        "type": "string",
                        "format": "date-time"
                    },
                    "priceScheduleID": {
                        "description": "Unique ID of price schedule\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "priceScheduleDescription": {
                        "description": "Description of the price schedule.\r\n",
                        "type": "string",
                        "maxLength": 160
                    },
                    "currency": {
                        "description": "Currency according to ISO 4217.\r\n",
                        "type": "string",
                        "maxLength": 3
                    },
                    "language": {
                        "description": "String that indicates what language is used for the human readable strings in the price schedule. Based on ISO 639.\r\n",
                        "type": "string",
                        "maxLength": 8
                    },
                    "priceAlgorithm": {
                        "description": "A string in URN notation which shall uniquely identify an algorithm that defines how to compute an energy fee sum for a specific power profile based on the EnergyFee information from the PriceRule elements.\r\n",
                        "type": "string",
                        "maxLength": 2000
                    },
                    "minimumCost": {
                        "$ref": "#/definitions/RationalNumberType"
                    },
                    "maximumCost": {
                        "$ref": "#/definitions/RationalNumberType"
                    },
                    "priceRuleStacks": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/PriceRuleStackType"
                        },
                        "minItems": 1,
                        "maxItems": 1024
                    },
                    "taxRules": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/TaxRuleType"
                        },
                        "minItems": 1,
                        "maxItems": 10
                    },
                    "overstayRuleList": {
                        "$ref": "#/definitions/OverstayRuleListType"
                    },
                    "additionalSelectedServices": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/AdditionalSelectedServicesType"
                        },
                        "minItems": 1,
                        "maxItems": 5
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "timeAnchor",
                    "priceScheduleID",
                    "currency",
                    "language",
                    "priceAlgorithm",
                    "priceRuleStacks"
                ]
            },
            "AdditionalInfoType": {
                "description": "Contains a case insensitive identifier to use for the authorization and the type of authorization to support multiple forms of identifiers.\r\n",
                "javaType": "AdditionalInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "additionalIdToken": {
                        "description": "*(2.1)* This field specifies the additional IdToken.\r\n",
                        "type": "string",
                        "maxLength": 255
                    },
                    "type": {
                        "description": "_additionalInfo_ can be used to send extra information to CSMS in addition to the regular authorization with _IdToken_. _AdditionalInfo_ contains one or more custom _types_, which need to be agreed upon by all parties involved. When the _type_ is not supported, the CSMS/Charging Station MAY ignore the _additionalInfo_.\r\n\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "additionalIdToken",
                    "type"
                ]
            },
            "AdditionalSelectedServicesType": {
                "description": "Part of ISO 15118-20 price schedule.\r\n\r\n",
                "javaType": "AdditionalSelectedServices",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "serviceFee": {
                        "$ref": "#/definitions/RationalNumberType"
                    },
                    "serviceName": {
                        "description": "Human readable string to identify this service.\r\n",
                        "type": "string",
                        "maxLength": 80
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "serviceName",
                    "serviceFee"
                ]
            },
            "ChargingProfileType": {
                "description": "A ChargingProfile consists of 1 to 3 ChargingSchedules with a list of ChargingSchedulePeriods, describing the amount of power or current that can be delivered per time interval.\r\n\r\nimage::images/ChargingProfile-Simple.png[]\r\n\r\n",
                "javaType": "ChargingProfile",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "id": {
                        "description": "Id of ChargingProfile. Unique within charging station. Id can have a negative value. This is useful to distinguish charging profiles from an external actor (external constraints) from charging profiles received from CSMS.\r\n",
                        "type": "integer"
                    },
                    "stackLevel": {
                        "description": "Value determining level in hierarchy stack of profiles. Higher values have precedence over lower values. Lowest level is 0.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "chargingProfilePurpose": {
                        "$ref": "#/definitions/ChargingProfilePurposeEnumType"
                    },
                    "chargingProfileKind": {
                        "$ref": "#/definitions/ChargingProfileKindEnumType"
                    },
                    "recurrencyKind": {
                        "$ref": "#/definitions/RecurrencyKindEnumType"
                    },
                    "validFrom": {
                        "description": "Point in time at which the profile starts to be valid. If absent, the profile is valid as soon as it is received by the Charging Station.\r\n",
                        "type": "string",
                        "format": "date-time"
                    },
                    "validTo": {
                        "description": "Point in time at which the profile stops to be valid. If absent, the profile is valid until it is replaced by another profile.\r\n",
                        "type": "string",
                        "format": "date-time"
                    },
                    "transactionId": {
                        "description": "SHALL only be included if ChargingProfilePurpose is set to TxProfile in a SetChargingProfileRequest. The transactionId is used to match the profile to a specific transaction.\r\n",
                        "type": "string",
                        "maxLength": 36
                    },
                    "maxOfflineDuration": {
                        "description": "*(2.1)* Period in seconds that this charging profile remains valid after the Charging Station has gone offline. After this period the charging profile becomes invalid for as long as it is offline and the Charging Station reverts back to a valid profile with a lower stack level. \r\nIf _invalidAfterOfflineDuration_ is true, then this charging profile will become permanently invalid.\r\nA value of 0 means that the charging profile is immediately invalid while offline. When the field is absent, then  no timeout applies and the charging profile remains valid when offline.\r\n",
                        "type": "integer"
                    },
                    "chargingSchedule": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/ChargingScheduleType"
                        },
                        "minItems": 1,
                        "maxItems": 3
                    },
                    "invalidAfterOfflineDuration": {
                        "description": "*(2.1)* When set to true this charging profile will not be valid anymore after being offline for more than _maxOfflineDuration_. +\r\n    When absent defaults to false.\r\n",
                        "type": "boolean"
                    },
                    "dynUpdateInterval": {
                        "description": "*(2.1)*  Interval in seconds after receipt of last update, when to request a profile update by sending a PullDynamicScheduleUpdateRequest message.\r\n    A value of 0 or no value means that no update interval applies. +\r\n    Only relevant in a dynamic charging profile.\r\n\r\n",
                        "type": "integer"
                    },
                    "dynUpdateTime": {
                        "description": "*(2.1)* Time at which limits or setpoints in this charging profile were last updated by a PullDynamicScheduleUpdateRequest or UpdateDynamicScheduleRequest or by an external actor. +\r\n    Only relevant in a dynamic charging profile.\r\n\r\n",
                        "type": "string",
                        "format": "date-time"
                    },
                    "priceScheduleSignature": {
                        "description": "*(2.1)* ISO 15118-20 signature for all price schedules in _chargingSchedules_. +\r\nNote: for 256-bit elliptic curves (like secp256k1) the ECDSA signature is 512 bits (64 bytes) and for 521-bit curves (like secp521r1) the signature is 1042 bits. This equals 131 bytes, which can be encoded as base64 in 176 bytes.\r\n",
                        "type": "string",
                        "maxLength": 256
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "id",
                    "stackLevel",
                    "chargingProfilePurpose",
                    "chargingProfileKind",
                    "chargingSchedule"
                ]
            },
            "ChargingSchedulePeriodType": {
                "description": "Charging schedule period structure defines a time period in a charging schedule. It is used in: CompositeScheduleType and in ChargingScheduleType. When used in a NotifyEVChargingScheduleRequest only _startPeriod_, _limit_, _limit_L2_, _limit_L3_ are relevant.\r\n",
                "javaType": "ChargingSchedulePeriod",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "startPeriod": {
                        "description": "Start of the period, in seconds from the start of schedule. The value of StartPeriod also defines the stop time of the previous period.\r\n",
                        "type": "integer"
                    },
                    "limit": {
                        "description": "Optional only when not required by the _operationMode_, as in CentralSetpoint, ExternalSetpoint, ExternalLimits, LocalFrequency,  LocalLoadBalancing. +\r\nCharging rate limit during the schedule period, in the applicable _chargingRateUnit_. \r\nThis SHOULD be a non-negative value; a negative value is only supported for backwards compatibility with older systems that use a negative value to specify a discharging limit.\r\nWhen using _chargingRateUnit_ = `W`, this field represents the sum of the power of all phases, unless values are provided for L2 and L3, in which case this field represents phase L1.\r\n",
                        "type": "number"
                    },
                    "limit_L2": {
                        "description": "*(2.1)* Charging rate limit on phase L2  in the applicable _chargingRateUnit_. \r\n",
                        "type": "number"
                    },
                    "limit_L3": {
                        "description": "*(2.1)* Charging rate limit on phase L3  in the applicable _chargingRateUnit_. \r\n",
                        "type": "number"
                    },
                    "numberPhases": {
                        "description": "The number of phases that can be used for charging. +\r\nFor a DC EVSE this field should be omitted. +\r\nFor an AC EVSE a default value of _numberPhases_ = 3 will be assumed if the field is absent.\r\n",
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 3
                    },
                    "phaseToUse": {
                        "description": "Values: 1..3, Used if numberPhases=1 and if the EVSE is capable of switching the phase connected to the EV, i.e. ACPhaseSwitchingSupported is defined and true. It’s not allowed unless both conditions above are true. If both conditions are true, and phaseToUse is omitted, the Charging Station / EVSE will make the selection on its own.\r\n\r\n",
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 3
                    },
                    "dischargeLimit": {
                        "description": "*(2.1)* Limit in _chargingRateUnit_ that the EV is allowed to discharge with. Note, these are negative values in order to be consistent with _setpoint_, which can be positive and negative.  +\r\nFor AC this field represents the sum of all phases, unless values are provided for L2 and L3, in which case this field represents phase L1.\r\n",
                        "type": "number",
                        "maximum": 0
                    },
                    "dischargeLimit_L2": {
                        "description": "*(2.1)* Limit in _chargingRateUnit_ on phase L2 that the EV is allowed to discharge with. \r\n",
                        "type": "number",
                        "maximum": 0
                    },
                    "dischargeLimit_L3": {
                        "description": "*(2.1)* Limit in _chargingRateUnit_ on phase L3 that the EV is allowed to discharge with. \r\n",
                        "type": "number",
                        "maximum": 0
                    },
                    "setpoint": {
                        "description": "*(2.1)* Setpoint in _chargingRateUnit_ that the EV should follow as close as possible. Use negative values for discharging. +\r\nWhen a limit and/or _dischargeLimit_ are given the overshoot when following _setpoint_ must remain within these values.\r\nThis field represents the sum of all phases, unless values are provided for L2 and L3, in which case this field represents phase L1.\r\n",
                        "type": "number"
                    },
                    "setpoint_L2": {
                        "description": "*(2.1)* Setpoint in _chargingRateUnit_ that the EV should follow on phase L2 as close as possible.\r\n",
                        "type": "number"
                    },
                    "setpoint_L3": {
                        "description": "*(2.1)* Setpoint in _chargingRateUnit_ that the EV should follow on phase L3 as close as possible. \r\n",
                        "type": "number"
                    },
                    "setpointReactive": {
                        "description": "*(2.1)* Setpoint for reactive power (or current) in _chargingRateUnit_ that the EV should follow as closely as possible. Positive values for inductive, negative for capacitive reactive power or current.  +\r\nThis field represents the sum of all phases, unless values are provided for L2 and L3, in which case this field represents phase L1.\r\n",
                        "type": "number"
                    },
                    "setpointReactive_L2": {
                        "description": "*(2.1)* Setpoint for reactive power (or current) in _chargingRateUnit_ that the EV should follow on phase L2 as closely as possible. \r\n",
                        "type": "number"
                    },
                    "setpointReactive_L3": {
                        "description": "*(2.1)* Setpoint for reactive power (or current) in _chargingRateUnit_ that the EV should follow on phase L3 as closely as possible. \r\n",
                        "type": "number"
                    },
                    "preconditioningRequest": {
                        "description": "*(2.1)* If  true, the EV should attempt to keep the BMS preconditioned for this time interval.\r\n",
                        "type": "boolean"
                    },
                    "evseSleep": {
                        "description": "*(2.1)* If true, the EVSE must turn off power electronics/modules associated with this transaction. Default value when absent is false.\r\n",
                        "type": "boolean"
                    },
                    "v2xBaseline": {
                        "description": "*(2.1)* Power value that, when present, is used as a baseline on top of which values from _v2xFreqWattCurve_ and _v2xSignalWattCurve_ are added.\r\n\r\n",
                        "type": "number"
                    },
                    "operationMode": {
                        "$ref": "#/definitions/OperationModeEnumType"
                    },
                    "v2xFreqWattCurve": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/V2XFreqWattPointType"
                        },
                        "minItems": 1,
                        "maxItems": 20
                    },
                    "v2xSignalWattCurve": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/V2XSignalWattPointType"
                        },
                        "minItems": 1,
                        "maxItems": 20
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "startPeriod"
                ]
            },
            "ChargingScheduleType": {
                "description": "Charging schedule structure defines a list of charging periods, as used in: NotifyEVChargingScheduleRequest and ChargingProfileType. When used in a NotifyEVChargingScheduleRequest only _duration_ and _chargingSchedulePeriod_ are relevant and _chargingRateUnit_ must be 'W'. +\r\nAn ISO 15118-20 session may provide either an _absolutePriceSchedule_ or a _priceLevelSchedule_. An ISO 15118-2 session can only provide a_salesTariff_ element. The field _digestValue_ is used when price schedule or sales tariff are signed.\r\n\r\nimage::images/ChargingSchedule-Simple.png[]\r\n\r\n\r\n",
                "javaType": "ChargingSchedule",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "limitAtSoC": {
                        "$ref": "#/definitions/LimitAtSoCType"
                    },
                    "startSchedule": {
                        "description": "Starting point of an absolute schedule or recurring schedule.\r\n",
                        "type": "string",
                        "format": "date-time"
                    },
                    "duration": {
                        "description": "Duration of the charging schedule in seconds. If the duration is left empty, the last period will continue indefinitely or until end of the transaction in case startSchedule is absent.\r\n",
                        "type": "integer"
                    },
                    "chargingRateUnit": {
                        "$ref": "#/definitions/ChargingRateUnitEnumType"
                    },
                    "minChargingRate": {
                        "description": "Minimum charging rate supported by the EV. The unit of measure is defined by the chargingRateUnit. This parameter is intended to be used by a local smart charging algorithm to optimize the power allocation for in the case a charging process is inefficient at lower charging rates. \r\n",
                        "type": "number"
                    },
                    "powerTolerance": {
                        "description": "*(2.1)* Power tolerance when following EVPowerProfile.\r\n\r\n",
                        "type": "number"
                    },
                    "signatureId": {
                        "description": "*(2.1)* Id of this element for referencing in a signature.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "digestValue": {
                        "description": "*(2.1)* Base64 encoded hash (SHA256 for ISO 15118-2, SHA512 for ISO 15118-20) of the EXI price schedule element. Used in signature.\r\n",
                        "type": "string",
                        "maxLength": 88
                    },
                    "useLocalTime": {
                        "description": "*(2.1)* Defaults to false. When true, disregard time zone offset in dateTime fields of  _ChargingScheduleType_ and use unqualified local time at Charging Station instead.\r\n This allows the same `Absolute` or `Recurring` charging profile to be used in both summer and winter time.\r\n\r\n",
                        "type": "boolean"
                    },
                    "chargingSchedulePeriod": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/ChargingSchedulePeriodType"
                        },
                        "minItems": 1,
                        "maxItems": 1024
                    },
                    "randomizedDelay": {
                        "description": "*(2.1)* Defaults to 0. When _randomizedDelay_ not equals zero, then the start of each &lt;&lt;cmn_chargingscheduleperiodtype,ChargingSchedulePeriodType&gt;&gt; is delayed by a randomly chosen number of seconds between 0 and _randomizedDelay_.  Only allowed for TxProfile and TxDefaultProfile.\r\n\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "salesTariff": {
                        "$ref": "#/definitions/SalesTariffType"
                    },
                    "absolutePriceSchedule": {
                        "$ref": "#/definitions/AbsolutePriceScheduleType"
                    },
                    "priceLevelSchedule": {
                        "$ref": "#/definitions/PriceLevelScheduleType"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "id",
                    "chargingRateUnit",
                    "chargingSchedulePeriod"
                ]
            },
            "ConsumptionCostType": {
                "javaType": "ConsumptionCost",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "startValue": {
                        "description": "The lowest level of consumption that defines the starting point of this consumption block. The block interval extends to the start of the next interval.\r\n",
                        "type": "number"
                    },
                    "cost": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/CostType"
                        },
                        "minItems": 1,
                        "maxItems": 3
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "startValue",
                    "cost"
                ]
            },
            "CostType": {
                "javaType": "Cost",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "costKind": {
                        "$ref": "#/definitions/CostKindEnumType"
                    },
                    "amount": {
                        "description": "The estimated or actual cost per kWh\r\n",
                        "type": "integer"
                    },
                    "amountMultiplier": {
                        "description": "Values: -3..3, The amountMultiplier defines the exponent to base 10 (dec). The final value is determined by: amount * 10 ^ amountMultiplier\r\n",
                        "type": "integer"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "costKind",
                    "amount"
                ]
            },
            "IdTokenType": {
                "description": "Contains a case insensitive identifier to use for the authorization and the type of authorization to support multiple forms of identifiers.\r\n",
                "javaType": "IdToken",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "additionalInfo": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/AdditionalInfoType"
                        },
                        "minItems": 1
                    },
                    "idToken": {
                        "description": "*(2.1)* IdToken is case insensitive. Might hold the hidden id of an RFID tag, but can for example also contain a UUID.\r\n",
                        "type": "string",
                        "maxLength": 255
                    },
                    "type": {
                        "description": "*(2.1)* Enumeration of possible idToken types. Values defined in Appendix as IdTokenEnumStringType.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "idToken",
                    "type"
                ]
            },
            "LimitAtSoCType": {
                "javaType": "LimitAtSoC",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "soc": {
                        "description": "The SoC value beyond which the charging rate limit should be applied.\r\n",
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 100
                    },
                    "limit": {
                        "description": "Charging rate limit beyond the SoC value.\r\nThe unit is defined by _chargingSchedule.chargingRateUnit_.\r\n\r\n",
                        "type": "number"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "soc",
                    "limit"
                ]
            },
            "OverstayRuleListType": {
                "description": "Part of ISO 15118-20 price schedule.\r\n\r\n",
                "javaType": "OverstayRuleList",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "overstayPowerThreshold": {
                        "$ref": "#/definitions/RationalNumberType"
                    },
                    "overstayRule": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/OverstayRuleType"
                        },
                        "minItems": 1,
                        "maxItems": 5
                    },
                    "overstayTimeThreshold": {
                        "description": "Time till overstay is applied in seconds.\r\n",
                        "type": "integer"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "overstayRule"
                ]
            },
            "OverstayRuleType": {
                "description": "Part of ISO 15118-20 price schedule.\r\n\r\n",
                "javaType": "OverstayRule",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "overstayFee": {
                        "$ref": "#/definitions/RationalNumberType"
                    },
                    "overstayRuleDescription": {
                        "description": "Human readable string to identify the overstay rule.\r\n",
                        "type": "string",
                        "maxLength": 32
                    },
                    "startTime": {
                        "description": "Time in seconds after trigger of the parent Overstay Rules for this particular fee to apply.\r\n",
                        "type": "integer"
                    },
                    "overstayFeePeriod": {
                        "description": "Time till overstay will be reapplied\r\n",
                        "type": "integer"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "startTime",
                    "overstayFeePeriod",
                    "overstayFee"
                ]
            },
            "PriceLevelScheduleEntryType": {
                "description": "Part of ISO 15118-20 price schedule.\r\n",
                "javaType": "PriceLevelScheduleEntry",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "duration": {
                        "description": "The amount of seconds that define the duration of this given PriceLevelScheduleEntry.\r\n",
                        "type": "integer"
                    },
                    "priceLevel": {
                        "description": "Defines the price level of this PriceLevelScheduleEntry (referring to NumberOfPriceLevels). Small values for the PriceLevel represent a cheaper PriceLevelScheduleEntry. Large values for the PriceLevel represent a more expensive PriceLevelScheduleEntry.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "duration",
                    "priceLevel"
                ]
            },
            "PriceLevelScheduleType": {
                "description": "The PriceLevelScheduleType is modeled after the same type that is defined in ISO 15118-20, such that if it is supplied by an EMSP as a signed EXI message, the conversion from EXI to JSON (in OCPP) and back to EXI (for ISO 15118-20) does not change the digest and therefore does not invalidate the signature.\r\n",
                "javaType": "PriceLevelSchedule",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "priceLevelScheduleEntries": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/PriceLevelScheduleEntryType"
                        },
                        "minItems": 1,
                        "maxItems": 100
                    },
                    "timeAnchor": {
                        "description": "Starting point of this price schedule.\r\n",
                        "type": "string",
                        "format": "date-time"
                    },
                    "priceScheduleId": {
                        "description": "Unique ID of this price schedule.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "priceScheduleDescription": {
                        "description": "Description of the price schedule.\r\n",
                        "type": "string",
                        "maxLength": 32
                    },
                    "numberOfPriceLevels": {
                        "description": "Defines the overall number of distinct price level elements used across all PriceLevelSchedules.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "timeAnchor",
                    "priceScheduleId",
                    "numberOfPriceLevels",
                    "priceLevelScheduleEntries"
                ]
            },
            "PriceRuleStackType": {
                "description": "Part of ISO 15118-20 price schedule.\r\n",
                "javaType": "PriceRuleStack",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "duration": {
                        "description": "Duration of the stack of price rules.  he amount of seconds that define the duration of the given PriceRule(s).\r\n",
                        "type": "integer"
                    },
                    "priceRule": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/PriceRuleType"
                        },
                        "minItems": 1,
                        "maxItems": 8
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "duration",
                    "priceRule"
                ]
            },
            "PriceRuleType": {
                "description": "Part of ISO 15118-20 price schedule.\r\n\r\n",
                "javaType": "PriceRule",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "parkingFeePeriod": {
                        "description": "The duration of the parking fee period (in seconds).\r\nWhen the time enters into a ParkingFeePeriod, the ParkingFee will apply to the session. .\r\n",
                        "type": "integer"
                    },
                    "carbonDioxideEmission": {
                        "description": "Number of grams of CO2 per kWh.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "renewableGenerationPercentage": {
                        "description": "Percentage of the power that is created by renewable resources.\r\n",
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 100
                    },
                    "energyFee": {
                        "$ref": "#/definitions/RationalNumberType"
                    },
                    "parkingFee": {
                        "$ref": "#/definitions/RationalNumberType"
                    },
                    "powerRangeStart": {
                        "$ref": "#/definitions/RationalNumberType"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "energyFee",
                    "powerRangeStart"
                ]
            },
            "RationalNumberType": {
                "description": "Part of ISO 15118-20 price schedule.\r\n\r\n",
                "javaType": "RationalNumber",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "exponent": {
                        "description": "The exponent to base 10 (dec)\r\n",
                        "type": "integer"
                    },
                    "value": {
                        "description": "Value which shall be multiplied.\r\n",
                        "type": "integer"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "exponent",
                    "value"
                ]
            },
            "RelativeTimeIntervalType": {
                "javaType": "RelativeTimeInterval",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "start": {
                        "description": "Start of the interval, in seconds from NOW.\r\n",
                        "type": "integer"
                    },
                    "duration": {
                        "description": "Duration of the interval, in seconds.\r\n",
                        "type": "integer"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "start"
                ]
            },
            "SalesTariffEntryType": {
                "javaType": "SalesTariffEntry",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "relativeTimeInterval": {
                        "$ref": "#/definitions/RelativeTimeIntervalType"
                    },
                    "ePriceLevel": {
                        "description": "Defines the price level of this SalesTariffEntry (referring to NumEPriceLevels). Small values for the EPriceLevel represent a cheaper TariffEntry. Large values for the EPriceLevel represent a more expensive TariffEntry.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "consumptionCost": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/ConsumptionCostType"
                        },
                        "minItems": 1,
                        "maxItems": 3
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "relativeTimeInterval"
                ]
            },
            "SalesTariffType": {
                "description": "A SalesTariff provided by a Mobility Operator (EMSP) .\r\nNOTE: This dataType is based on dataTypes from &lt;&lt;ref-ISOIEC15118-2,ISO 15118-2&gt;&gt;.\r\n",
                "javaType": "SalesTariff",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "id": {
                        "description": "SalesTariff identifier used to identify one sales tariff. An SAID remains a unique identifier for one schedule throughout a charging session.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "salesTariffDescription": {
                        "description": "A human readable title/short description of the sales tariff e.g. for HMI display purposes.\r\n",
                        "type": "string",
                        "maxLength": 32
                    },
                    "numEPriceLevels": {
                        "description": "Defines the overall number of distinct price levels used across all provided SalesTariff elements.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "salesTariffEntry": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/SalesTariffEntryType"
                        },
                        "minItems": 1,
                        "maxItems": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "id",
                    "salesTariffEntry"
                ]
            },
            "TaxRuleType": {
                "description": "Part of ISO 15118-20 price schedule.\r\n\r\n",
                "javaType": "TaxRule",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "taxRuleID": {
                        "description": "Id for the tax rule.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "taxRuleName": {
                        "description": "Human readable string to identify the tax rule.\r\n",
                        "type": "string",
                        "maxLength": 100
                    },
                    "taxIncludedInPrice": {
                        "description": "Indicates whether the tax is included in any price or not.\r\n",
                        "type": "boolean"
                    },
                    "appliesToEnergyFee": {
                        "description": "Indicates whether this tax applies to Energy Fees.\r\n",
                        "type": "boolean"
                    },
                    "appliesToParkingFee": {
                        "description": "Indicates whether this tax applies to Parking Fees.\r\n\r\n",
                        "type": "boolean"
                    },
                    "appliesToOverstayFee": {
                        "description": "Indicates whether this tax applies to Overstay Fees.\r\n\r\n",
                        "type": "boolean"
                    },
                    "appliesToMinimumMaximumCost": {
                        "description": "Indicates whether this tax applies to Minimum/Maximum Cost.\r\n\r\n",
                        "type": "boolean"
                    },
                    "taxRate": {
                        "$ref": "#/definitions/RationalNumberType"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "taxRuleID",
                    "appliesToEnergyFee",
                    "appliesToParkingFee",
                    "appliesToOverstayFee",
                    "appliesToMinimumMaximumCost",
                    "taxRate"
                ]
            },
            "V2XFreqWattPointType": {
                "description": "*(2.1)* A point of a frequency-watt curve.\r\n",
                "javaType": "V2XFreqWattPoint",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "frequency": {
                        "description": "Net frequency in Hz.\r\n",
                        "type": "number"
                    },
                    "power": {
                        "description": "Power in W to charge (positive) or discharge (negative) at specified frequency.\r\n",
                        "type": "number"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "frequency",
                    "power"
                ]
            },
            "V2XSignalWattPointType": {
                "description": "*(2.1)* A point of a signal-watt curve.\r\n",
                "javaType": "V2XSignalWattPoint",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "signal": {
                        "description": "Signal value from an AFRRSignalRequest.\r\n",
                        "type": "integer"
                    },
                    "power": {
                        "description": "Power in W to charge (positive) or discharge (negative) at specified frequency.\r\n",
                        "type": "number"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "signal",
                    "power"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "evseId": {
                "description": "Number of the EVSE on which to start the transaction. EvseId SHALL be &gt; 0\r\n",
                "type": "integer",
                "minimum": 1
            },
            "groupIdToken": {
                "$ref": "#/definitions/IdTokenType"
            },
            "idToken": {
                "$ref": "#/definitions/IdTokenType"
            },
            "remoteStartId": {
                "description": "Id given by the server to this start request. The Charging Station will return this in the &lt;&lt;transactioneventrequest, TransactionEventRequest&gt;&gt;, letting the server know which transaction was started for this request. Use to start a transaction.\r\n",
                "type": "integer"
            },
            "chargingProfile": {
                "$ref": "#/definitions/ChargingProfileType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "remoteStartId",
            "idToken"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:RequestStartTransactionResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "RequestStartStopStatusEnumType": {
                "description": "Status indicating whether the Charging Station accepts the request to start a transaction.\r\n",
                "javaType": "RequestStartStopStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Accepted",
                    "Rejected"
                ]
            },
            "StatusInfoType": {
                "description": "Element providing more information about the status.\r\n",
                "javaType": "StatusInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "reasonCode": {
                        "description": "A predefined code for the reason why the status is returned in this response. The string is case-insensitive.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "additionalInfo": {
                        "description": "Additional text to provide detailed information.\r\n",
                        "type": "string",
                        "maxLength": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "reasonCode"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "status": {
                "$ref": "#/definitions/RequestStartStopStatusEnumType"
            },
            "statusInfo": {
                "$ref": "#/definitions/StatusInfoType"
            },
            "transactionId": {
                "description": "When the transaction was already started by the Charging Station before the RequestStartTransactionRequest was received, for example: cable plugged in first. This contains the transactionId of the already started transaction.\r\n",
                "type": "string",
                "maxLength": 36
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "status"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:RequestStopTransactionRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "transactionId": {
                "description": "The identifier of the transaction which the Charging Station is requested to stop.\r\n",
                "type": "string",
                "maxLength": 36
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "transactionId"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:RequestStopTransactionResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "RequestStartStopStatusEnumType": {
                "description": "Status indicating whether Charging Station accepts the request to stop a transaction.\r\n",
                "javaType": "RequestStartStopStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Accepted",
                    "Rejected"
                ]
            },
            "StatusInfoType": {
                "description": "Element providing more information about the status.\r\n",
                "javaType": "StatusInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "reasonCode": {
                        "description": "A predefined code for the reason why the status is returned in this response. The string is case-insensitive.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "additionalInfo": {
                        "description": "Additional text to provide detailed information.\r\n",
                        "type": "string",
                        "maxLength": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "reasonCode"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "status": {
                "$ref": "#/definitions/RequestStartStopStatusEnumType"
            },
            "statusInfo": {
                "$ref": "#/definitions/StatusInfoType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "status"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:ReservationStatusUpdateRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "ReservationUpdateStatusEnumType": {
                "description": "The updated reservation status.\r\n",
                "javaType": "ReservationUpdateStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Expired",
                    "Removed",
                    "NoTransaction"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "reservationId": {
                "description": "The ID of the reservation.\r\n",
                "type": "integer",
                "minimum": 0
            },
            "reservationUpdateStatus": {
                "$ref": "#/definitions/ReservationUpdateStatusEnumType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "reservationId",
            "reservationUpdateStatus"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:ReservationStatusUpdateResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        }
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:ReserveNowRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "AdditionalInfoType": {
                "description": "Contains a case insensitive identifier to use for the authorization and the type of authorization to support multiple forms of identifiers.\r\n",
                "javaType": "AdditionalInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "additionalIdToken": {
                        "description": "*(2.1)* This field specifies the additional IdToken.\r\n",
                        "type": "string",
                        "maxLength": 255
                    },
                    "type": {
                        "description": "_additionalInfo_ can be used to send extra information to CSMS in addition to the regular authorization with _IdToken_. _AdditionalInfo_ contains one or more custom _types_, which need to be agreed upon by all parties involved. When the _type_ is not supported, the CSMS/Charging Station MAY ignore the _additionalInfo_.\r\n\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "additionalIdToken",
                    "type"
                ]
            },
            "IdTokenType": {
                "description": "Contains a case insensitive identifier to use for the authorization and the type of authorization to support multiple forms of identifiers.\r\n",
                "javaType": "IdToken",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "additionalInfo": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/AdditionalInfoType"
                        },
                        "minItems": 1
                    },
                    "idToken": {
                        "description": "*(2.1)* IdToken is case insensitive. Might hold the hidden id of an RFID tag, but can for example also contain a UUID.\r\n",
                        "type": "string",
                        "maxLength": 255
                    },
                    "type": {
                        "description": "*(2.1)* Enumeration of possible idToken types. Values defined in Appendix as IdTokenEnumStringType.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "idToken",
                    "type"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "id": {
                "description": "Id of reservation.\r\n",
                "type": "integer",
                "minimum": 0
            },
            "expiryDateTime": {
                "description": "Date and time at which the reservation expires.\r\n",
                "type": "string",
                "format": "date-time"
            },
            "connectorType": {
                "description": "This field specifies the connector type. Values defined in Appendix as ConnectorEnumStringType.\r\n",
                "type": "string",
                "maxLength": 20
            },
            "idToken": {
                "$ref": "#/definitions/IdTokenType"
            },
            "evseId": {
                "description": "This contains ID of the evse to be reserved.\r\n",
                "type": "integer",
                "minimum": 0
            },
            "groupIdToken": {
                "$ref": "#/definitions/IdTokenType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "id",
            "expiryDateTime",
            "idToken"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:ReserveNowResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "ReserveNowStatusEnumType": {
                "description": "This indicates the success or failure of the reservation.\r\n",
                "javaType": "ReserveNowStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Accepted",
                    "Faulted",
                    "Occupied",
                    "Rejected",
                    "Unavailable"
                ]
            },
            "StatusInfoType": {
                "description": "Element providing more information about the status.\r\n",
                "javaType": "StatusInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "reasonCode": {
                        "description": "A predefined code for the reason why the status is returned in this response. The string is case-insensitive.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "additionalInfo": {
                        "description": "Additional text to provide detailed information.\r\n",
                        "type": "string",
                        "maxLength": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "reasonCode"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "status": {
                "$ref": "#/definitions/ReserveNowStatusEnumType"
            },
            "statusInfo": {
                "$ref": "#/definitions/StatusInfoType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "status"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:ResetRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "ResetEnumType": {
                "description": "This contains the type of reset that the Charging Station or EVSE should perform.\r\n",
                "javaType": "ResetEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Immediate",
                    "OnIdle",
                    "ImmediateAndResume"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "type": {
                "$ref": "#/definitions/ResetEnumType"
            },
            "evseId": {
                "description": "This contains the ID of a specific EVSE that needs to be reset, instead of the entire Charging Station.\r\n",
                "type": "integer",
                "minimum": 0
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "type"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:ResetResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "ResetStatusEnumType": {
                "description": "This indicates whether the Charging Station is able to perform the reset.\r\n",
                "javaType": "ResetStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Accepted",
                    "Rejected",
                    "Scheduled"
                ]
            },
            "StatusInfoType": {
                "description": "Element providing more information about the status.\r\n",
                "javaType": "StatusInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "reasonCode": {
                        "description": "A predefined code for the reason why the status is returned in this response. The string is case-insensitive.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "additionalInfo": {
                        "description": "Additional text to provide detailed information.\r\n",
                        "type": "string",
                        "maxLength": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "reasonCode"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "status": {
                "$ref": "#/definitions/ResetStatusEnumType"
            },
            "statusInfo": {
                "$ref": "#/definitions/StatusInfoType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "status"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:SecurityEventNotificationRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "type": {
                "description": "Type of the security event. This value should be taken from the Security events list.\r\n",
                "type": "string",
                "maxLength": 50
            },
            "timestamp": {
                "description": "Date and time at which the event occurred.\r\n",
                "type": "string",
                "format": "date-time"
            },
            "techInfo": {
                "description": "Additional information about the occurred security event.\r\n",
                "type": "string",
                "maxLength": 255
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "type",
            "timestamp"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:SecurityEventNotificationResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        }
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:SendLocalListRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "AuthorizationStatusEnumType": {
                "description": "Current status of the ID Token.\r\n",
                "javaType": "AuthorizationStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Accepted",
                    "Blocked",
                    "ConcurrentTx",
                    "Expired",
                    "Invalid",
                    "NoCredit",
                    "NotAllowedTypeEVSE",
                    "NotAtThisLocation",
                    "NotAtThisTime",
                    "Unknown"
                ]
            },
            "MessageFormatEnumType": {
                "description": "Format of the message.\r\n",
                "javaType": "MessageFormatEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "ASCII",
                    "HTML",
                    "URI",
                    "UTF8",
                    "QRCODE"
                ]
            },
            "UpdateEnumType": {
                "description": "This contains the type of update (full or differential) of this request.\r\n",
                "javaType": "UpdateEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Differential",
                    "Full"
                ]
            },
            "AdditionalInfoType": {
                "description": "Contains a case insensitive identifier to use for the authorization and the type of authorization to support multiple forms of identifiers.\r\n",
                "javaType": "AdditionalInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "additionalIdToken": {
                        "description": "*(2.1)* This field specifies the additional IdToken.\r\n",
                        "type": "string",
                        "maxLength": 255
                    },
                    "type": {
                        "description": "_additionalInfo_ can be used to send extra information to CSMS in addition to the regular authorization with _IdToken_. _AdditionalInfo_ contains one or more custom _types_, which need to be agreed upon by all parties involved. When the _type_ is not supported, the CSMS/Charging Station MAY ignore the _additionalInfo_.\r\n\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "additionalIdToken",
                    "type"
                ]
            },
            "AuthorizationData": {
                "description": "Contains the identifier to use for authorization.\r\n",
                "javaType": "AuthorizationData",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "idToken": {
                        "$ref": "#/definitions/IdTokenType"
                    },
                    "idTokenInfo": {
                        "$ref": "#/definitions/IdTokenInfoType"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "idToken"
                ]
            },
            "IdTokenInfoType": {
                "description": "Contains status information about an identifier.\r\nIt is advised to not stop charging for a token that expires during charging, as ExpiryDate is only used for caching purposes. If ExpiryDate is not given, the status has no end date.\r\n",
                "javaType": "IdTokenInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "status": {
                        "$ref": "#/definitions/AuthorizationStatusEnumType"
                    },
                    "cacheExpiryDateTime": {
                        "description": "Date and Time after which the token must be considered invalid.\r\n",
                        "type": "string",
                        "format": "date-time"
                    },
                    "chargingPriority": {
                        "description": "Priority from a business point of view. Default priority is 0, The range is from -9 to 9. Higher values indicate a higher priority. The chargingPriority in &lt;&lt;transactioneventresponse,TransactionEventResponse&gt;&gt; overrules this one. \r\n",
                        "type": "integer"
                    },
                    "groupIdToken": {
                        "$ref": "#/definitions/IdTokenType"
                    },
                    "language1": {
                        "description": "Preferred user interface language of identifier user. Contains a language code as defined in &lt;&lt;ref-RFC5646,[RFC5646]&gt;&gt;.\r\n\r\n",
                        "type": "string",
                        "maxLength": 8
                    },
                    "language2": {
                        "description": "Second preferred user interface language of identifier user. Don’t use when language1 is omitted, has to be different from language1. Contains a language code as defined in &lt;&lt;ref-RFC5646,[RFC5646]&gt;&gt;.\r\n",
                        "type": "string",
                        "maxLength": 8
                    },
                    "evseId": {
                        "description": "Only used when the IdToken is only valid for one or more specific EVSEs, not for the entire Charging Station.\r\n\r\n",
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "type": "integer",
                            "minimum": 0
                        },
                        "minItems": 1
                    },
                    "personalMessage": {
                        "$ref": "#/definitions/MessageContentType"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "status"
                ]
            },
            "IdTokenType": {
                "description": "Contains a case insensitive identifier to use for the authorization and the type of authorization to support multiple forms of identifiers.\r\n",
                "javaType": "IdToken",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "additionalInfo": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/AdditionalInfoType"
                        },
                        "minItems": 1
                    },
                    "idToken": {
                        "description": "*(2.1)* IdToken is case insensitive. Might hold the hidden id of an RFID tag, but can for example also contain a UUID.\r\n",
                        "type": "string",
                        "maxLength": 255
                    },
                    "type": {
                        "description": "*(2.1)* Enumeration of possible idToken types. Values defined in Appendix as IdTokenEnumStringType.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "idToken",
                    "type"
                ]
            },
            "MessageContentType": {
                "description": "Contains message details, for a message to be displayed on a Charging Station.\r\n\r\n",
                "javaType": "MessageContent",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "format": {
                        "$ref": "#/definitions/MessageFormatEnumType"
                    },
                    "language": {
                        "description": "Message language identifier. Contains a language code as defined in &lt;&lt;ref-RFC5646,[RFC5646]&gt;&gt;.\r\n",
                        "type": "string",
                        "maxLength": 8
                    },
                    "content": {
                        "description": "*(2.1)* Required. Message contents. +\r\nMaximum length supported by Charging Station is given in OCPPCommCtrlr.FieldLength[\"MessageContentType.content\"].\r\n    Maximum length defaults to 1024.\r\n\r\n",
                        "type": "string",
                        "maxLength": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "format",
                    "content"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "localAuthorizationList": {
                "type": "array",
                "additionalItems": false,
                "items": {
                    "$ref": "#/definitions/AuthorizationData"
                },
                "minItems": 1
            },
            "versionNumber": {
                "description": "In case of a full update this is the version number of the full list. In case of a differential update it is the version number of the list after the update has been applied.\r\n",
                "type": "integer"
            },
            "updateType": {
                "$ref": "#/definitions/UpdateEnumType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "versionNumber",
            "updateType"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:SendLocalListResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "SendLocalListStatusEnumType": {
                "description": "This indicates whether the Charging Station has successfully received and applied the update of the Local Authorization List.\r\n",
                "javaType": "SendLocalListStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Accepted",
                    "Failed",
                    "VersionMismatch"
                ]
            },
            "StatusInfoType": {
                "description": "Element providing more information about the status.\r\n",
                "javaType": "StatusInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "reasonCode": {
                        "description": "A predefined code for the reason why the status is returned in this response. The string is case-insensitive.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "additionalInfo": {
                        "description": "Additional text to provide detailed information.\r\n",
                        "type": "string",
                        "maxLength": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "reasonCode"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "status": {
                "$ref": "#/definitions/SendLocalListStatusEnumType"
            },
            "statusInfo": {
                "$ref": "#/definitions/StatusInfoType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "status"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:SetChargingProfileRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "ChargingProfileKindEnumType": {
                "description": "Indicates the kind of schedule.\r\n",
                "javaType": "ChargingProfileKindEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Absolute",
                    "Recurring",
                    "Relative",
                    "Dynamic"
                ]
            },
            "ChargingProfilePurposeEnumType": {
                "description": "Defines the purpose of the schedule transferred by this profile\r\n",
                "javaType": "ChargingProfilePurposeEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "ChargingStationExternalConstraints",
                    "ChargingStationMaxProfile",
                    "TxDefaultProfile",
                    "TxProfile",
                    "PriorityCharging",
                    "LocalGeneration"
                ]
            },
            "ChargingRateUnitEnumType": {
                "description": "The unit of measure in which limits and setpoints are expressed.\r\n",
                "javaType": "ChargingRateUnitEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "W",
                    "A"
                ]
            },
            "CostKindEnumType": {
                "description": "The kind of cost referred to in the message element amount\r\n",
                "javaType": "CostKindEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "CarbonDioxideEmission",
                    "RelativePricePercentage",
                    "RenewableGenerationPercentage"
                ]
            },
            "OperationModeEnumType": {
                "description": "*(2.1)* Charging operation mode to use during this time interval. When absent defaults to `ChargingOnly`.\r\n",
                "javaType": "OperationModeEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Idle",
                    "ChargingOnly",
                    "CentralSetpoint",
                    "ExternalSetpoint",
                    "ExternalLimits",
                    "CentralFrequency",
                    "LocalFrequency",
                    "LocalLoadBalancing"
                ]
            },
            "RecurrencyKindEnumType": {
                "description": "Indicates the start point of a recurrence.\r\n",
                "javaType": "RecurrencyKindEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Daily",
                    "Weekly"
                ]
            },
            "AbsolutePriceScheduleType": {
                "description": "The AbsolutePriceScheduleType is modeled after the same type that is defined in ISO 15118-20, such that if it is supplied by an EMSP as a signed EXI message, the conversion from EXI to JSON (in OCPP) and back to EXI (for ISO 15118-20) does not change the digest and therefore does not invalidate the signature.\r\n\r\nimage::images/AbsolutePriceSchedule-Simple.png[]\r\n\r\n",
                "javaType": "AbsolutePriceSchedule",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "timeAnchor": {
                        "description": "Starting point of price schedule.\r\n",
                        "type": "string",
                        "format": "date-time"
                    },
                    "priceScheduleID": {
                        "description": "Unique ID of price schedule\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "priceScheduleDescription": {
                        "description": "Description of the price schedule.\r\n",
                        "type": "string",
                        "maxLength": 160
                    },
                    "currency": {
                        "description": "Currency according to ISO 4217.\r\n",
                        "type": "string",
                        "maxLength": 3
                    },
                    "language": {
                        "description": "String that indicates what language is used for the human readable strings in the price schedule. Based on ISO 639.\r\n",
                        "type": "string",
                        "maxLength": 8
                    },
                    "priceAlgorithm": {
                        "description": "A string in URN notation which shall uniquely identify an algorithm that defines how to compute an energy fee sum for a specific power profile based on the EnergyFee information from the PriceRule elements.\r\n",
                        "type": "string",
                        "maxLength": 2000
                    },
                    "minimumCost": {
                        "$ref": "#/definitions/RationalNumberType"
                    },
                    "maximumCost": {
                        "$ref": "#/definitions/RationalNumberType"
                    },
                    "priceRuleStacks": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/PriceRuleStackType"
                        },
                        "minItems": 1,
                        "maxItems": 1024
                    },
                    "taxRules": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/TaxRuleType"
                        },
                        "minItems": 1,
                        "maxItems": 10
                    },
                    "overstayRuleList": {
                        "$ref": "#/definitions/OverstayRuleListType"
                    },
                    "additionalSelectedServices": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/AdditionalSelectedServicesType"
                        },
                        "minItems": 1,
                        "maxItems": 5
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "timeAnchor",
                    "priceScheduleID",
                    "currency",
                    "language",
                    "priceAlgorithm",
                    "priceRuleStacks"
                ]
            },
            "AdditionalSelectedServicesType": {
                "description": "Part of ISO 15118-20 price schedule.\r\n\r\n",
                "javaType": "AdditionalSelectedServices",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "serviceFee": {
                        "$ref": "#/definitions/RationalNumberType"
                    },
                    "serviceName": {
                        "description": "Human readable string to identify this service.\r\n",
                        "type": "string",
                        "maxLength": 80
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "serviceName",
                    "serviceFee"
                ]
            },
            "ChargingProfileType": {
                "description": "A ChargingProfile consists of 1 to 3 ChargingSchedules with a list of ChargingSchedulePeriods, describing the amount of power or current that can be delivered per time interval.\r\n\r\nimage::images/ChargingProfile-Simple.png[]\r\n\r\n",
                "javaType": "ChargingProfile",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "id": {
                        "description": "Id of ChargingProfile. Unique within charging station. Id can have a negative value. This is useful to distinguish charging profiles from an external actor (external constraints) from charging profiles received from CSMS.\r\n",
                        "type": "integer"
                    },
                    "stackLevel": {
                        "description": "Value determining level in hierarchy stack of profiles. Higher values have precedence over lower values. Lowest level is 0.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "chargingProfilePurpose": {
                        "$ref": "#/definitions/ChargingProfilePurposeEnumType"
                    },
                    "chargingProfileKind": {
                        "$ref": "#/definitions/ChargingProfileKindEnumType"
                    },
                    "recurrencyKind": {
                        "$ref": "#/definitions/RecurrencyKindEnumType"
                    },
                    "validFrom": {
                        "description": "Point in time at which the profile starts to be valid. If absent, the profile is valid as soon as it is received by the Charging Station.\r\n",
                        "type": "string",
                        "format": "date-time"
                    },
                    "validTo": {
                        "description": "Point in time at which the profile stops to be valid. If absent, the profile is valid until it is replaced by another profile.\r\n",
                        "type": "string",
                        "format": "date-time"
                    },
                    "transactionId": {
                        "description": "SHALL only be included if ChargingProfilePurpose is set to TxProfile in a SetChargingProfileRequest. The transactionId is used to match the profile to a specific transaction.\r\n",
                        "type": "string",
                        "maxLength": 36
                    },
                    "maxOfflineDuration": {
                        "description": "*(2.1)* Period in seconds that this charging profile remains valid after the Charging Station has gone offline. After this period the charging profile becomes invalid for as long as it is offline and the Charging Station reverts back to a valid profile with a lower stack level. \r\nIf _invalidAfterOfflineDuration_ is true, then this charging profile will become permanently invalid.\r\nA value of 0 means that the charging profile is immediately invalid while offline. When the field is absent, then  no timeout applies and the charging profile remains valid when offline.\r\n",
                        "type": "integer"
                    },
                    "chargingSchedule": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/ChargingScheduleType"
                        },
                        "minItems": 1,
                        "maxItems": 3
                    },
                    "invalidAfterOfflineDuration": {
                        "description": "*(2.1)* When set to true this charging profile will not be valid anymore after being offline for more than _maxOfflineDuration_. +\r\n    When absent defaults to false.\r\n",
                        "type": "boolean"
                    },
                    "dynUpdateInterval": {
                        "description": "*(2.1)*  Interval in seconds after receipt of last update, when to request a profile update by sending a PullDynamicScheduleUpdateRequest message.\r\n    A value of 0 or no value means that no update interval applies. +\r\n    Only relevant in a dynamic charging profile.\r\n\r\n",
                        "type": "integer"
                    },
                    "dynUpdateTime": {
                        "description": "*(2.1)* Time at which limits or setpoints in this charging profile were last updated by a PullDynamicScheduleUpdateRequest or UpdateDynamicScheduleRequest or by an external actor. +\r\n    Only relevant in a dynamic charging profile.\r\n\r\n",
                        "type": "string",
                        "format": "date-time"
                    },
                    "priceScheduleSignature": {
                        "description": "*(2.1)* ISO 15118-20 signature for all price schedules in _chargingSchedules_. +\r\nNote: for 256-bit elliptic curves (like secp256k1) the ECDSA signature is 512 bits (64 bytes) and for 521-bit curves (like secp521r1) the signature is 1042 bits. This equals 131 bytes, which can be encoded as base64 in 176 bytes.\r\n",
                        "type": "string",
                        "maxLength": 256
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "id",
                    "stackLevel",
                    "chargingProfilePurpose",
                    "chargingProfileKind",
                    "chargingSchedule"
                ]
            },
            "ChargingSchedulePeriodType": {
                "description": "Charging schedule period structure defines a time period in a charging schedule. It is used in: CompositeScheduleType and in ChargingScheduleType. When used in a NotifyEVChargingScheduleRequest only _startPeriod_, _limit_, _limit_L2_, _limit_L3_ are relevant.\r\n",
                "javaType": "ChargingSchedulePeriod",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "startPeriod": {
                        "description": "Start of the period, in seconds from the start of schedule. The value of StartPeriod also defines the stop time of the previous period.\r\n",
                        "type": "integer"
                    },
                    "limit": {
                        "description": "Optional only when not required by the _operationMode_, as in CentralSetpoint, ExternalSetpoint, ExternalLimits, LocalFrequency,  LocalLoadBalancing. +\r\nCharging rate limit during the schedule period, in the applicable _chargingRateUnit_. \r\nThis SHOULD be a non-negative value; a negative value is only supported for backwards compatibility with older systems that use a negative value to specify a discharging limit.\r\nWhen using _chargingRateUnit_ = `W`, this field represents the sum of the power of all phases, unless values are provided for L2 and L3, in which case this field represents phase L1.\r\n",
                        "type": "number"
                    },
                    "limit_L2": {
                        "description": "*(2.1)* Charging rate limit on phase L2  in the applicable _chargingRateUnit_. \r\n",
                        "type": "number"
                    },
                    "limit_L3": {
                        "description": "*(2.1)* Charging rate limit on phase L3  in the applicable _chargingRateUnit_. \r\n",
                        "type": "number"
                    },
                    "numberPhases": {
                        "description": "The number of phases that can be used for charging. +\r\nFor a DC EVSE this field should be omitted. +\r\nFor an AC EVSE a default value of _numberPhases_ = 3 will be assumed if the field is absent.\r\n",
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 3
                    },
                    "phaseToUse": {
                        "description": "Values: 1..3, Used if numberPhases=1 and if the EVSE is capable of switching the phase connected to the EV, i.e. ACPhaseSwitchingSupported is defined and true. It’s not allowed unless both conditions above are true. If both conditions are true, and phaseToUse is omitted, the Charging Station / EVSE will make the selection on its own.\r\n\r\n",
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 3
                    },
                    "dischargeLimit": {
                        "description": "*(2.1)* Limit in _chargingRateUnit_ that the EV is allowed to discharge with. Note, these are negative values in order to be consistent with _setpoint_, which can be positive and negative.  +\r\nFor AC this field represents the sum of all phases, unless values are provided for L2 and L3, in which case this field represents phase L1.\r\n",
                        "type": "number",
                        "maximum": 0
                    },
                    "dischargeLimit_L2": {
                        "description": "*(2.1)* Limit in _chargingRateUnit_ on phase L2 that the EV is allowed to discharge with. \r\n",
                        "type": "number",
                        "maximum": 0
                    },
                    "dischargeLimit_L3": {
                        "description": "*(2.1)* Limit in _chargingRateUnit_ on phase L3 that the EV is allowed to discharge with. \r\n",
                        "type": "number",
                        "maximum": 0
                    },
                    "setpoint": {
                        "description": "*(2.1)* Setpoint in _chargingRateUnit_ that the EV should follow as close as possible. Use negative values for discharging. +\r\nWhen a limit and/or _dischargeLimit_ are given the overshoot when following _setpoint_ must remain within these values.\r\nThis field represents the sum of all phases, unless values are provided for L2 and L3, in which case this field represents phase L1.\r\n",
                        "type": "number"
                    },
                    "setpoint_L2": {
                        "description": "*(2.1)* Setpoint in _chargingRateUnit_ that the EV should follow on phase L2 as close as possible.\r\n",
                        "type": "number"
                    },
                    "setpoint_L3": {
                        "description": "*(2.1)* Setpoint in _chargingRateUnit_ that the EV should follow on phase L3 as close as possible. \r\n",
                        "type": "number"
                    },
                    "setpointReactive": {
                        "description": "*(2.1)* Setpoint for reactive power (or current) in _chargingRateUnit_ that the EV should follow as closely as possible. Positive values for inductive, negative for capacitive reactive power or current.  +\r\nThis field represents the sum of all phases, unless values are provided for L2 and L3, in which case this field represents phase L1.\r\n",
                        "type": "number"
                    },
                    "setpointReactive_L2": {
                        "description": "*(2.1)* Setpoint for reactive power (or current) in _chargingRateUnit_ that the EV should follow on phase L2 as closely as possible. \r\n",
                        "type": "number"
                    },
                    "setpointReactive_L3": {
                        "description": "*(2.1)* Setpoint for reactive power (or current) in _chargingRateUnit_ that the EV should follow on phase L3 as closely as possible. \r\n",
                        "type": "number"
                    },
                    "preconditioningRequest": {
                        "description": "*(2.1)* If  true, the EV should attempt to keep the BMS preconditioned for this time interval.\r\n",
                        "type": "boolean"
                    },
                    "evseSleep": {
                        "description": "*(2.1)* If true, the EVSE must turn off power electronics/modules associated with this transaction. Default value when absent is false.\r\n",
                        "type": "boolean"
                    },
                    "v2xBaseline": {
                        "description": "*(2.1)* Power value that, when present, is used as a baseline on top of which values from _v2xFreqWattCurve_ and _v2xSignalWattCurve_ are added.\r\n\r\n",
                        "type": "number"
                    },
                    "operationMode": {
                        "$ref": "#/definitions/OperationModeEnumType"
                    },
                    "v2xFreqWattCurve": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/V2XFreqWattPointType"
                        },
                        "minItems": 1,
                        "maxItems": 20
                    },
                    "v2xSignalWattCurve": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/V2XSignalWattPointType"
                        },
                        "minItems": 1,
                        "maxItems": 20
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "startPeriod"
                ]
            },
            "ChargingScheduleType": {
                "description": "Charging schedule structure defines a list of charging periods, as used in: NotifyEVChargingScheduleRequest and ChargingProfileType. When used in a NotifyEVChargingScheduleRequest only _duration_ and _chargingSchedulePeriod_ are relevant and _chargingRateUnit_ must be 'W'. +\r\nAn ISO 15118-20 session may provide either an _absolutePriceSchedule_ or a _priceLevelSchedule_. An ISO 15118-2 session can only provide a_salesTariff_ element. The field _digestValue_ is used when price schedule or sales tariff are signed.\r\n\r\nimage::images/ChargingSchedule-Simple.png[]\r\n\r\n\r\n",
                "javaType": "ChargingSchedule",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "limitAtSoC": {
                        "$ref": "#/definitions/LimitAtSoCType"
                    },
                    "startSchedule": {
                        "description": "Starting point of an absolute schedule or recurring schedule.\r\n",
                        "type": "string",
                        "format": "date-time"
                    },
                    "duration": {
                        "description": "Duration of the charging schedule in seconds. If the duration is left empty, the last period will continue indefinitely or until end of the transaction in case startSchedule is absent.\r\n",
                        "type": "integer"
                    },
                    "chargingRateUnit": {
                        "$ref": "#/definitions/ChargingRateUnitEnumType"
                    },
                    "minChargingRate": {
                        "description": "Minimum charging rate supported by the EV. The unit of measure is defined by the chargingRateUnit. This parameter is intended to be used by a local smart charging algorithm to optimize the power allocation for in the case a charging process is inefficient at lower charging rates. \r\n",
                        "type": "number"
                    },
                    "powerTolerance": {
                        "description": "*(2.1)* Power tolerance when following EVPowerProfile.\r\n\r\n",
                        "type": "number"
                    },
                    "signatureId": {
                        "description": "*(2.1)* Id of this element for referencing in a signature.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "digestValue": {
                        "description": "*(2.1)* Base64 encoded hash (SHA256 for ISO 15118-2, SHA512 for ISO 15118-20) of the EXI price schedule element. Used in signature.\r\n",
                        "type": "string",
                        "maxLength": 88
                    },
                    "useLocalTime": {
                        "description": "*(2.1)* Defaults to false. When true, disregard time zone offset in dateTime fields of  _ChargingScheduleType_ and use unqualified local time at Charging Station instead.\r\n This allows the same `Absolute` or `Recurring` charging profile to be used in both summer and winter time.\r\n\r\n",
                        "type": "boolean"
                    },
                    "chargingSchedulePeriod": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/ChargingSchedulePeriodType"
                        },
                        "minItems": 1,
                        "maxItems": 1024
                    },
                    "randomizedDelay": {
                        "description": "*(2.1)* Defaults to 0. When _randomizedDelay_ not equals zero, then the start of each &lt;&lt;cmn_chargingscheduleperiodtype,ChargingSchedulePeriodType&gt;&gt; is delayed by a randomly chosen number of seconds between 0 and _randomizedDelay_.  Only allowed for TxProfile and TxDefaultProfile.\r\n\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "salesTariff": {
                        "$ref": "#/definitions/SalesTariffType"
                    },
                    "absolutePriceSchedule": {
                        "$ref": "#/definitions/AbsolutePriceScheduleType"
                    },
                    "priceLevelSchedule": {
                        "$ref": "#/definitions/PriceLevelScheduleType"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "id",
                    "chargingRateUnit",
                    "chargingSchedulePeriod"
                ]
            },
            "ConsumptionCostType": {
                "javaType": "ConsumptionCost",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "startValue": {
                        "description": "The lowest level of consumption that defines the starting point of this consumption block. The block interval extends to the start of the next interval.\r\n",
                        "type": "number"
                    },
                    "cost": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/CostType"
                        },
                        "minItems": 1,
                        "maxItems": 3
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "startValue",
                    "cost"
                ]
            },
            "CostType": {
                "javaType": "Cost",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "costKind": {
                        "$ref": "#/definitions/CostKindEnumType"
                    },
                    "amount": {
                        "description": "The estimated or actual cost per kWh\r\n",
                        "type": "integer"
                    },
                    "amountMultiplier": {
                        "description": "Values: -3..3, The amountMultiplier defines the exponent to base 10 (dec). The final value is determined by: amount * 10 ^ amountMultiplier\r\n",
                        "type": "integer"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "costKind",
                    "amount"
                ]
            },
            "LimitAtSoCType": {
                "javaType": "LimitAtSoC",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "soc": {
                        "description": "The SoC value beyond which the charging rate limit should be applied.\r\n",
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 100
                    },
                    "limit": {
                        "description": "Charging rate limit beyond the SoC value.\r\nThe unit is defined by _chargingSchedule.chargingRateUnit_.\r\n\r\n",
                        "type": "number"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "soc",
                    "limit"
                ]
            },
            "OverstayRuleListType": {
                "description": "Part of ISO 15118-20 price schedule.\r\n\r\n",
                "javaType": "OverstayRuleList",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "overstayPowerThreshold": {
                        "$ref": "#/definitions/RationalNumberType"
                    },
                    "overstayRule": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/OverstayRuleType"
                        },
                        "minItems": 1,
                        "maxItems": 5
                    },
                    "overstayTimeThreshold": {
                        "description": "Time till overstay is applied in seconds.\r\n",
                        "type": "integer"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "overstayRule"
                ]
            },
            "OverstayRuleType": {
                "description": "Part of ISO 15118-20 price schedule.\r\n\r\n",
                "javaType": "OverstayRule",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "overstayFee": {
                        "$ref": "#/definitions/RationalNumberType"
                    },
                    "overstayRuleDescription": {
                        "description": "Human readable string to identify the overstay rule.\r\n",
                        "type": "string",
                        "maxLength": 32
                    },
                    "startTime": {
                        "description": "Time in seconds after trigger of the parent Overstay Rules for this particular fee to apply.\r\n",
                        "type": "integer"
                    },
                    "overstayFeePeriod": {
                        "description": "Time till overstay will be reapplied\r\n",
                        "type": "integer"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "startTime",
                    "overstayFeePeriod",
                    "overstayFee"
                ]
            },
            "PriceLevelScheduleEntryType": {
                "description": "Part of ISO 15118-20 price schedule.\r\n",
                "javaType": "PriceLevelScheduleEntry",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "duration": {
                        "description": "The amount of seconds that define the duration of this given PriceLevelScheduleEntry.\r\n",
                        "type": "integer"
                    },
                    "priceLevel": {
                        "description": "Defines the price level of this PriceLevelScheduleEntry (referring to NumberOfPriceLevels). Small values for the PriceLevel represent a cheaper PriceLevelScheduleEntry. Large values for the PriceLevel represent a more expensive PriceLevelScheduleEntry.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "duration",
                    "priceLevel"
                ]
            },
            "PriceLevelScheduleType": {
                "description": "The PriceLevelScheduleType is modeled after the same type that is defined in ISO 15118-20, such that if it is supplied by an EMSP as a signed EXI message, the conversion from EXI to JSON (in OCPP) and back to EXI (for ISO 15118-20) does not change the digest and therefore does not invalidate the signature.\r\n",
                "javaType": "PriceLevelSchedule",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "priceLevelScheduleEntries": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/PriceLevelScheduleEntryType"
                        },
                        "minItems": 1,
                        "maxItems": 100
                    },
                    "timeAnchor": {
                        "description": "Starting point of this price schedule.\r\n",
                        "type": "string",
                        "format": "date-time"
                    },
                    "priceScheduleId": {
                        "description": "Unique ID of this price schedule.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "priceScheduleDescription": {
                        "description": "Description of the price schedule.\r\n",
                        "type": "string",
                        "maxLength": 32
                    },
                    "numberOfPriceLevels": {
                        "description": "Defines the overall number of distinct price level elements used across all PriceLevelSchedules.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "timeAnchor",
                    "priceScheduleId",
                    "numberOfPriceLevels",
                    "priceLevelScheduleEntries"
                ]
            },
            "PriceRuleStackType": {
                "description": "Part of ISO 15118-20 price schedule.\r\n",
                "javaType": "PriceRuleStack",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "duration": {
                        "description": "Duration of the stack of price rules.  he amount of seconds that define the duration of the given PriceRule(s).\r\n",
                        "type": "integer"
                    },
                    "priceRule": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/PriceRuleType"
                        },
                        "minItems": 1,
                        "maxItems": 8
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "duration",
                    "priceRule"
                ]
            },
            "PriceRuleType": {
                "description": "Part of ISO 15118-20 price schedule.\r\n\r\n",
                "javaType": "PriceRule",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "parkingFeePeriod": {
                        "description": "The duration of the parking fee period (in seconds).\r\nWhen the time enters into a ParkingFeePeriod, the ParkingFee will apply to the session. .\r\n",
                        "type": "integer"
                    },
                    "carbonDioxideEmission": {
                        "description": "Number of grams of CO2 per kWh.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "renewableGenerationPercentage": {
                        "description": "Percentage of the power that is created by renewable resources.\r\n",
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 100
                    },
                    "energyFee": {
                        "$ref": "#/definitions/RationalNumberType"
                    },
                    "parkingFee": {
                        "$ref": "#/definitions/RationalNumberType"
                    },
                    "powerRangeStart": {
                        "$ref": "#/definitions/RationalNumberType"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "energyFee",
                    "powerRangeStart"
                ]
            },
            "RationalNumberType": {
                "description": "Part of ISO 15118-20 price schedule.\r\n\r\n",
                "javaType": "RationalNumber",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "exponent": {
                        "description": "The exponent to base 10 (dec)\r\n",
                        "type": "integer"
                    },
                    "value": {
                        "description": "Value which shall be multiplied.\r\n",
                        "type": "integer"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "exponent",
                    "value"
                ]
            },
            "RelativeTimeIntervalType": {
                "javaType": "RelativeTimeInterval",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "start": {
                        "description": "Start of the interval, in seconds from NOW.\r\n",
                        "type": "integer"
                    },
                    "duration": {
                        "description": "Duration of the interval, in seconds.\r\n",
                        "type": "integer"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "start"
                ]
            },
            "SalesTariffEntryType": {
                "javaType": "SalesTariffEntry",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "relativeTimeInterval": {
                        "$ref": "#/definitions/RelativeTimeIntervalType"
                    },
                    "ePriceLevel": {
                        "description": "Defines the price level of this SalesTariffEntry (referring to NumEPriceLevels). Small values for the EPriceLevel represent a cheaper TariffEntry. Large values for the EPriceLevel represent a more expensive TariffEntry.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "consumptionCost": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/ConsumptionCostType"
                        },
                        "minItems": 1,
                        "maxItems": 3
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "relativeTimeInterval"
                ]
            },
            "SalesTariffType": {
                "description": "A SalesTariff provided by a Mobility Operator (EMSP) .\r\nNOTE: This dataType is based on dataTypes from &lt;&lt;ref-ISOIEC15118-2,ISO 15118-2&gt;&gt;.\r\n",
                "javaType": "SalesTariff",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "id": {
                        "description": "SalesTariff identifier used to identify one sales tariff. An SAID remains a unique identifier for one schedule throughout a charging session.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "salesTariffDescription": {
                        "description": "A human readable title/short description of the sales tariff e.g. for HMI display purposes.\r\n",
                        "type": "string",
                        "maxLength": 32
                    },
                    "numEPriceLevels": {
                        "description": "Defines the overall number of distinct price levels used across all provided SalesTariff elements.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "salesTariffEntry": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/SalesTariffEntryType"
                        },
                        "minItems": 1,
                        "maxItems": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "id",
                    "salesTariffEntry"
                ]
            },
            "TaxRuleType": {
                "description": "Part of ISO 15118-20 price schedule.\r\n\r\n",
                "javaType": "TaxRule",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "taxRuleID": {
                        "description": "Id for the tax rule.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "taxRuleName": {
                        "description": "Human readable string to identify the tax rule.\r\n",
                        "type": "string",
                        "maxLength": 100
                    },
                    "taxIncludedInPrice": {
                        "description": "Indicates whether the tax is included in any price or not.\r\n",
                        "type": "boolean"
                    },
                    "appliesToEnergyFee": {
                        "description": "Indicates whether this tax applies to Energy Fees.\r\n",
                        "type": "boolean"
                    },
                    "appliesToParkingFee": {
                        "description": "Indicates whether this tax applies to Parking Fees.\r\n\r\n",
                        "type": "boolean"
                    },
                    "appliesToOverstayFee": {
                        "description": "Indicates whether this tax applies to Overstay Fees.\r\n\r\n",
                        "type": "boolean"
                    },
                    "appliesToMinimumMaximumCost": {
                        "description": "Indicates whether this tax applies to Minimum/Maximum Cost.\r\n\r\n",
                        "type": "boolean"
                    },
                    "taxRate": {
                        "$ref": "#/definitions/RationalNumberType"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "taxRuleID",
                    "appliesToEnergyFee",
                    "appliesToParkingFee",
                    "appliesToOverstayFee",
                    "appliesToMinimumMaximumCost",
                    "taxRate"
                ]
            },
            "V2XFreqWattPointType": {
                "description": "*(2.1)* A point of a frequency-watt curve.\r\n",
                "javaType": "V2XFreqWattPoint",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "frequency": {
                        "description": "Net frequency in Hz.\r\n",
                        "type": "number"
                    },
                    "power": {
                        "description": "Power in W to charge (positive) or discharge (negative) at specified frequency.\r\n",
                        "type": "number"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "frequency",
                    "power"
                ]
            },
            "V2XSignalWattPointType": {
                "description": "*(2.1)* A point of a signal-watt curve.\r\n",
                "javaType": "V2XSignalWattPoint",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "signal": {
                        "description": "Signal value from an AFRRSignalRequest.\r\n",
                        "type": "integer"
                    },
                    "power": {
                        "description": "Power in W to charge (positive) or discharge (negative) at specified frequency.\r\n",
                        "type": "number"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "signal",
                    "power"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "evseId": {
                "description": "For TxDefaultProfile an evseId=0 applies the profile to each individual evse. For ChargingStationMaxProfile and ChargingStationExternalConstraints an evseId=0 contains an overal limit for the whole Charging Station.\r\n",
                "type": "integer",
                "minimum": 0
            },
            "chargingProfile": {
                "$ref": "#/definitions/ChargingProfileType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "evseId",
            "chargingProfile"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:SetChargingProfileResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "ChargingProfileStatusEnumType": {
                "description": "Returns whether the Charging Station has been able to process the message successfully. This does not guarantee the schedule will be followed to the letter. There might be other constraints the Charging Station may need to take into account.\r\n",
                "javaType": "ChargingProfileStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Accepted",
                    "Rejected"
                ]
            },
            "StatusInfoType": {
                "description": "Element providing more information about the status.\r\n",
                "javaType": "StatusInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "reasonCode": {
                        "description": "A predefined code for the reason why the status is returned in this response. The string is case-insensitive.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "additionalInfo": {
                        "description": "Additional text to provide detailed information.\r\n",
                        "type": "string",
                        "maxLength": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "reasonCode"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "status": {
                "$ref": "#/definitions/ChargingProfileStatusEnumType"
            },
            "statusInfo": {
                "$ref": "#/definitions/StatusInfoType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "status"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:SetDefaultTariffRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "DayOfWeekEnumType": {
                "javaType": "DayOfWeekEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Monday",
                    "Tuesday",
                    "Wednesday",
                    "Thursday",
                    "Friday",
                    "Saturday",
                    "Sunday"
                ]
            },
            "EvseKindEnumType": {
                "description": "Type of EVSE (AC, DC) this tariff applies to.\r\n",
                "javaType": "EvseKindEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "AC",
                    "DC"
                ]
            },
            "MessageFormatEnumType": {
                "description": "Format of the message.\r\n",
                "javaType": "MessageFormatEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "ASCII",
                    "HTML",
                    "URI",
                    "UTF8",
                    "QRCODE"
                ]
            },
            "MessageContentType": {
                "description": "Contains message details, for a message to be displayed on a Charging Station.\r\n\r\n",
                "javaType": "MessageContent",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "format": {
                        "$ref": "#/definitions/MessageFormatEnumType"
                    },
                    "language": {
                        "description": "Message language identifier. Contains a language code as defined in &lt;&lt;ref-RFC5646,[RFC5646]&gt;&gt;.\r\n",
                        "type": "string",
                        "maxLength": 8
                    },
                    "content": {
                        "description": "*(2.1)* Required. Message contents. +\r\nMaximum length supported by Charging Station is given in OCPPCommCtrlr.FieldLength[\"MessageContentType.content\"].\r\n    Maximum length defaults to 1024.\r\n\r\n",
                        "type": "string",
                        "maxLength": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "format",
                    "content"
                ]
            },
            "PriceType": {
                "description": "Price with and without tax. At least one of _exclTax_, _inclTax_ must be present.\r\n",
                "javaType": "Price",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "exclTax": {
                        "description": "Price/cost excluding tax. Can be absent if _inclTax_ is present.\r\n",
                        "type": "number"
                    },
                    "inclTax": {
                        "description": "Price/cost including tax. Can be absent if _exclTax_ is present.\r\n",
                        "type": "number"
                    },
                    "taxRates": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/TaxRateType"
                        },
                        "minItems": 1,
                        "maxItems": 5
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                }
            },
            "TariffConditionsFixedType": {
                "description": "These conditions describe if a FixedPrice applies at start of the transaction.\r\n\r\nWhen more than one restriction is set, they are to be treated as a logical AND. All need to be valid before this price is active.\r\n\r\nNOTE: _startTimeOfDay_ and _endTimeOfDay_ are in local time, because it is the time in the tariff as it is shown to the EV driver at the Charging Station.\r\nA Charging Station will convert this to the internal time zone that it uses (which is recommended to be UTC, see section Generic chapter 3.1) when performing cost calculation.\r\n\r\n",
                "javaType": "TariffConditionsFixed",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "startTimeOfDay": {
                        "description": "Start time of day in local time. +\r\nFormat as per RFC 3339: time-hour \":\" time-minute  +\r\nMust be in 24h format with leading zeros. Hour/Minute separator: \":\"\r\nRegex: ([0-1][0-9]\\|2[0-3]):[0-5][0-9]\r\n",
                        "type": "string"
                    },
                    "endTimeOfDay": {
                        "description": "End time of day in local time. Same syntax as _startTimeOfDay_. +\r\n    If end time &lt; start time then the period wraps around to the next day. +\r\n    To stop at end of the day use: 00:00.\r\n",
                        "type": "string"
                    },
                    "dayOfWeek": {
                        "description": "Day(s) of the week this is tariff applies.\r\n",
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/DayOfWeekEnumType"
                        },
                        "minItems": 1,
                        "maxItems": 7
                    },
                    "validFromDate": {
                        "description": "Start date in local time, for example: 2015-12-24.\r\nValid from this day (inclusive). +\r\nFormat as per RFC 3339: full-date  + \r\n\r\nRegex: ([12][0-9]{3})-(0[1-9]\\|1[0-2])-(0[1-9]\\|[12][0-9]\\|3[01])\r\n",
                        "type": "string"
                    },
                    "validToDate": {
                        "description": "End date in local time, for example: 2015-12-27.\r\n    Valid until this day (exclusive). Same syntax as _validFromDate_.\r\n",
                        "type": "string"
                    },
                    "evseKind": {
                        "$ref": "#/definitions/EvseKindEnumType"
                    },
                    "paymentBrand": {
                        "description": "For which payment brand this (adhoc) tariff applies. Can be used to add a surcharge for certain payment brands.\r\n    Based on value of _additionalIdToken_ from _idToken.additionalInfo.type_ = \"PaymentBrand\".\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "paymentRecognition": {
                        "description": "Type of adhoc payment, e.g. CC, Debit.\r\n    Based on value of _additionalIdToken_ from _idToken.additionalInfo.type_ = \"PaymentRecognition\".\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                }
            },
            "TariffConditionsType": {
                "description": "These conditions describe if and when a TariffEnergyType or TariffTimeType applies during a transaction.\r\n\r\nWhen more than one restriction is set, they are to be treated as a logical AND. All need to be valid before this price is active.\r\n\r\nFor reverse energy flow (discharging) negative values of energy, power and current are used.\r\n\r\nNOTE: _minXXX_ (where XXX = Kwh/A/Kw) must be read as \"closest to zero\", and _maxXXX_ as \"furthest from zero\". For example, a *charging* power range from 10 kW to 50 kWh is given by _minPower_ = 10000 and _maxPower_ = 50000, and a *discharging* power range from -10 kW to -50 kW is given by _minPower_ = -10 and _maxPower_ = -50.\r\n\r\nNOTE: _startTimeOfDay_ and _endTimeOfDay_ are in local time, because it is the time in the tariff as it is shown to the EV driver at the Charging Station.\r\nA Charging Station will convert this to the internal time zone that it uses (which is recommended to be UTC, see section Generic chapter 3.1) when performing cost calculation.\r\n\r\n",
                "javaType": "TariffConditions",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "startTimeOfDay": {
                        "description": "Start time of day in local time. +\r\nFormat as per RFC 3339: time-hour \":\" time-minute  +\r\nMust be in 24h format with leading zeros. Hour/Minute separator: \":\"\r\nRegex: ([0-1][0-9]\\|2[0-3]):[0-5][0-9]\r\n",
                        "type": "string"
                    },
                    "endTimeOfDay": {
                        "description": "End time of day in local time. Same syntax as _startTimeOfDay_. +\r\n    If end time &lt; start time then the period wraps around to the next day. +\r\n    To stop at end of the day use: 00:00.\r\n",
                        "type": "string"
                    },
                    "dayOfWeek": {
                        "description": "Day(s) of the week this is tariff applies.\r\n",
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/DayOfWeekEnumType"
                        },
                        "minItems": 1,
                        "maxItems": 7
                    },
                    "validFromDate": {
                        "description": "Start date in local time, for example: 2015-12-24.\r\nValid from this day (inclusive). +\r\nFormat as per RFC 3339: full-date  + \r\n\r\nRegex: ([12][0-9]{3})-(0[1-9]\\|1[0-2])-(0[1-9]\\|[12][0-9]\\|3[01])\r\n",
                        "type": "string"
                    },
                    "validToDate": {
                        "description": "End date in local time, for example: 2015-12-27.\r\n    Valid until this day (exclusive). Same syntax as _validFromDate_.\r\n",
                        "type": "string"
                    },
                    "evseKind": {
                        "$ref": "#/definitions/EvseKindEnumType"
                    },
                    "minEnergy": {
                        "description": "Minimum consumed energy in Wh, for example 20000 Wh.\r\n    Valid from this amount of energy (inclusive) being used.\r\n",
                        "type": "number"
                    },
                    "maxEnergy": {
                        "description": "Maximum consumed energy in Wh, for example 50000 Wh.\r\n    Valid until this amount of energy (exclusive) being used.\r\n",
                        "type": "number"
                    },
                    "minCurrent": {
                        "description": "Sum of the minimum current (in Amperes) over all phases, for example 5 A.\r\n    When the EV is charging with more than, or equal to, the defined amount of current, this price is/becomes active. If the charging current is or becomes lower, this price is not or no longer valid and becomes inactive. +\r\n    This is NOT about the minimum current over the entire transaction.\r\n",
                        "type": "number"
                    },
                    "maxCurrent": {
                        "description": "Sum of the maximum current (in Amperes) over all phases, for example 20 A.\r\n      When the EV is charging with less than the defined amount of current, this price becomes/is active. If the charging current is or becomes higher, this price is not or no longer valid and becomes inactive.\r\n      This is NOT about the maximum current over the entire transaction.\r\n",
                        "type": "number"
                    },
                    "minPower": {
                        "description": "Minimum power in W, for example 5000 W.\r\n      When the EV is charging with more than, or equal to, the defined amount of power, this price is/becomes active.\r\n      If the charging power is or becomes lower, this price is not or no longer valid and becomes inactive.\r\n      This is NOT about the minimum power over the entire transaction.\r\n",
                        "type": "number"
                    },
                    "maxPower": {
                        "description": "Maximum power in W, for example 20000 W.\r\n      When the EV is charging with less than the defined amount of power, this price becomes/is active.\r\n      If the charging power is or becomes higher, this price is not or no longer valid and becomes inactive.\r\n      This is NOT about the maximum power over the entire transaction.\r\n",
                        "type": "number"
                    },
                    "minTime": {
                        "description": "Minimum duration in seconds the transaction (charging &amp; idle) MUST last (inclusive).\r\n      When the duration of a transaction is longer than the defined value, this price is or becomes active.\r\n      Before that moment, this price is not yet active.\r\n",
                        "type": "integer"
                    },
                    "maxTime": {
                        "description": "Maximum duration in seconds the transaction (charging &amp; idle) MUST last (exclusive).\r\n      When the duration of a transaction is shorter than the defined value, this price is or becomes active.\r\n      After that moment, this price is no longer active.\r\n",
                        "type": "integer"
                    },
                    "minChargingTime": {
                        "description": "Minimum duration in seconds the charging MUST last (inclusive).\r\n      When the duration of a charging is longer than the defined value, this price is or becomes active.\r\n      Before that moment, this price is not yet active.\r\n",
                        "type": "integer"
                    },
                    "maxChargingTime": {
                        "description": "Maximum duration in seconds the charging MUST last (exclusive).\r\n      When the duration of a charging is shorter than the defined value, this price is or becomes active.\r\n      After that moment, this price is no longer active.\r\n",
                        "type": "integer"
                    },
                    "minIdleTime": {
                        "description": "Minimum duration in seconds the idle period (i.e. not charging) MUST last (inclusive).\r\n      When the duration of the idle time is longer than the defined value, this price is or becomes active.\r\n      Before that moment, this price is not yet active.\r\n",
                        "type": "integer"
                    },
                    "maxIdleTime": {
                        "description": "Maximum duration in seconds the idle period (i.e. not charging) MUST last (exclusive).\r\n      When the duration of idle time is shorter than the defined value, this price is or becomes active.\r\n      After that moment, this price is no longer active.\r\n",
                        "type": "integer"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                }
            },
            "TariffEnergyPriceType": {
                "description": "Tariff with optional conditions for an energy price.\r\n",
                "javaType": "TariffEnergyPrice",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "priceKwh": {
                        "description": "Price per kWh (excl. tax) for this element.\r\n",
                        "type": "number"
                    },
                    "conditions": {
                        "$ref": "#/definitions/TariffConditionsType"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "priceKwh"
                ]
            },
            "TariffEnergyType": {
                "description": "Price elements and tax for energy\r\n",
                "javaType": "TariffEnergy",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "prices": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/TariffEnergyPriceType"
                        },
                        "minItems": 1
                    },
                    "taxRates": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/TaxRateType"
                        },
                        "minItems": 1,
                        "maxItems": 5
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "prices"
                ]
            },
            "TariffFixedPriceType": {
                "description": "Tariff with optional conditions for a fixed price.\r\n",
                "javaType": "TariffFixedPrice",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "conditions": {
                        "$ref": "#/definitions/TariffConditionsFixedType"
                    },
                    "priceFixed": {
                        "description": "Fixed price  for this element e.g. a start fee.\r\n",
                        "type": "number"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "priceFixed"
                ]
            },
            "TariffFixedType": {
                "javaType": "TariffFixed",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "prices": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/TariffFixedPriceType"
                        },
                        "minItems": 1
                    },
                    "taxRates": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/TaxRateType"
                        },
                        "minItems": 1,
                        "maxItems": 5
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "prices"
                ]
            },
            "TariffTimePriceType": {
                "description": "Tariff with optional conditions for a time duration price.\r\n",
                "javaType": "TariffTimePrice",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "priceMinute": {
                        "description": "Price per minute (excl. tax) for this element.\r\n",
                        "type": "number"
                    },
                    "conditions": {
                        "$ref": "#/definitions/TariffConditionsType"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "priceMinute"
                ]
            },
            "TariffTimeType": {
                "description": "Price elements and tax for time\r\n\r\n",
                "javaType": "TariffTime",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "prices": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/TariffTimePriceType"
                        },
                        "minItems": 1
                    },
                    "taxRates": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/TaxRateType"
                        },
                        "minItems": 1,
                        "maxItems": 5
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "prices"
                ]
            },
            "TariffType": {
                "description": "A tariff is described by fields with prices for:\r\nenergy,\r\ncharging time,\r\nidle time,\r\nfixed fee,\r\nreservation time,\r\nreservation fixed fee. +\r\nEach of these fields may have (optional) conditions that specify when a price is applicable. +\r\nThe _description_ contains a human-readable explanation of the tariff to be shown to the user. +\r\nThe other fields are parameters that define the tariff. These are used by the charging station to calculate the price.\r\n",
                "javaType": "Tariff",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "tariffId": {
                        "description": "Unique id of tariff\r\n",
                        "type": "string",
                        "maxLength": 60
                    },
                    "description": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/MessageContentType"
                        },
                        "minItems": 1,
                        "maxItems": 10
                    },
                    "currency": {
                        "description": "Currency code according to ISO 4217\r\n",
                        "type": "string",
                        "maxLength": 3
                    },
                    "energy": {
                        "$ref": "#/definitions/TariffEnergyType"
                    },
                    "validFrom": {
                        "description": "Time when this tariff becomes active. When absent, it is immediately active.\r\n",
                        "type": "string",
                        "format": "date-time"
                    },
                    "chargingTime": {
                        "$ref": "#/definitions/TariffTimeType"
                    },
                    "idleTime": {
                        "$ref": "#/definitions/TariffTimeType"
                    },
                    "fixedFee": {
                        "$ref": "#/definitions/TariffFixedType"
                    },
                    "reservationTime": {
                        "$ref": "#/definitions/TariffTimeType"
                    },
                    "reservationFixed": {
                        "$ref": "#/definitions/TariffFixedType"
                    },
                    "minCost": {
                        "$ref": "#/definitions/PriceType"
                    },
                    "maxCost": {
                        "$ref": "#/definitions/PriceType"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "tariffId",
                    "currency"
                ]
            },
            "TaxRateType": {
                "description": "Tax percentage\r\n",
                "javaType": "TaxRate",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "type": {
                        "description": "Type of this tax, e.g.  \"Federal \",  \"State\", for information on receipt.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "tax": {
                        "description": "Tax percentage\r\n",
                        "type": "number"
                    },
                    "stack": {
                        "description": "Stack level for this type of tax. Default value, when absent, is 0. +\r\n_stack_ = 0: tax on net price; +\r\n_stack_ = 1: tax added on top of _stack_ 0; +\r\n_stack_ = 2: tax added on top of _stack_ 1, etc. \r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "type",
                    "tax"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "evseId": {
                "description": "EVSE that tariff applies to. When _evseId_ = 0, then tarriff applies to all EVSEs.\r\n\r\n",
                "type": "integer",
                "minimum": 0
            },
            "tariff": {
                "$ref": "#/definitions/TariffType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "evseId",
            "tariff"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:SetDefaultTariffResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "TariffSetStatusEnumType": {
                "javaType": "TariffSetStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Accepted",
                    "Rejected",
                    "TooManyElements",
                    "ConditionNotSupported",
                    "DuplicateTariffId"
                ]
            },
            "StatusInfoType": {
                "description": "Element providing more information about the status.\r\n",
                "javaType": "StatusInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "reasonCode": {
                        "description": "A predefined code for the reason why the status is returned in this response. The string is case-insensitive.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "additionalInfo": {
                        "description": "Additional text to provide detailed information.\r\n",
                        "type": "string",
                        "maxLength": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "reasonCode"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "status": {
                "$ref": "#/definitions/TariffSetStatusEnumType"
            },
            "statusInfo": {
                "$ref": "#/definitions/StatusInfoType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "status"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:SetDERControlRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "DERControlEnumType": {
                "description": "Type of control.  Determines which setting field below is used.\r\n\r\n",
                "javaType": "DERControlEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "EnterService",
                    "FreqDroop",
                    "FreqWatt",
                    "FixedPFAbsorb",
                    "FixedPFInject",
                    "FixedVar",
                    "Gradients",
                    "HFMustTrip",
                    "HFMayTrip",
                    "HVMustTrip",
                    "HVMomCess",
                    "HVMayTrip",
                    "LimitMaxDischarge",
                    "LFMustTrip",
                    "LVMustTrip",
                    "LVMomCess",
                    "LVMayTrip",
                    "PowerMonitoringMustTrip",
                    "VoltVar",
                    "VoltWatt",
                    "WattPF",
                    "WattVar"
                ]
            },
            "DERUnitEnumType": {
                "description": "Unit of the setpoint.\r\n",
                "javaType": "DERUnitEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Not_Applicable",
                    "PctMaxW",
                    "PctMaxVar",
                    "PctWAvail",
                    "PctVarAvail",
                    "PctEffectiveV"
                ]
            },
            "PowerDuringCessationEnumType": {
                "description": "Parameter is only sent, if the EV has to feed-in power or reactive power during fault-ride through (FRT) as defined by HVMomCess curve and LVMomCess curve.\r\n\r\n\r\n",
                "javaType": "PowerDuringCessationEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Active",
                    "Reactive"
                ]
            },
            "DERCurvePointsType": {
                "javaType": "DERCurvePoints",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "x": {
                        "description": "The data value of the X-axis (independent) variable, depending on the curve type.\r\n\r\n\r\n",
                        "type": "number"
                    },
                    "y": {
                        "description": "The data value of the Y-axis (dependent) variable, depending on the  &lt;&lt;cmn_derunitenumtype&gt;&gt; of the curve. If _y_ is power factor, then a positive value means DER is absorbing reactive power (under-excited), a negative value when DER is injecting reactive power (over-excited).\r\n\r\n",
                        "type": "number"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "x",
                    "y"
                ]
            },
            "DERCurveType": {
                "javaType": "DERCurve",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "curveData": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/DERCurvePointsType"
                        },
                        "minItems": 1,
                        "maxItems": 10
                    },
                    "hysteresis": {
                        "$ref": "#/definitions/HysteresisType"
                    },
                    "priority": {
                        "description": "Priority of curve (0=highest)\r\n\r\n\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "reactivePowerParams": {
                        "$ref": "#/definitions/ReactivePowerParamsType"
                    },
                    "voltageParams": {
                        "$ref": "#/definitions/VoltageParamsType"
                    },
                    "yUnit": {
                        "$ref": "#/definitions/DERUnitEnumType"
                    },
                    "responseTime": {
                        "description": "Open loop response time, the time to ramp up to 90% of the new target in response to the change in voltage, in seconds. A value of 0 is used to mean no limit. When not present, the device should follow its default behavior.\r\n\r\n\r\n",
                        "type": "number"
                    },
                    "startTime": {
                        "description": "Point in time when this curve will become activated. Only absent when _default_ is true.\r\n\r\n",
                        "type": "string",
                        "format": "date-time"
                    },
                    "duration": {
                        "description": "Duration in seconds that this curve will be active. Only absent when _default_ is true.\r\n\r\n\r\n",
                        "type": "number"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "priority",
                    "yUnit",
                    "curveData"
                ]
            },
            "EnterServiceType": {
                "javaType": "EnterService",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "priority": {
                        "description": "Priority of setting (0=highest)\r\n\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "highVoltage": {
                        "description": "Enter service voltage high\r\n",
                        "type": "number"
                    },
                    "lowVoltage": {
                        "description": "Enter service voltage low\r\n\r\n\r\n",
                        "type": "number"
                    },
                    "highFreq": {
                        "description": "Enter service frequency high\r\n\r\n",
                        "type": "number"
                    },
                    "lowFreq": {
                        "description": "Enter service frequency low\r\n\r\n\r\n",
                        "type": "number"
                    },
                    "delay": {
                        "description": "Enter service delay\r\n\r\n\r\n",
                        "type": "number"
                    },
                    "randomDelay": {
                        "description": "Enter service randomized delay\r\n\r\n\r\n",
                        "type": "number"
                    },
                    "rampRate": {
                        "description": "Enter service ramp rate in seconds\r\n\r\n\r\n",
                        "type": "number"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "priority",
                    "highVoltage",
                    "lowVoltage",
                    "highFreq",
                    "lowFreq"
                ]
            },
            "FixedPFType": {
                "javaType": "FixedPF",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "priority": {
                        "description": "Priority of setting (0=highest)\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "displacement": {
                        "description": "Power factor, cos(phi), as value between 0..1.\r\n",
                        "type": "number"
                    },
                    "excitation": {
                        "description": "True when absorbing reactive power (under-excited), false when injecting reactive power (over-excited).\r\n",
                        "type": "boolean"
                    },
                    "startTime": {
                        "description": "Time when this setting becomes active\r\n",
                        "type": "string",
                        "format": "date-time"
                    },
                    "duration": {
                        "description": "Duration in seconds that this setting is active.\r\n",
                        "type": "number"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "priority",
                    "displacement",
                    "excitation"
                ]
            },
            "FixedVarType": {
                "javaType": "FixedVar",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "priority": {
                        "description": "Priority of setting (0=highest)\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "setpoint": {
                        "description": "The value specifies a target var output interpreted as a signed percentage (-100 to 100). \r\n    A negative value refers to charging, whereas a positive one refers to discharging.\r\n    The value type is determined by the unit field.\r\n",
                        "type": "number"
                    },
                    "unit": {
                        "$ref": "#/definitions/DERUnitEnumType"
                    },
                    "startTime": {
                        "description": "Time when this setting becomes active.\r\n",
                        "type": "string",
                        "format": "date-time"
                    },
                    "duration": {
                        "description": "Duration in seconds that this setting is active.\r\n",
                        "type": "number"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "priority",
                    "setpoint",
                    "unit"
                ]
            },
            "FreqDroopType": {
                "javaType": "FreqDroop",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "priority": {
                        "description": "Priority of setting (0=highest)\r\n\r\n\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "overFreq": {
                        "description": "Over-frequency start of droop\r\n\r\n\r\n",
                        "type": "number"
                    },
                    "underFreq": {
                        "description": "Under-frequency start of droop\r\n\r\n\r\n",
                        "type": "number"
                    },
                    "overDroop": {
                        "description": "Over-frequency droop per unit, oFDroop\r\n\r\n\r\n",
                        "type": "number"
                    },
                    "underDroop": {
                        "description": "Under-frequency droop per unit, uFDroop\r\n\r\n",
                        "type": "number"
                    },
                    "responseTime": {
                        "description": "Open loop response time in seconds\r\n\r\n",
                        "type": "number"
                    },
                    "startTime": {
                        "description": "Time when this setting becomes active\r\n\r\n\r\n",
                        "type": "string",
                        "format": "date-time"
                    },
                    "duration": {
                        "description": "Duration in seconds that this setting is active\r\n\r\n\r\n",
                        "type": "number"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "priority",
                    "overFreq",
                    "underFreq",
                    "overDroop",
                    "underDroop",
                    "responseTime"
                ]
            },
            "GradientType": {
                "javaType": "Gradient",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "priority": {
                        "description": "Id of setting\r\n\r\n\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "gradient": {
                        "description": "Default ramp rate in seconds (0 if not applicable)\r\n\r\n\r\n",
                        "type": "number"
                    },
                    "softGradient": {
                        "description": "Soft-start ramp rate in seconds (0 if not applicable)\r\n\r\n\r\n",
                        "type": "number"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "priority",
                    "gradient",
                    "softGradient"
                ]
            },
            "HysteresisType": {
                "javaType": "Hysteresis",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "hysteresisHigh": {
                        "description": "High value for return to normal operation after a grid event, in absolute value. This value adopts the same unit as defined by yUnit\r\n\r\n\r\n",
                        "type": "number"
                    },
                    "hysteresisLow": {
                        "description": "Low value for return to normal operation after a grid event, in absolute value. This value adopts the same unit as defined by yUnit\r\n\r\n\r\n",
                        "type": "number"
                    },
                    "hysteresisDelay": {
                        "description": "Delay in seconds, once grid parameter within HysteresisLow and HysteresisHigh, for the EV to return to normal operation after a grid event.\r\n\r\n\r\n",
                        "type": "number"
                    },
                    "hysteresisGradient": {
                        "description": "Set default rate of change (ramp rate %/s) for the EV to return to normal operation after a grid event\r\n\r\n\r\n",
                        "type": "number"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                }
            },
            "LimitMaxDischargeType": {
                "javaType": "LimitMaxDischarge",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "priority": {
                        "description": "Priority of setting (0=highest)\r\n\r\n\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "pctMaxDischargePower": {
                        "description": "Only for PowerMonitoring. +\r\n    The value specifies a percentage (0 to 100) of the rated maximum discharge power of EV. \r\n    The PowerMonitoring curve becomes active when power exceeds this percentage.\r\n\r\n\r\n",
                        "type": "number"
                    },
                    "powerMonitoringMustTrip": {
                        "$ref": "#/definitions/DERCurveType"
                    },
                    "startTime": {
                        "description": "Time when this setting becomes active\r\n\r\n\r\n",
                        "type": "string",
                        "format": "date-time"
                    },
                    "duration": {
                        "description": "Duration in seconds that this setting is active\r\n\r\n\r\n",
                        "type": "number"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "priority"
                ]
            },
            "ReactivePowerParamsType": {
                "javaType": "ReactivePowerParams",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "vRef": {
                        "description": "Only for VoltVar curve: The nominal ac voltage (rms) adjustment to the voltage curve points for Volt-Var curves (percentage).\r\n\r\n\r\n",
                        "type": "number"
                    },
                    "autonomousVRefEnable": {
                        "description": "Only for VoltVar: Enable/disable autonomous VRef adjustment\r\n\r\n\r\n",
                        "type": "boolean"
                    },
                    "autonomousVRefTimeConstant": {
                        "description": "Only for VoltVar: Adjustment range for VRef time constant\r\n\r\n\r\n",
                        "type": "number"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                }
            },
            "VoltageParamsType": {
                "javaType": "VoltageParams",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "hv10MinMeanValue": {
                        "description": "EN 50549-1 chapter 4.9.3.4\r\n    Voltage threshold for the 10 min time window mean value monitoring.\r\n    The 10 min mean is recalculated up to every 3 s. \r\n    If the present voltage is above this threshold for more than the time defined by _hv10MinMeanValue_, the EV must trip.\r\n    This value is mandatory if _hv10MinMeanTripDelay_ is set.\r\n\r\n\r\n",
                        "type": "number"
                    },
                    "hv10MinMeanTripDelay": {
                        "description": "Time for which the voltage is allowed to stay above the 10 min mean value. \r\n    After this time, the EV must trip.\r\n    This value is mandatory if OverVoltageMeanValue10min is set.\r\n\r\n\r\n",
                        "type": "number"
                    },
                    "powerDuringCessation": {
                        "$ref": "#/definitions/PowerDuringCessationEnumType"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                }
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "isDefault": {
                "description": "True if this is a default DER control\r\n\r\n",
                "type": "boolean"
            },
            "controlId": {
                "description": "Unique id of this control, e.g. UUID\r\n\r\n",
                "type": "string",
                "maxLength": 36
            },
            "controlType": {
                "$ref": "#/definitions/DERControlEnumType"
            },
            "curve": {
                "$ref": "#/definitions/DERCurveType"
            },
            "enterService": {
                "$ref": "#/definitions/EnterServiceType"
            },
            "fixedPFAbsorb": {
                "$ref": "#/definitions/FixedPFType"
            },
            "fixedPFInject": {
                "$ref": "#/definitions/FixedPFType"
            },
            "fixedVar": {
                "$ref": "#/definitions/FixedVarType"
            },
            "freqDroop": {
                "$ref": "#/definitions/FreqDroopType"
            },
            "gradient": {
                "$ref": "#/definitions/GradientType"
            },
            "limitMaxDischarge": {
                "$ref": "#/definitions/LimitMaxDischargeType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "isDefault",
            "controlId",
            "controlType"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:SetDERControlResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "DERControlStatusEnumType": {
                "description": "Result of operation.\r\n\r\n",
                "javaType": "DERControlStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Accepted",
                    "Rejected",
                    "NotSupported",
                    "NotFound"
                ]
            },
            "StatusInfoType": {
                "description": "Element providing more information about the status.\r\n",
                "javaType": "StatusInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "reasonCode": {
                        "description": "A predefined code for the reason why the status is returned in this response. The string is case-insensitive.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "additionalInfo": {
                        "description": "Additional text to provide detailed information.\r\n",
                        "type": "string",
                        "maxLength": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "reasonCode"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "status": {
                "$ref": "#/definitions/DERControlStatusEnumType"
            },
            "statusInfo": {
                "$ref": "#/definitions/StatusInfoType"
            },
            "supersededIds": {
                "description": "List of controlIds that are superseded as a result of setting this control.\r\n",
                "type": "array",
                "additionalItems": false,
                "items": {
                    "type": "string",
                    "maxLength": 36
                },
                "minItems": 1,
                "maxItems": 24
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "status"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:SetDisplayMessageRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "MessageFormatEnumType": {
                "description": "Format of the message.\r\n",
                "javaType": "MessageFormatEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "ASCII",
                    "HTML",
                    "URI",
                    "UTF8",
                    "QRCODE"
                ]
            },
            "MessagePriorityEnumType": {
                "description": "With what priority should this message be shown\r\n",
                "javaType": "MessagePriorityEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "AlwaysFront",
                    "InFront",
                    "NormalCycle"
                ]
            },
            "MessageStateEnumType": {
                "description": "During what state should this message be shown. When omitted this message should be shown in any state of the Charging Station.\r\n",
                "javaType": "MessageStateEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Charging",
                    "Faulted",
                    "Idle",
                    "Unavailable",
                    "Suspended",
                    "Discharging"
                ]
            },
            "ComponentType": {
                "description": "A physical or logical component\r\n",
                "javaType": "Component",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "evse": {
                        "$ref": "#/definitions/EVSEType"
                    },
                    "name": {
                        "description": "Name of the component. Name should be taken from the list of standardized component names whenever possible. Case Insensitive. strongly advised to use Camel Case.\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "instance": {
                        "description": "Name of instance in case the component exists as multiple instances. Case Insensitive. strongly advised to use Camel Case.\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "name"
                ]
            },
            "EVSEType": {
                "description": "Electric Vehicle Supply Equipment\r\n",
                "javaType": "EVSE",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "id": {
                        "description": "EVSE Identifier. This contains a number (&gt; 0) designating an EVSE of the Charging Station.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "connectorId": {
                        "description": "An id to designate a specific connector (on an EVSE) by connector index number.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "id"
                ]
            },
            "MessageContentType": {
                "description": "Contains message details, for a message to be displayed on a Charging Station.\r\n\r\n",
                "javaType": "MessageContent",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "format": {
                        "$ref": "#/definitions/MessageFormatEnumType"
                    },
                    "language": {
                        "description": "Message language identifier. Contains a language code as defined in &lt;&lt;ref-RFC5646,[RFC5646]&gt;&gt;.\r\n",
                        "type": "string",
                        "maxLength": 8
                    },
                    "content": {
                        "description": "*(2.1)* Required. Message contents. +\r\nMaximum length supported by Charging Station is given in OCPPCommCtrlr.FieldLength[\"MessageContentType.content\"].\r\n    Maximum length defaults to 1024.\r\n\r\n",
                        "type": "string",
                        "maxLength": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "format",
                    "content"
                ]
            },
            "MessageInfoType": {
                "description": "Contains message details, for a message to be displayed on a Charging Station.\r\n",
                "javaType": "MessageInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "display": {
                        "$ref": "#/definitions/ComponentType"
                    },
                    "id": {
                        "description": "Unique id within an exchange context. It is defined within the OCPP context as a positive Integer value (greater or equal to zero).\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "priority": {
                        "$ref": "#/definitions/MessagePriorityEnumType"
                    },
                    "state": {
                        "$ref": "#/definitions/MessageStateEnumType"
                    },
                    "startDateTime": {
                        "description": "From what date-time should this message be shown. If omitted: directly.\r\n",
                        "type": "string",
                        "format": "date-time"
                    },
                    "endDateTime": {
                        "description": "Until what date-time should this message be shown, after this date/time this message SHALL be removed.\r\n",
                        "type": "string",
                        "format": "date-time"
                    },
                    "transactionId": {
                        "description": "During which transaction shall this message be shown.\r\nMessage SHALL be removed by the Charging Station after transaction has\r\nended.\r\n",
                        "type": "string",
                        "maxLength": 36
                    },
                    "message": {
                        "$ref": "#/definitions/MessageContentType"
                    },
                    "messageExtra": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/MessageContentType"
                        },
                        "minItems": 1,
                        "maxItems": 4
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "id",
                    "priority",
                    "message"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "message": {
                "$ref": "#/definitions/MessageInfoType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "message"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:SetDisplayMessageResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "DisplayMessageStatusEnumType": {
                "description": "This indicates whether the Charging Station is able to display the message.\r\n",
                "javaType": "DisplayMessageStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Accepted",
                    "NotSupportedMessageFormat",
                    "Rejected",
                    "NotSupportedPriority",
                    "NotSupportedState",
                    "UnknownTransaction",
                    "LanguageNotSupported"
                ]
            },
            "StatusInfoType": {
                "description": "Element providing more information about the status.\r\n",
                "javaType": "StatusInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "reasonCode": {
                        "description": "A predefined code for the reason why the status is returned in this response. The string is case-insensitive.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "additionalInfo": {
                        "description": "Additional text to provide detailed information.\r\n",
                        "type": "string",
                        "maxLength": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "reasonCode"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "status": {
                "$ref": "#/definitions/DisplayMessageStatusEnumType"
            },
            "statusInfo": {
                "$ref": "#/definitions/StatusInfoType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "status"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:SetMonitoringBaseRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "MonitoringBaseEnumType": {
                "description": "Specify which monitoring base will be set\r\n",
                "javaType": "MonitoringBaseEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "All",
                    "FactoryDefault",
                    "HardWiredOnly"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "monitoringBase": {
                "$ref": "#/definitions/MonitoringBaseEnumType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "monitoringBase"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:SetMonitoringBaseResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "GenericDeviceModelStatusEnumType": {
                "description": "Indicates whether the Charging Station was able to accept the request.\r\n",
                "javaType": "GenericDeviceModelStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Accepted",
                    "Rejected",
                    "NotSupported",
                    "EmptyResultSet"
                ]
            },
            "StatusInfoType": {
                "description": "Element providing more information about the status.\r\n",
                "javaType": "StatusInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "reasonCode": {
                        "description": "A predefined code for the reason why the status is returned in this response. The string is case-insensitive.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "additionalInfo": {
                        "description": "Additional text to provide detailed information.\r\n",
                        "type": "string",
                        "maxLength": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "reasonCode"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "status": {
                "$ref": "#/definitions/GenericDeviceModelStatusEnumType"
            },
            "statusInfo": {
                "$ref": "#/definitions/StatusInfoType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "status"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:SetMonitoringLevelRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "severity": {
                "description": "The Charging Station SHALL only report events with a severity number lower than or equal to this severity.\r\nThe severity range is 0-9, with 0 as the highest and 9 as the lowest severity level.\r\n\r\nThe severity levels have the following meaning: +\r\n*0-Danger* +\r\nIndicates lives are potentially in danger. Urgent attention is needed and action should be taken immediately. +\r\n*1-Hardware Failure* +\r\nIndicates that the Charging Station is unable to continue regular operations due to Hardware issues. Action is required. +\r\n*2-System Failure* +\r\nIndicates that the Charging Station is unable to continue regular operations due to software or minor hardware issues. Action is required. +\r\n*3-Critical* +\r\nIndicates a critical error. Action is required. +\r\n*4-Error* +\r\nIndicates a non-urgent error. Action is required. +\r\n*5-Alert* +\r\nIndicates an alert event. Default severity for any type of monitoring event.  +\r\n*6-Warning* +\r\nIndicates a warning event. Action may be required. +\r\n*7-Notice* +\r\nIndicates an unusual event. No immediate action is required. +\r\n*8-Informational* +\r\nIndicates a regular operational event. May be used for reporting, measuring throughput, etc. No action is required. +\r\n*9-Debug* +\r\nIndicates information useful to developers for debugging, not useful during operations.\r\n\r\n\r\n",
                "type": "integer",
                "minimum": 0
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "severity"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:SetMonitoringLevelResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "GenericStatusEnumType": {
                "description": "Indicates whether the Charging Station was able to accept the request.\r\n",
                "javaType": "GenericStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Accepted",
                    "Rejected"
                ]
            },
            "StatusInfoType": {
                "description": "Element providing more information about the status.\r\n",
                "javaType": "StatusInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "reasonCode": {
                        "description": "A predefined code for the reason why the status is returned in this response. The string is case-insensitive.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "additionalInfo": {
                        "description": "Additional text to provide detailed information.\r\n",
                        "type": "string",
                        "maxLength": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "reasonCode"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "status": {
                "$ref": "#/definitions/GenericStatusEnumType"
            },
            "statusInfo": {
                "$ref": "#/definitions/StatusInfoType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "status"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:SetNetworkProfileRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "APNAuthenticationEnumType": {
                "description": "Authentication method.\r\n",
                "javaType": "APNAuthenticationEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "PAP",
                    "CHAP",
                    "NONE",
                    "AUTO"
                ]
            },
            "OCPPInterfaceEnumType": {
                "description": "Applicable Network Interface. Charging Station is allowed to use a different network interface to connect if the given one does not work.\r\n",
                "javaType": "OCPPInterfaceEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Wired0",
                    "Wired1",
                    "Wired2",
                    "Wired3",
                    "Wireless0",
                    "Wireless1",
                    "Wireless2",
                    "Wireless3",
                    "Any"
                ]
            },
            "OCPPTransportEnumType": {
                "description": "Defines the transport protocol (e.g. SOAP or JSON). Note: SOAP is not supported in OCPP 2.x, but is supported by earlier versions of OCPP.\r\n",
                "javaType": "OCPPTransportEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "SOAP",
                    "JSON"
                ]
            },
            "OCPPVersionEnumType": {
                "description": "*(2.1)* This field is ignored, since the OCPP version to use is determined during the websocket handshake. The field is only kept for backwards compatibility with the OCPP 2.0.1 JSON schema.\r\n",
                "javaType": "OCPPVersionEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "OCPP12",
                    "OCPP15",
                    "OCPP16",
                    "OCPP20",
                    "OCPP201",
                    "OCPP21"
                ]
            },
            "VPNEnumType": {
                "description": "Type of VPN\r\n",
                "javaType": "VPNEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "IKEv2",
                    "IPSec",
                    "L2TP",
                    "PPTP"
                ]
            },
            "APNType": {
                "description": "Collection of configuration data needed to make a data-connection over a cellular network.\r\n\r\nNOTE: When asking a GSM modem to dial in, it is possible to specify which mobile operator should be used. This can be done with the mobile country code (MCC) in combination with a mobile network code (MNC). Example: If your preferred network is Vodafone Netherlands, the MCC=204 and the MNC=04 which means the key PreferredNetwork = 20404 Some modems allows to specify a preferred network, which means, if this network is not available, a different network is used. If you specify UseOnlyPreferredNetwork and this network is not available, the modem will not dial in.\r\n",
                "javaType": "APN",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "apn": {
                        "description": "The Access Point Name as an URL.\r\n",
                        "type": "string",
                        "maxLength": 2000
                    },
                    "apnUserName": {
                        "description": "APN username.\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "apnPassword": {
                        "description": "*(2.1)* APN Password.\r\n",
                        "type": "string",
                        "maxLength": 64
                    },
                    "simPin": {
                        "description": "SIM card pin code.\r\n",
                        "type": "integer"
                    },
                    "preferredNetwork": {
                        "description": "Preferred network, written as MCC and MNC concatenated. See note.\r\n",
                        "type": "string",
                        "maxLength": 6
                    },
                    "useOnlyPreferredNetwork": {
                        "description": "Default: false. Use only the preferred Network, do\r\nnot dial in when not available. See Note.\r\n",
                        "type": "boolean",
                        "default": false
                    },
                    "apnAuthentication": {
                        "$ref": "#/definitions/APNAuthenticationEnumType"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "apn",
                    "apnAuthentication"
                ]
            },
            "NetworkConnectionProfileType": {
                "description": "The NetworkConnectionProfile defines the functional and technical parameters of a communication link.\r\n",
                "javaType": "NetworkConnectionProfile",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "apn": {
                        "$ref": "#/definitions/APNType"
                    },
                    "ocppVersion": {
                        "$ref": "#/definitions/OCPPVersionEnumType"
                    },
                    "ocppInterface": {
                        "$ref": "#/definitions/OCPPInterfaceEnumType"
                    },
                    "ocppTransport": {
                        "$ref": "#/definitions/OCPPTransportEnumType"
                    },
                    "messageTimeout": {
                        "description": "Duration in seconds before a message send by the Charging Station via this network connection times-out.\r\nThe best setting depends on the underlying network and response times of the CSMS.\r\nIf you are looking for a some guideline: use 30 seconds as a starting point.\r\n",
                        "type": "integer"
                    },
                    "ocppCsmsUrl": {
                        "description": "URL of the CSMS(s) that this Charging Station communicates with, without the Charging Station identity part. +\r\nThe SecurityCtrlr.Identity field is appended to _ocppCsmsUrl_ to provide the full websocket URL.\r\n",
                        "type": "string",
                        "maxLength": 2000
                    },
                    "securityProfile": {
                        "description": "This field specifies the security profile used when connecting to the CSMS with this NetworkConnectionProfile.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "identity": {
                        "description": "*(2.1)* Charging Station identity to be used as the basic authentication username.\r\n",
                        "type": "string",
                        "maxLength": 48
                    },
                    "basicAuthPassword": {
                        "description": "*(2.1)* BasicAuthPassword to use for security profile 1 or 2.\r\n",
                        "type": "string",
                        "maxLength": 64
                    },
                    "vpn": {
                        "$ref": "#/definitions/VPNType"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "ocppInterface",
                    "ocppTransport",
                    "messageTimeout",
                    "ocppCsmsUrl",
                    "securityProfile"
                ]
            },
            "VPNType": {
                "description": "VPN Configuration settings\r\n",
                "javaType": "VPN",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "server": {
                        "description": "VPN Server Address\r\n",
                        "type": "string",
                        "maxLength": 2000
                    },
                    "user": {
                        "description": "VPN User\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "group": {
                        "description": "VPN group.\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "password": {
                        "description": "*(2.1)* VPN Password.\r\n",
                        "type": "string",
                        "maxLength": 64
                    },
                    "key": {
                        "description": "VPN shared secret.\r\n",
                        "type": "string",
                        "maxLength": 255
                    },
                    "type": {
                        "$ref": "#/definitions/VPNEnumType"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "server",
                    "user",
                    "password",
                    "key",
                    "type"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "configurationSlot": {
                "description": "Slot in which the configuration should be stored.\r\n",
                "type": "integer"
            },
            "connectionData": {
                "$ref": "#/definitions/NetworkConnectionProfileType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "configurationSlot",
            "connectionData"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:SetNetworkProfileResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "SetNetworkProfileStatusEnumType": {
                "description": "Result of operation.\r\n",
                "javaType": "SetNetworkProfileStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Accepted",
                    "Rejected",
                    "Failed"
                ]
            },
            "StatusInfoType": {
                "description": "Element providing more information about the status.\r\n",
                "javaType": "StatusInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "reasonCode": {
                        "description": "A predefined code for the reason why the status is returned in this response. The string is case-insensitive.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "additionalInfo": {
                        "description": "Additional text to provide detailed information.\r\n",
                        "type": "string",
                        "maxLength": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "reasonCode"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "status": {
                "$ref": "#/definitions/SetNetworkProfileStatusEnumType"
            },
            "statusInfo": {
                "$ref": "#/definitions/StatusInfoType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "status"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:SetVariableMonitoringRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "MonitorEnumType": {
                "description": "The type of this monitor, e.g. a threshold, delta or periodic monitor. \r\n\r\n",
                "javaType": "MonitorEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "UpperThreshold",
                    "LowerThreshold",
                    "Delta",
                    "Periodic",
                    "PeriodicClockAligned",
                    "TargetDelta",
                    "TargetDeltaRelative"
                ]
            },
            "ComponentType": {
                "description": "A physical or logical component\r\n",
                "javaType": "Component",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "evse": {
                        "$ref": "#/definitions/EVSEType"
                    },
                    "name": {
                        "description": "Name of the component. Name should be taken from the list of standardized component names whenever possible. Case Insensitive. strongly advised to use Camel Case.\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "instance": {
                        "description": "Name of instance in case the component exists as multiple instances. Case Insensitive. strongly advised to use Camel Case.\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "name"
                ]
            },
            "EVSEType": {
                "description": "Electric Vehicle Supply Equipment\r\n",
                "javaType": "EVSE",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "id": {
                        "description": "EVSE Identifier. This contains a number (&gt; 0) designating an EVSE of the Charging Station.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "connectorId": {
                        "description": "An id to designate a specific connector (on an EVSE) by connector index number.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "id"
                ]
            },
            "PeriodicEventStreamParamsType": {
                "javaType": "PeriodicEventStreamParams",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "interval": {
                        "description": "Time in seconds after which stream data is sent.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "values": {
                        "description": "Number of items to be sent together in stream.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                }
            },
            "SetMonitoringDataType": {
                "description": "Class to hold parameters of SetVariableMonitoring request.\r\n",
                "javaType": "SetMonitoringData",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "id": {
                        "description": "An id SHALL only be given to replace an existing monitor. The Charging Station handles the generation of id's for new monitors.\r\n\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "periodicEventStream": {
                        "$ref": "#/definitions/PeriodicEventStreamParamsType"
                    },
                    "transaction": {
                        "description": "Monitor only active when a transaction is ongoing on a component relevant to this transaction. Default = false.\r\n\r\n",
                        "type": "boolean",
                        "default": false
                    },
                    "value": {
                        "description": "Value for threshold or delta monitoring.\r\nFor Periodic or PeriodicClockAligned this is the interval in seconds.\r\n\r\n",
                        "type": "number"
                    },
                    "type": {
                        "$ref": "#/definitions/MonitorEnumType"
                    },
                    "severity": {
                        "description": "The severity that will be assigned to an event that is triggered by this monitor. The severity range is 0-9, with 0 as the highest and 9 as the lowest severity level.\r\n\r\nThe severity levels have the following meaning: +\r\n*0-Danger* +\r\nIndicates lives are potentially in danger. Urgent attention is needed and action should be taken immediately. +\r\n*1-Hardware Failure* +\r\nIndicates that the Charging Station is unable to continue regular operations due to Hardware issues. Action is required. +\r\n*2-System Failure* +\r\nIndicates that the Charging Station is unable to continue regular operations due to software or minor hardware issues. Action is required. +\r\n*3-Critical* +\r\nIndicates a critical error. Action is required. +\r\n*4-Error* +\r\nIndicates a non-urgent error. Action is required. +\r\n*5-Alert* +\r\nIndicates an alert event. Default severity for any type of monitoring event.  +\r\n*6-Warning* +\r\nIndicates a warning event. Action may be required. +\r\n*7-Notice* +\r\nIndicates an unusual event. No immediate action is required. +\r\n*8-Informational* +\r\nIndicates a regular operational event. May be used for reporting, measuring throughput, etc. No action is required. +\r\n*9-Debug* +\r\nIndicates information useful to developers for debugging, not useful during operations.\r\n\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "component": {
                        "$ref": "#/definitions/ComponentType"
                    },
                    "variable": {
                        "$ref": "#/definitions/VariableType"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "value",
                    "type",
                    "severity",
                    "component",
                    "variable"
                ]
            },
            "VariableType": {
                "description": "Reference key to a component-variable.\r\n",
                "javaType": "Variable",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "name": {
                        "description": "Name of the variable. Name should be taken from the list of standardized variable names whenever possible. Case Insensitive. strongly advised to use Camel Case.\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "instance": {
                        "description": "Name of instance in case the variable exists as multiple instances. Case Insensitive. strongly advised to use Camel Case.\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "name"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "setMonitoringData": {
                "type": "array",
                "additionalItems": false,
                "items": {
                    "$ref": "#/definitions/SetMonitoringDataType"
                },
                "minItems": 1
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "setMonitoringData"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:SetVariableMonitoringResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "MonitorEnumType": {
                "description": "The type of this monitor, e.g. a threshold, delta or periodic monitor. \r\n\r\n",
                "javaType": "MonitorEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "UpperThreshold",
                    "LowerThreshold",
                    "Delta",
                    "Periodic",
                    "PeriodicClockAligned",
                    "TargetDelta",
                    "TargetDeltaRelative"
                ]
            },
            "SetMonitoringStatusEnumType": {
                "description": "Status is OK if a value could be returned. Otherwise this will indicate the reason why a value could not be returned.\r\n",
                "javaType": "SetMonitoringStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Accepted",
                    "UnknownComponent",
                    "UnknownVariable",
                    "UnsupportedMonitorType",
                    "Rejected",
                    "Duplicate"
                ]
            },
            "ComponentType": {
                "description": "A physical or logical component\r\n",
                "javaType": "Component",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "evse": {
                        "$ref": "#/definitions/EVSEType"
                    },
                    "name": {
                        "description": "Name of the component. Name should be taken from the list of standardized component names whenever possible. Case Insensitive. strongly advised to use Camel Case.\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "instance": {
                        "description": "Name of instance in case the component exists as multiple instances. Case Insensitive. strongly advised to use Camel Case.\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "name"
                ]
            },
            "EVSEType": {
                "description": "Electric Vehicle Supply Equipment\r\n",
                "javaType": "EVSE",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "id": {
                        "description": "EVSE Identifier. This contains a number (&gt; 0) designating an EVSE of the Charging Station.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "connectorId": {
                        "description": "An id to designate a specific connector (on an EVSE) by connector index number.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "id"
                ]
            },
            "SetMonitoringResultType": {
                "description": "Class to hold result of SetVariableMonitoring request.\r\n",
                "javaType": "SetMonitoringResult",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "id": {
                        "description": "Id given to the VariableMonitor by the Charging Station. The Id is only returned when status is accepted. Installed VariableMonitors should have unique id's but the id's of removed Installed monitors should have unique id's but the id's of removed monitors MAY be reused.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "statusInfo": {
                        "$ref": "#/definitions/StatusInfoType"
                    },
                    "status": {
                        "$ref": "#/definitions/SetMonitoringStatusEnumType"
                    },
                    "type": {
                        "$ref": "#/definitions/MonitorEnumType"
                    },
                    "component": {
                        "$ref": "#/definitions/ComponentType"
                    },
                    "variable": {
                        "$ref": "#/definitions/VariableType"
                    },
                    "severity": {
                        "description": "The severity that will be assigned to an event that is triggered by this monitor. The severity range is 0-9, with 0 as the highest and 9 as the lowest severity level.\r\n\r\nThe severity levels have the following meaning: +\r\n*0-Danger* +\r\nIndicates lives are potentially in danger. Urgent attention is needed and action should be taken immediately. +\r\n*1-Hardware Failure* +\r\nIndicates that the Charging Station is unable to continue regular operations due to Hardware issues. Action is required. +\r\n*2-System Failure* +\r\nIndicates that the Charging Station is unable to continue regular operations due to software or minor hardware issues. Action is required. +\r\n*3-Critical* +\r\nIndicates a critical error. Action is required. +\r\n*4-Error* +\r\nIndicates a non-urgent error. Action is required. +\r\n*5-Alert* +\r\nIndicates an alert event. Default severity for any type of monitoring event.  +\r\n*6-Warning* +\r\nIndicates a warning event. Action may be required. +\r\n*7-Notice* +\r\nIndicates an unusual event. No immediate action is required. +\r\n*8-Informational* +\r\nIndicates a regular operational event. May be used for reporting, measuring throughput, etc. No action is required. +\r\n*9-Debug* +\r\nIndicates information useful to developers for debugging, not useful during operations.\r\n\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "status",
                    "type",
                    "severity",
                    "component",
                    "variable"
                ]
            },
            "StatusInfoType": {
                "description": "Element providing more information about the status.\r\n",
                "javaType": "StatusInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "reasonCode": {
                        "description": "A predefined code for the reason why the status is returned in this response. The string is case-insensitive.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "additionalInfo": {
                        "description": "Additional text to provide detailed information.\r\n",
                        "type": "string",
                        "maxLength": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "reasonCode"
                ]
            },
            "VariableType": {
                "description": "Reference key to a component-variable.\r\n",
                "javaType": "Variable",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "name": {
                        "description": "Name of the variable. Name should be taken from the list of standardized variable names whenever possible. Case Insensitive. strongly advised to use Camel Case.\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "instance": {
                        "description": "Name of instance in case the variable exists as multiple instances. Case Insensitive. strongly advised to use Camel Case.\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "name"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "setMonitoringResult": {
                "type": "array",
                "additionalItems": false,
                "items": {
                    "$ref": "#/definitions/SetMonitoringResultType"
                },
                "minItems": 1
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "setMonitoringResult"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:SetVariablesRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "AttributeEnumType": {
                "description": "Type of attribute: Actual, Target, MinSet, MaxSet. Default is Actual when omitted.\r\n",
                "javaType": "AttributeEnum",
                "type": "string",
                "default": "Actual",
                "additionalProperties": false,
                "enum": [
                    "Actual",
                    "Target",
                    "MinSet",
                    "MaxSet"
                ]
            },
            "ComponentType": {
                "description": "A physical or logical component\r\n",
                "javaType": "Component",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "evse": {
                        "$ref": "#/definitions/EVSEType"
                    },
                    "name": {
                        "description": "Name of the component. Name should be taken from the list of standardized component names whenever possible. Case Insensitive. strongly advised to use Camel Case.\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "instance": {
                        "description": "Name of instance in case the component exists as multiple instances. Case Insensitive. strongly advised to use Camel Case.\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "name"
                ]
            },
            "EVSEType": {
                "description": "Electric Vehicle Supply Equipment\r\n",
                "javaType": "EVSE",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "id": {
                        "description": "EVSE Identifier. This contains a number (&gt; 0) designating an EVSE of the Charging Station.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "connectorId": {
                        "description": "An id to designate a specific connector (on an EVSE) by connector index number.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "id"
                ]
            },
            "SetVariableDataType": {
                "javaType": "SetVariableData",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "attributeType": {
                        "$ref": "#/definitions/AttributeEnumType"
                    },
                    "attributeValue": {
                        "description": "Value to be assigned to attribute of variable.\r\nThis value is allowed to be an empty string (\"\").\r\n\r\nThe Configuration Variable &lt;&lt;configkey-configuration-value-size,ConfigurationValueSize&gt;&gt; can be used to limit SetVariableData.attributeValue and VariableCharacteristics.valuesList. The max size of these values will always remain equal. \r\n",
                        "type": "string",
                        "maxLength": 2500
                    },
                    "component": {
                        "$ref": "#/definitions/ComponentType"
                    },
                    "variable": {
                        "$ref": "#/definitions/VariableType"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "attributeValue",
                    "component",
                    "variable"
                ]
            },
            "VariableType": {
                "description": "Reference key to a component-variable.\r\n",
                "javaType": "Variable",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "name": {
                        "description": "Name of the variable. Name should be taken from the list of standardized variable names whenever possible. Case Insensitive. strongly advised to use Camel Case.\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "instance": {
                        "description": "Name of instance in case the variable exists as multiple instances. Case Insensitive. strongly advised to use Camel Case.\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "name"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "setVariableData": {
                "type": "array",
                "additionalItems": false,
                "items": {
                    "$ref": "#/definitions/SetVariableDataType"
                },
                "minItems": 1
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "setVariableData"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:SetVariablesResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "AttributeEnumType": {
                "description": "Type of attribute: Actual, Target, MinSet, MaxSet. Default is Actual when omitted.\r\n",
                "javaType": "AttributeEnum",
                "type": "string",
                "default": "Actual",
                "additionalProperties": false,
                "enum": [
                    "Actual",
                    "Target",
                    "MinSet",
                    "MaxSet"
                ]
            },
            "SetVariableStatusEnumType": {
                "description": "Result status of setting the variable.\r\n",
                "javaType": "SetVariableStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Accepted",
                    "Rejected",
                    "UnknownComponent",
                    "UnknownVariable",
                    "NotSupportedAttributeType",
                    "RebootRequired"
                ]
            },
            "ComponentType": {
                "description": "A physical or logical component\r\n",
                "javaType": "Component",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "evse": {
                        "$ref": "#/definitions/EVSEType"
                    },
                    "name": {
                        "description": "Name of the component. Name should be taken from the list of standardized component names whenever possible. Case Insensitive. strongly advised to use Camel Case.\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "instance": {
                        "description": "Name of instance in case the component exists as multiple instances. Case Insensitive. strongly advised to use Camel Case.\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "name"
                ]
            },
            "EVSEType": {
                "description": "Electric Vehicle Supply Equipment\r\n",
                "javaType": "EVSE",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "id": {
                        "description": "EVSE Identifier. This contains a number (&gt; 0) designating an EVSE of the Charging Station.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "connectorId": {
                        "description": "An id to designate a specific connector (on an EVSE) by connector index number.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "id"
                ]
            },
            "SetVariableResultType": {
                "javaType": "SetVariableResult",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "attributeType": {
                        "$ref": "#/definitions/AttributeEnumType"
                    },
                    "attributeStatus": {
                        "$ref": "#/definitions/SetVariableStatusEnumType"
                    },
                    "attributeStatusInfo": {
                        "$ref": "#/definitions/StatusInfoType"
                    },
                    "component": {
                        "$ref": "#/definitions/ComponentType"
                    },
                    "variable": {
                        "$ref": "#/definitions/VariableType"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "attributeStatus",
                    "component",
                    "variable"
                ]
            },
            "StatusInfoType": {
                "description": "Element providing more information about the status.\r\n",
                "javaType": "StatusInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "reasonCode": {
                        "description": "A predefined code for the reason why the status is returned in this response. The string is case-insensitive.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "additionalInfo": {
                        "description": "Additional text to provide detailed information.\r\n",
                        "type": "string",
                        "maxLength": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "reasonCode"
                ]
            },
            "VariableType": {
                "description": "Reference key to a component-variable.\r\n",
                "javaType": "Variable",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "name": {
                        "description": "Name of the variable. Name should be taken from the list of standardized variable names whenever possible. Case Insensitive. strongly advised to use Camel Case.\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "instance": {
                        "description": "Name of instance in case the variable exists as multiple instances. Case Insensitive. strongly advised to use Camel Case.\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "name"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "setVariableResult": {
                "type": "array",
                "additionalItems": false,
                "items": {
                    "$ref": "#/definitions/SetVariableResultType"
                },
                "minItems": 1
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "setVariableResult"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:SignCertificateRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "CertificateSigningUseEnumType": {
                "description": "Indicates the type of certificate that is to be signed. When omitted the certificate is to be used for both the 15118 connection (if implemented) and the Charging Station to CSMS connection.\r\n\r\n",
                "javaType": "CertificateSigningUseEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "ChargingStationCertificate",
                    "V2GCertificate",
                    "V2G20Certificate"
                ]
            },
            "HashAlgorithmEnumType": {
                "description": "Used algorithms for the hashes provided.\r\n",
                "javaType": "HashAlgorithmEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "SHA256",
                    "SHA384",
                    "SHA512"
                ]
            },
            "CertificateHashDataType": {
                "javaType": "CertificateHashData",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "hashAlgorithm": {
                        "$ref": "#/definitions/HashAlgorithmEnumType"
                    },
                    "issuerNameHash": {
                        "description": "The hash of the issuer’s distinguished\r\nname (DN), that must be calculated over the DER\r\nencoding of the issuer’s name field in the certificate\r\nbeing checked.\r\n\r\n",
                        "type": "string",
                        "maxLength": 128
                    },
                    "issuerKeyHash": {
                        "description": "The hash of the DER encoded public key:\r\nthe value (excluding tag and length) of the subject\r\npublic key field in the issuer’s certificate.\r\n",
                        "type": "string",
                        "maxLength": 128
                    },
                    "serialNumber": {
                        "description": "The string representation of the\r\nhexadecimal value of the serial number without the\r\nprefix \"0x\" and without leading zeroes.\r\n",
                        "type": "string",
                        "maxLength": 40
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "hashAlgorithm",
                    "issuerNameHash",
                    "issuerKeyHash",
                    "serialNumber"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "csr": {
                "description": "The Charging Station SHALL send the public key in form of a Certificate Signing Request (CSR) as described in RFC 2986 [22] and then PEM encoded, using the &lt;&lt;signcertificaterequest,SignCertificateRequest&gt;&gt; message.\r\n",
                "type": "string",
                "maxLength": 5500
            },
            "certificateType": {
                "$ref": "#/definitions/CertificateSigningUseEnumType"
            },
            "hashRootCertificate": {
                "$ref": "#/definitions/CertificateHashDataType"
            },
            "requestId": {
                "description": "*(2.1)* RequestId to match this message with the CertificateSignedRequest.\r\n",
                "type": "integer"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "csr"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:SignCertificateResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "GenericStatusEnumType": {
                "description": "Specifies whether the CSMS can process the request.\r\n",
                "javaType": "GenericStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Accepted",
                    "Rejected"
                ]
            },
            "StatusInfoType": {
                "description": "Element providing more information about the status.\r\n",
                "javaType": "StatusInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "reasonCode": {
                        "description": "A predefined code for the reason why the status is returned in this response. The string is case-insensitive.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "additionalInfo": {
                        "description": "Additional text to provide detailed information.\r\n",
                        "type": "string",
                        "maxLength": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "reasonCode"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "status": {
                "$ref": "#/definitions/GenericStatusEnumType"
            },
            "statusInfo": {
                "$ref": "#/definitions/StatusInfoType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "status"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:StatusNotificationRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "ConnectorStatusEnumType": {
                "description": "This contains the current status of the Connector.\r\n",
                "javaType": "ConnectorStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Available",
                    "Occupied",
                    "Reserved",
                    "Unavailable",
                    "Faulted"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "timestamp": {
                "description": "The time for which the status is reported.\r\n",
                "type": "string",
                "format": "date-time"
            },
            "connectorStatus": {
                "$ref": "#/definitions/ConnectorStatusEnumType"
            },
            "evseId": {
                "description": "The id of the EVSE to which the connector belongs for which the the status is reported.\r\n",
                "type": "integer",
                "minimum": 0
            },
            "connectorId": {
                "description": "The id of the connector within the EVSE for which the status is reported.\r\n",
                "type": "integer",
                "minimum": 0
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "timestamp",
            "connectorStatus",
            "evseId",
            "connectorId"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:StatusNotificationResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        }
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:TransactionEventRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "ChargingStateEnumType": {
                "description": "Current charging state, is required when state\r\nhas changed. Omitted when there is no communication between EVSE and EV, because no cable is plugged in.\r\n",
                "javaType": "ChargingStateEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "EVConnected",
                    "Charging",
                    "SuspendedEV",
                    "SuspendedEVSE",
                    "Idle"
                ]
            },
            "CostDimensionEnumType": {
                "description": "Type of cost dimension: energy, power, time, etc.\r\n\r\n",
                "javaType": "CostDimensionEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Energy",
                    "MaxCurrent",
                    "MinCurrent",
                    "MaxPower",
                    "MinPower",
                    "IdleTIme",
                    "ChargingTime"
                ]
            },
            "LocationEnumType": {
                "description": "Indicates where the measured value has been sampled. Default =  \"Outlet\"\r\n\r\n",
                "javaType": "LocationEnum",
                "type": "string",
                "default": "Outlet",
                "additionalProperties": false,
                "enum": [
                    "Body",
                    "Cable",
                    "EV",
                    "Inlet",
                    "Outlet",
                    "Upstream"
                ]
            },
            "MeasurandEnumType": {
                "description": "Type of measurement. Default = \"Energy.Active.Import.Register\"\r\n",
                "javaType": "MeasurandEnum",
                "type": "string",
                "default": "Energy.Active.Import.Register",
                "additionalProperties": false,
                "enum": [
                    "Current.Export",
                    "Current.Export.Offered",
                    "Current.Export.Minimum",
                    "Current.Import",
                    "Current.Import.Offered",
                    "Current.Import.Minimum",
                    "Current.Offered",
                    "Display.PresentSOC",
                    "Display.MinimumSOC",
                    "Display.TargetSOC",
                    "Display.MaximumSOC",
                    "Display.RemainingTimeToMinimumSOC",
                    "Display.RemainingTimeToTargetSOC",
                    "Display.RemainingTimeToMaximumSOC",
                    "Display.ChargingComplete",
                    "Display.BatteryEnergyCapacity",
                    "Display.InletHot",
                    "Energy.Active.Export.Interval",
                    "Energy.Active.Export.Register",
                    "Energy.Active.Import.Interval",
                    "Energy.Active.Import.Register",
                    "Energy.Active.Import.CableLoss",
                    "Energy.Active.Import.LocalGeneration.Register",
                    "Energy.Active.Net",
                    "Energy.Active.Setpoint.Interval",
                    "Energy.Apparent.Export",
                    "Energy.Apparent.Import",
                    "Energy.Apparent.Net",
                    "Energy.Reactive.Export.Interval",
                    "Energy.Reactive.Export.Register",
                    "Energy.Reactive.Import.Interval",
                    "Energy.Reactive.Import.Register",
                    "Energy.Reactive.Net",
                    "EnergyRequest.Target",
                    "EnergyRequest.Minimum",
                    "EnergyRequest.Maximum",
                    "EnergyRequest.Minimum.V2X",
                    "EnergyRequest.Maximum.V2X",
                    "EnergyRequest.Bulk",
                    "Frequency",
                    "Power.Active.Export",
                    "Power.Active.Import",
                    "Power.Active.Setpoint",
                    "Power.Active.Residual",
                    "Power.Export.Minimum",
                    "Power.Export.Offered",
                    "Power.Factor",
                    "Power.Import.Offered",
                    "Power.Import.Minimum",
                    "Power.Offered",
                    "Power.Reactive.Export",
                    "Power.Reactive.Import",
                    "SoC",
                    "Voltage",
                    "Voltage.Minimum",
                    "Voltage.Maximum"
                ]
            },
            "OperationModeEnumType": {
                "description": "*(2.1)* The _operationMode_ that is currently in effect for the transaction.\r\n",
                "javaType": "OperationModeEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Idle",
                    "ChargingOnly",
                    "CentralSetpoint",
                    "ExternalSetpoint",
                    "ExternalLimits",
                    "CentralFrequency",
                    "LocalFrequency",
                    "LocalLoadBalancing"
                ]
            },
            "PhaseEnumType": {
                "description": "Indicates how the measured value is to be interpreted. For instance between L1 and neutral (L1-N) Please note that not all values of phase are applicable to all Measurands. When phase is absent, the measured value is interpreted as an overall value.\r\n",
                "javaType": "PhaseEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "L1",
                    "L2",
                    "L3",
                    "N",
                    "L1-N",
                    "L2-N",
                    "L3-N",
                    "L1-L2",
                    "L2-L3",
                    "L3-L1"
                ]
            },
            "PreconditioningStatusEnumType": {
                "description": "*(2.1)* The current preconditioning status of the BMS in the EV. Default value is Unknown.\r\n",
                "javaType": "PreconditioningStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Unknown",
                    "Ready",
                    "NotReady",
                    "Preconditioning"
                ]
            },
            "ReadingContextEnumType": {
                "description": "Type of detail value: start, end or sample. Default = \"Sample.Periodic\"\r\n",
                "javaType": "ReadingContextEnum",
                "type": "string",
                "default": "Sample.Periodic",
                "additionalProperties": false,
                "enum": [
                    "Interruption.Begin",
                    "Interruption.End",
                    "Other",
                    "Sample.Clock",
                    "Sample.Periodic",
                    "Transaction.Begin",
                    "Transaction.End",
                    "Trigger"
                ]
            },
            "ReasonEnumType": {
                "description": "The _stoppedReason_ is the reason/event that initiated the process of stopping the transaction. It will normally be the user stopping authorization via card (Local or MasterPass) or app (Remote), but it can also be CSMS revoking authorization (DeAuthorized), or disconnecting the EV when TxStopPoint = EVConnected (EVDisconnected). Most other reasons are related to technical faults or energy limitations. +\r\nMAY only be omitted when _stoppedReason_ is \"Local\"\r\n\r\n\r\n",
                "javaType": "ReasonEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "DeAuthorized",
                    "EmergencyStop",
                    "EnergyLimitReached",
                    "EVDisconnected",
                    "GroundFault",
                    "ImmediateReset",
                    "MasterPass",
                    "Local",
                    "LocalOutOfCredit",
                    "Other",
                    "OvercurrentFault",
                    "PowerLoss",
                    "PowerQuality",
                    "Reboot",
                    "Remote",
                    "SOCLimitReached",
                    "StoppedByEV",
                    "TimeLimitReached",
                    "Timeout",
                    "ReqEnergyTransferRejected"
                ]
            },
            "TariffCostEnumType": {
                "description": "Type of cost: normal or the minimum or maximum cost.\r\n",
                "javaType": "TariffCostEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "NormalCost",
                    "MinCost",
                    "MaxCost"
                ]
            },
            "TransactionEventEnumType": {
                "description": "This contains the type of this event.\r\nThe first TransactionEvent of a transaction SHALL contain: \"Started\" The last TransactionEvent of a transaction SHALL contain: \"Ended\" All others SHALL contain: \"Updated\"\r\n",
                "javaType": "TransactionEventEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Ended",
                    "Started",
                    "Updated"
                ]
            },
            "TriggerReasonEnumType": {
                "description": "Reason the Charging Station sends this message to the CSMS\r\n",
                "javaType": "TriggerReasonEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "AbnormalCondition",
                    "Authorized",
                    "CablePluggedIn",
                    "ChargingRateChanged",
                    "ChargingStateChanged",
                    "CostLimitReached",
                    "Deauthorized",
                    "EnergyLimitReached",
                    "EVCommunicationLost",
                    "EVConnectTimeout",
                    "EVDeparted",
                    "EVDetected",
                    "LimitSet",
                    "MeterValueClock",
                    "MeterValuePeriodic",
                    "OperationModeChanged",
                    "RemoteStart",
                    "RemoteStop",
                    "ResetCommand",
                    "RunningCost",
                    "SignedDataReceived",
                    "SoCLimitReached",
                    "StopAuthorized",
                    "TariffChanged",
                    "TariffNotAccepted",
                    "TimeLimitReached",
                    "Trigger",
                    "TxResumed",
                    "UnlockCommand"
                ]
            },
            "AdditionalInfoType": {
                "description": "Contains a case insensitive identifier to use for the authorization and the type of authorization to support multiple forms of identifiers.\r\n",
                "javaType": "AdditionalInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "additionalIdToken": {
                        "description": "*(2.1)* This field specifies the additional IdToken.\r\n",
                        "type": "string",
                        "maxLength": 255
                    },
                    "type": {
                        "description": "_additionalInfo_ can be used to send extra information to CSMS in addition to the regular authorization with _IdToken_. _AdditionalInfo_ contains one or more custom _types_, which need to be agreed upon by all parties involved. When the _type_ is not supported, the CSMS/Charging Station MAY ignore the _additionalInfo_.\r\n\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "additionalIdToken",
                    "type"
                ]
            },
            "ChargingPeriodType": {
                "description": "A ChargingPeriodType consists of a start time, and a list of possible values that influence this period, for example: amount of energy charged this period, maximum current during this period etc.\r\n\r\n",
                "javaType": "ChargingPeriod",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "dimensions": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/CostDimensionType"
                        },
                        "minItems": 1
                    },
                    "tariffId": {
                        "description": "Unique identifier of the Tariff that was used to calculate cost. If not provided, then cost was calculated by some other means.\r\n\r\n",
                        "type": "string",
                        "maxLength": 60
                    },
                    "startPeriod": {
                        "description": "Start timestamp of charging period. A period ends when the next period starts. The last period ends when the session ends.\r\n\r\n",
                        "type": "string",
                        "format": "date-time"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "startPeriod"
                ]
            },
            "CostDetailsType": {
                "description": "CostDetailsType contains the cost as calculated by Charging Station based on provided TariffType.\r\n\r\nNOTE: Reservation is not shown as a _chargingPeriod_, because it took place outside of the transaction.\r\n\r\n",
                "javaType": "CostDetails",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "chargingPeriods": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/ChargingPeriodType"
                        },
                        "minItems": 1
                    },
                    "totalCost": {
                        "$ref": "#/definitions/TotalCostType"
                    },
                    "totalUsage": {
                        "$ref": "#/definitions/TotalUsageType"
                    },
                    "failureToCalculate": {
                        "description": "If set to true, then Charging Station has failed to calculate the cost.\r\n\r\n",
                        "type": "boolean"
                    },
                    "failureReason": {
                        "description": "Optional human-readable reason text in case of failure to calculate.\r\n\r\n",
                        "type": "string",
                        "maxLength": 500
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "totalCost",
                    "totalUsage"
                ]
            },
            "CostDimensionType": {
                "description": "Volume consumed of cost dimension.\r\n",
                "javaType": "CostDimension",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "type": {
                        "$ref": "#/definitions/CostDimensionEnumType"
                    },
                    "volume": {
                        "description": "Volume of the dimension consumed, measured according to the dimension type.\r\n\r\n",
                        "type": "number"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "type",
                    "volume"
                ]
            },
            "EVSEType": {
                "description": "Electric Vehicle Supply Equipment\r\n",
                "javaType": "EVSE",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "id": {
                        "description": "EVSE Identifier. This contains a number (&gt; 0) designating an EVSE of the Charging Station.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "connectorId": {
                        "description": "An id to designate a specific connector (on an EVSE) by connector index number.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "id"
                ]
            },
            "IdTokenType": {
                "description": "Contains a case insensitive identifier to use for the authorization and the type of authorization to support multiple forms of identifiers.\r\n",
                "javaType": "IdToken",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "additionalInfo": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/AdditionalInfoType"
                        },
                        "minItems": 1
                    },
                    "idToken": {
                        "description": "*(2.1)* IdToken is case insensitive. Might hold the hidden id of an RFID tag, but can for example also contain a UUID.\r\n",
                        "type": "string",
                        "maxLength": 255
                    },
                    "type": {
                        "description": "*(2.1)* Enumeration of possible idToken types. Values defined in Appendix as IdTokenEnumStringType.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "idToken",
                    "type"
                ]
            },
            "MeterValueType": {
                "description": "Collection of one or more sampled values in MeterValuesRequest and TransactionEvent. All sampled values in a MeterValue are sampled at the same point in time.\r\n",
                "javaType": "MeterValue",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "sampledValue": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/SampledValueType"
                        },
                        "minItems": 1
                    },
                    "timestamp": {
                        "description": "Timestamp for measured value(s).\r\n",
                        "type": "string",
                        "format": "date-time"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "timestamp",
                    "sampledValue"
                ]
            },
            "PriceType": {
                "description": "Price with and without tax. At least one of _exclTax_, _inclTax_ must be present.\r\n",
                "javaType": "Price",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "exclTax": {
                        "description": "Price/cost excluding tax. Can be absent if _inclTax_ is present.\r\n",
                        "type": "number"
                    },
                    "inclTax": {
                        "description": "Price/cost including tax. Can be absent if _exclTax_ is present.\r\n",
                        "type": "number"
                    },
                    "taxRates": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/TaxRateType"
                        },
                        "minItems": 1,
                        "maxItems": 5
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                }
            },
            "SampledValueType": {
                "description": "Single sampled value in MeterValues. Each value can be accompanied by optional fields.\r\n\r\nTo save on mobile data usage, default values of all of the optional fields are such that. The value without any additional fields will be interpreted, as a register reading of active import energy in Wh (Watt-hour) units.\r\n",
                "javaType": "SampledValue",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "value": {
                        "description": "Indicates the measured value.\r\n\r\n",
                        "type": "number"
                    },
                    "measurand": {
                        "$ref": "#/definitions/MeasurandEnumType"
                    },
                    "context": {
                        "$ref": "#/definitions/ReadingContextEnumType"
                    },
                    "phase": {
                        "$ref": "#/definitions/PhaseEnumType"
                    },
                    "location": {
                        "$ref": "#/definitions/LocationEnumType"
                    },
                    "signedMeterValue": {
                        "$ref": "#/definitions/SignedMeterValueType"
                    },
                    "unitOfMeasure": {
                        "$ref": "#/definitions/UnitOfMeasureType"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "value"
                ]
            },
            "SignedMeterValueType": {
                "description": "Represent a signed version of the meter value.\r\n",
                "javaType": "SignedMeterValue",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "signedMeterData": {
                        "description": "Base64 encoded, contains the signed data from the meter in the format specified in _encodingMethod_, which might contain more then just the meter value. It can contain information like timestamps, reference to a customer etc.\r\n",
                        "type": "string",
                        "maxLength": 32768
                    },
                    "signingMethod": {
                        "description": "*(2.1)* Method used to create the digital signature. Optional, if already included in _signedMeterData_. Standard values for this are defined in Appendix as SigningMethodEnumStringType.\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "encodingMethod": {
                        "description": "Format used by the energy meter to encode the meter data. For example: OCMF or EDL.\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "publicKey": {
                        "description": "*(2.1)* Base64 encoded, sending depends on configuration variable _PublicKeyWithSignedMeterValue_.\r\n",
                        "type": "string",
                        "maxLength": 2500
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "signedMeterData",
                    "encodingMethod"
                ]
            },
            "TaxRateType": {
                "description": "Tax percentage\r\n",
                "javaType": "TaxRate",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "type": {
                        "description": "Type of this tax, e.g.  \"Federal \",  \"State\", for information on receipt.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "tax": {
                        "description": "Tax percentage\r\n",
                        "type": "number"
                    },
                    "stack": {
                        "description": "Stack level for this type of tax. Default value, when absent, is 0. +\r\n_stack_ = 0: tax on net price; +\r\n_stack_ = 1: tax added on top of _stack_ 0; +\r\n_stack_ = 2: tax added on top of _stack_ 1, etc. \r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "type",
                    "tax"
                ]
            },
            "TotalCostType": {
                "description": "This contains the cost calculated during a transaction. It is used both for running cost and final cost of the transaction.\r\n",
                "javaType": "TotalCost",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "currency": {
                        "description": "Currency of the costs in ISO 4217 Code.\r\n\r\n",
                        "type": "string",
                        "maxLength": 3
                    },
                    "typeOfCost": {
                        "$ref": "#/definitions/TariffCostEnumType"
                    },
                    "fixed": {
                        "$ref": "#/definitions/PriceType"
                    },
                    "energy": {
                        "$ref": "#/definitions/PriceType"
                    },
                    "chargingTime": {
                        "$ref": "#/definitions/PriceType"
                    },
                    "idleTime": {
                        "$ref": "#/definitions/PriceType"
                    },
                    "reservationTime": {
                        "$ref": "#/definitions/PriceType"
                    },
                    "reservationFixed": {
                        "$ref": "#/definitions/PriceType"
                    },
                    "total": {
                        "$ref": "#/definitions/TotalPriceType"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "currency",
                    "typeOfCost",
                    "total"
                ]
            },
            "TotalPriceType": {
                "description": "Total cost with and without tax. Contains the total of energy, charging time, idle time, fixed and reservation costs including and/or excluding tax.\r\n",
                "javaType": "TotalPrice",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "exclTax": {
                        "description": "Price/cost excluding tax. Can be absent if _inclTax_ is present.\r\n",
                        "type": "number"
                    },
                    "inclTax": {
                        "description": "Price/cost including tax. Can be absent if _exclTax_ is present.\r\n",
                        "type": "number"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                }
            },
            "TotalUsageType": {
                "description": "This contains the calculated usage of energy, charging time and idle time during a transaction.\r\n",
                "javaType": "TotalUsage",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "energy": {
                        "type": "number"
                    },
                    "chargingTime": {
                        "description": "Total duration of the charging session (including the duration of charging and not charging), in seconds.\r\n\r\n\r\n",
                        "type": "integer"
                    },
                    "idleTime": {
                        "description": "Total duration of the charging session where the EV was not charging (no energy was transferred between EVSE and EV), in seconds.\r\n\r\n\r\n",
                        "type": "integer"
                    },
                    "reservationTime": {
                        "description": "Total time of reservation in seconds.\r\n",
                        "type": "integer"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "energy",
                    "chargingTime",
                    "idleTime"
                ]
            },
            "TransactionLimitType": {
                "description": "Cost, energy, time or SoC limit for a transaction.\r\n",
                "javaType": "TransactionLimit",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "maxCost": {
                        "description": "Maximum allowed cost of transaction in currency of tariff.\r\n",
                        "type": "number"
                    },
                    "maxEnergy": {
                        "description": "Maximum allowed energy in Wh to charge in transaction.\r\n",
                        "type": "number"
                    },
                    "maxTime": {
                        "description": "Maximum duration of transaction in seconds from start to end.\r\n",
                        "type": "integer"
                    },
                    "maxSoC": {
                        "description": "Maximum State of Charge of EV in percentage.\r\n",
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 100
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                }
            },
            "TransactionType": {
                "javaType": "Transaction",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "transactionId": {
                        "description": "This contains the Id of the transaction.\r\n",
                        "type": "string",
                        "maxLength": 36
                    },
                    "chargingState": {
                        "$ref": "#/definitions/ChargingStateEnumType"
                    },
                    "timeSpentCharging": {
                        "description": "Contains the total time that energy flowed from EVSE to EV during the transaction (in seconds). Note that timeSpentCharging is smaller or equal to the duration of the transaction.\r\n",
                        "type": "integer"
                    },
                    "stoppedReason": {
                        "$ref": "#/definitions/ReasonEnumType"
                    },
                    "remoteStartId": {
                        "description": "The ID given to remote start request (&lt;&lt;requeststarttransactionrequest, RequestStartTransactionRequest&gt;&gt;. This enables to CSMS to match the started transaction to the given start request.\r\n",
                        "type": "integer"
                    },
                    "operationMode": {
                        "$ref": "#/definitions/OperationModeEnumType"
                    },
                    "tariffId": {
                        "description": "*(2.1)* Id of tariff in use for transaction\r\n",
                        "type": "string",
                        "maxLength": 60
                    },
                    "transactionLimit": {
                        "$ref": "#/definitions/TransactionLimitType"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "transactionId"
                ]
            },
            "UnitOfMeasureType": {
                "description": "Represents a UnitOfMeasure with a multiplier\r\n",
                "javaType": "UnitOfMeasure",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "unit": {
                        "description": "Unit of the value. Default = \"Wh\" if the (default) measurand is an \"Energy\" type.\r\nThis field SHALL use a value from the list Standardized Units of Measurements in Part 2 Appendices. \r\nIf an applicable unit is available in that list, otherwise a \"custom\" unit might be used.\r\n",
                        "type": "string",
                        "default": "Wh",
                        "maxLength": 20
                    },
                    "multiplier": {
                        "description": "Multiplier, this value represents the exponent to base 10. I.e. multiplier 3 means 10 raised to the 3rd power. Default is 0. +\r\nThe _multiplier_ only multiplies the value of the measurand. It does not specify a conversion between units, for example, kW and W.\r\n",
                        "type": "integer",
                        "default": 0
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                }
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "costDetails": {
                "$ref": "#/definitions/CostDetailsType"
            },
            "eventType": {
                "$ref": "#/definitions/TransactionEventEnumType"
            },
            "meterValue": {
                "type": "array",
                "additionalItems": false,
                "items": {
                    "$ref": "#/definitions/MeterValueType"
                },
                "minItems": 1
            },
            "timestamp": {
                "description": "The date and time at which this transaction event occurred.\r\n",
                "type": "string",
                "format": "date-time"
            },
            "triggerReason": {
                "$ref": "#/definitions/TriggerReasonEnumType"
            },
            "seqNo": {
                "description": "Incremental sequence number, helps with determining if all messages of a transaction have been received.\r\n",
                "type": "integer",
                "minimum": 0
            },
            "offline": {
                "description": "Indication that this transaction event happened when the Charging Station was offline. Default = false, meaning: the event occurred when the Charging Station was online.\r\n",
                "type": "boolean",
                "default": false
            },
            "numberOfPhasesUsed": {
                "description": "If the Charging Station is able to report the number of phases used, then it SHALL provide it.\r\nWhen omitted the CSMS may be able to determine the number of phases used as follows: +\r\n1: The numberPhases in the currently used ChargingSchedule. +\r\n2: The number of phases provided via device management.\r\n",
                "type": "integer",
                "minimum": 0,
                "maximum": 3
            },
            "cableMaxCurrent": {
                "description": "The maximum current of the connected cable in Ampere (A).\r\n",
                "type": "integer"
            },
            "reservationId": {
                "description": "This contains the Id of the reservation that terminates as a result of this transaction.\r\n",
                "type": "integer",
                "minimum": 0
            },
            "preconditioningStatus": {
                "$ref": "#/definitions/PreconditioningStatusEnumType"
            },
            "evseSleep": {
                "description": "*(2.1)* True when EVSE electronics are in sleep mode for this transaction. Default value (when absent) is false.\r\n\r\n",
                "type": "boolean"
            },
            "transactionInfo": {
                "$ref": "#/definitions/TransactionType"
            },
            "evse": {
                "$ref": "#/definitions/EVSEType"
            },
            "idToken": {
                "$ref": "#/definitions/IdTokenType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "eventType",
            "timestamp",
            "triggerReason",
            "seqNo",
            "transactionInfo"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:TransactionEventResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "AuthorizationStatusEnumType": {
                "description": "Current status of the ID Token.\r\n",
                "javaType": "AuthorizationStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Accepted",
                    "Blocked",
                    "ConcurrentTx",
                    "Expired",
                    "Invalid",
                    "NoCredit",
                    "NotAllowedTypeEVSE",
                    "NotAtThisLocation",
                    "NotAtThisTime",
                    "Unknown"
                ]
            },
            "MessageFormatEnumType": {
                "description": "Format of the message.\r\n",
                "javaType": "MessageFormatEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "ASCII",
                    "HTML",
                    "URI",
                    "UTF8",
                    "QRCODE"
                ]
            },
            "AdditionalInfoType": {
                "description": "Contains a case insensitive identifier to use for the authorization and the type of authorization to support multiple forms of identifiers.\r\n",
                "javaType": "AdditionalInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "additionalIdToken": {
                        "description": "*(2.1)* This field specifies the additional IdToken.\r\n",
                        "type": "string",
                        "maxLength": 255
                    },
                    "type": {
                        "description": "_additionalInfo_ can be used to send extra information to CSMS in addition to the regular authorization with _IdToken_. _AdditionalInfo_ contains one or more custom _types_, which need to be agreed upon by all parties involved. When the _type_ is not supported, the CSMS/Charging Station MAY ignore the _additionalInfo_.\r\n\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "additionalIdToken",
                    "type"
                ]
            },
            "IdTokenInfoType": {
                "description": "Contains status information about an identifier.\r\nIt is advised to not stop charging for a token that expires during charging, as ExpiryDate is only used for caching purposes. If ExpiryDate is not given, the status has no end date.\r\n",
                "javaType": "IdTokenInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "status": {
                        "$ref": "#/definitions/AuthorizationStatusEnumType"
                    },
                    "cacheExpiryDateTime": {
                        "description": "Date and Time after which the token must be considered invalid.\r\n",
                        "type": "string",
                        "format": "date-time"
                    },
                    "chargingPriority": {
                        "description": "Priority from a business point of view. Default priority is 0, The range is from -9 to 9. Higher values indicate a higher priority. The chargingPriority in &lt;&lt;transactioneventresponse,TransactionEventResponse&gt;&gt; overrules this one. \r\n",
                        "type": "integer"
                    },
                    "groupIdToken": {
                        "$ref": "#/definitions/IdTokenType"
                    },
                    "language1": {
                        "description": "Preferred user interface language of identifier user. Contains a language code as defined in &lt;&lt;ref-RFC5646,[RFC5646]&gt;&gt;.\r\n\r\n",
                        "type": "string",
                        "maxLength": 8
                    },
                    "language2": {
                        "description": "Second preferred user interface language of identifier user. Don’t use when language1 is omitted, has to be different from language1. Contains a language code as defined in &lt;&lt;ref-RFC5646,[RFC5646]&gt;&gt;.\r\n",
                        "type": "string",
                        "maxLength": 8
                    },
                    "evseId": {
                        "description": "Only used when the IdToken is only valid for one or more specific EVSEs, not for the entire Charging Station.\r\n\r\n",
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "type": "integer",
                            "minimum": 0
                        },
                        "minItems": 1
                    },
                    "personalMessage": {
                        "$ref": "#/definitions/MessageContentType"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "status"
                ]
            },
            "IdTokenType": {
                "description": "Contains a case insensitive identifier to use for the authorization and the type of authorization to support multiple forms of identifiers.\r\n",
                "javaType": "IdToken",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "additionalInfo": {
                        "type": "array",
                        "additionalItems": false,
                        "items": {
                            "$ref": "#/definitions/AdditionalInfoType"
                        },
                        "minItems": 1
                    },
                    "idToken": {
                        "description": "*(2.1)* IdToken is case insensitive. Might hold the hidden id of an RFID tag, but can for example also contain a UUID.\r\n",
                        "type": "string",
                        "maxLength": 255
                    },
                    "type": {
                        "description": "*(2.1)* Enumeration of possible idToken types. Values defined in Appendix as IdTokenEnumStringType.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "idToken",
                    "type"
                ]
            },
            "MessageContentType": {
                "description": "Contains message details, for a message to be displayed on a Charging Station.\r\n\r\n",
                "javaType": "MessageContent",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "format": {
                        "$ref": "#/definitions/MessageFormatEnumType"
                    },
                    "language": {
                        "description": "Message language identifier. Contains a language code as defined in &lt;&lt;ref-RFC5646,[RFC5646]&gt;&gt;.\r\n",
                        "type": "string",
                        "maxLength": 8
                    },
                    "content": {
                        "description": "*(2.1)* Required. Message contents. +\r\nMaximum length supported by Charging Station is given in OCPPCommCtrlr.FieldLength[\"MessageContentType.content\"].\r\n    Maximum length defaults to 1024.\r\n\r\n",
                        "type": "string",
                        "maxLength": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "format",
                    "content"
                ]
            },
            "TransactionLimitType": {
                "description": "Cost, energy, time or SoC limit for a transaction.\r\n",
                "javaType": "TransactionLimit",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "maxCost": {
                        "description": "Maximum allowed cost of transaction in currency of tariff.\r\n",
                        "type": "number"
                    },
                    "maxEnergy": {
                        "description": "Maximum allowed energy in Wh to charge in transaction.\r\n",
                        "type": "number"
                    },
                    "maxTime": {
                        "description": "Maximum duration of transaction in seconds from start to end.\r\n",
                        "type": "integer"
                    },
                    "maxSoC": {
                        "description": "Maximum State of Charge of EV in percentage.\r\n",
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 100
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                }
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "totalCost": {
                "description": "When _eventType_ of TransactionEventRequest is Updated, then this value contains the running cost. When _eventType_ of TransactionEventRequest is Ended, then this contains the final total cost of this transaction, including taxes, in the currency configured with the Configuration Variable: Currency. Absence of this value does not imply that the transaction was free. To indicate a free transaction, the CSMS SHALL send a value of 0.00.\r\n",
                "type": "number"
            },
            "chargingPriority": {
                "description": "Priority from a business point of view. Default priority is 0, The range is from -9 to 9. Higher values indicate a higher priority. The chargingPriority in &lt;&lt;transactioneventresponse,TransactionEventResponse&gt;&gt; is temporarily, so it may not be set in the &lt;&lt;cmn_idtokeninfotype,IdTokenInfoType&gt;&gt; afterwards. Also the chargingPriority in &lt;&lt;transactioneventresponse,TransactionEventResponse&gt;&gt; has a higher priority than the one in &lt;&lt;cmn_idtokeninfotype,IdTokenInfoType&gt;&gt;.  \r\n",
                "type": "integer"
            },
            "idTokenInfo": {
                "$ref": "#/definitions/IdTokenInfoType"
            },
            "transactionLimit": {
                "$ref": "#/definitions/TransactionLimitType"
            },
            "updatedPersonalMessage": {
                "$ref": "#/definitions/MessageContentType"
            },
            "updatedPersonalMessageExtra": {
                "type": "array",
                "additionalItems": false,
                "items": {
                    "$ref": "#/definitions/MessageContentType"
                },
                "minItems": 1,
                "maxItems": 4
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        }
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:TriggerMessageRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "MessageTriggerEnumType": {
                "description": "Type of message to be triggered.\r\n",
                "javaType": "MessageTriggerEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "BootNotification",
                    "LogStatusNotification",
                    "FirmwareStatusNotification",
                    "Heartbeat",
                    "MeterValues",
                    "SignChargingStationCertificate",
                    "SignV2GCertificate",
                    "SignV2G20Certificate",
                    "StatusNotification",
                    "TransactionEvent",
                    "SignCombinedCertificate",
                    "PublishFirmwareStatusNotification",
                    "CustomTrigger"
                ]
            },
            "EVSEType": {
                "description": "Electric Vehicle Supply Equipment\r\n",
                "javaType": "EVSE",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "id": {
                        "description": "EVSE Identifier. This contains a number (&gt; 0) designating an EVSE of the Charging Station.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "connectorId": {
                        "description": "An id to designate a specific connector (on an EVSE) by connector index number.\r\n",
                        "type": "integer",
                        "minimum": 0
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "id"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "evse": {
                "$ref": "#/definitions/EVSEType"
            },
            "requestedMessage": {
                "$ref": "#/definitions/MessageTriggerEnumType"
            },
            "customTrigger": {
                "description": "*(2.1)* When _requestedMessage_ = `CustomTrigger` this will trigger sending the corresponding message in field _customTrigger_, if supported by Charging Station.\r\n\r\n",
                "type": "string",
                "maxLength": 50
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "requestedMessage"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:TriggerMessageResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "TriggerMessageStatusEnumType": {
                "description": "Indicates whether the Charging Station will send the requested notification or not.\r\n",
                "javaType": "TriggerMessageStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Accepted",
                    "Rejected",
                    "NotImplemented"
                ]
            },
            "StatusInfoType": {
                "description": "Element providing more information about the status.\r\n",
                "javaType": "StatusInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "reasonCode": {
                        "description": "A predefined code for the reason why the status is returned in this response. The string is case-insensitive.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "additionalInfo": {
                        "description": "Additional text to provide detailed information.\r\n",
                        "type": "string",
                        "maxLength": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "reasonCode"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "status": {
                "$ref": "#/definitions/TriggerMessageStatusEnumType"
            },
            "statusInfo": {
                "$ref": "#/definitions/StatusInfoType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "status"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:UnlockConnectorRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "evseId": {
                "description": "This contains the identifier of the EVSE for which a connector needs to be unlocked.\r\n",
                "type": "integer",
                "minimum": 0
            },
            "connectorId": {
                "description": "This contains the identifier of the connector that needs to be unlocked.\r\n",
                "type": "integer",
                "minimum": 0
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "evseId",
            "connectorId"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:UnlockConnectorResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "UnlockStatusEnumType": {
                "description": "This indicates whether the Charging Station has unlocked the connector.\r\n",
                "javaType": "UnlockStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Unlocked",
                    "UnlockFailed",
                    "OngoingAuthorizedTransaction",
                    "UnknownConnector"
                ]
            },
            "StatusInfoType": {
                "description": "Element providing more information about the status.\r\n",
                "javaType": "StatusInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "reasonCode": {
                        "description": "A predefined code for the reason why the status is returned in this response. The string is case-insensitive.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "additionalInfo": {
                        "description": "Additional text to provide detailed information.\r\n",
                        "type": "string",
                        "maxLength": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "reasonCode"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "status": {
                "$ref": "#/definitions/UnlockStatusEnumType"
            },
            "statusInfo": {
                "$ref": "#/definitions/StatusInfoType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "status"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:UnpublishFirmwareRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "checksum": {
                "description": "The MD5 checksum over the entire firmware file as a hexadecimal string of length 32. \r\n",
                "type": "string",
                "maxLength": 32
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "checksum"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:UnpublishFirmwareResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "UnpublishFirmwareStatusEnumType": {
                "description": "Indicates whether the Local Controller succeeded in unpublishing the firmware.\r\n",
                "javaType": "UnpublishFirmwareStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "DownloadOngoing",
                    "NoFirmware",
                    "Unpublished"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "status": {
                "$ref": "#/definitions/UnpublishFirmwareStatusEnumType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "status"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:UpdateDynamicScheduleRequest",
        "description": "Id of dynamic charging profile to update.\r\n",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "ChargingScheduleUpdateType": {
                "description": "Updates to a ChargingSchedulePeriodType for dynamic charging profiles.\r\n\r\n",
                "javaType": "ChargingScheduleUpdate",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "limit": {
                        "description": "Optional only when not required by the _operationMode_, as in CentralSetpoint, ExternalSetpoint, ExternalLimits, LocalFrequency,  LocalLoadBalancing. +\r\nCharging rate limit during the schedule period, in the applicable _chargingRateUnit_. \r\nThis SHOULD be a non-negative value; a negative value is only supported for backwards compatibility with older systems that use a negative value to specify a discharging limit.\r\nFor AC this field represents the sum of all phases, unless values are provided for L2 and L3, in which case this field represents phase L1.\r\n",
                        "type": "number"
                    },
                    "limit_L2": {
                        "description": "*(2.1)* Charging rate limit on phase L2  in the applicable _chargingRateUnit_. \r\n",
                        "type": "number"
                    },
                    "limit_L3": {
                        "description": "*(2.1)* Charging rate limit on phase L3  in the applicable _chargingRateUnit_. \r\n",
                        "type": "number"
                    },
                    "dischargeLimit": {
                        "description": "*(2.1)* Limit in _chargingRateUnit_ that the EV is allowed to discharge with. Note, these are negative values in order to be consistent with _setpoint_, which can be positive and negative.  +\r\nFor AC this field represents the sum of all phases, unless values are provided for L2 and L3, in which case this field represents phase L1.\r\n",
                        "type": "number",
                        "maximum": 0
                    },
                    "dischargeLimit_L2": {
                        "description": "*(2.1)* Limit in _chargingRateUnit_ on phase L2 that the EV is allowed to discharge with. \r\n",
                        "type": "number",
                        "maximum": 0
                    },
                    "dischargeLimit_L3": {
                        "description": "*(2.1)* Limit in _chargingRateUnit_ on phase L3 that the EV is allowed to discharge with. \r\n",
                        "type": "number",
                        "maximum": 0
                    },
                    "setpoint": {
                        "description": "*(2.1)* Setpoint in _chargingRateUnit_ that the EV should follow as close as possible. Use negative values for discharging. +\r\nWhen a limit and/or _dischargeLimit_ are given the overshoot when following _setpoint_ must remain within these values.\r\nThis field represents the sum of all phases, unless values are provided for L2 and L3, in which case this field represents phase L1.\r\n",
                        "type": "number"
                    },
                    "setpoint_L2": {
                        "description": "*(2.1)* Setpoint in _chargingRateUnit_ that the EV should follow on phase L2 as close as possible.\r\n",
                        "type": "number"
                    },
                    "setpoint_L3": {
                        "description": "*(2.1)* Setpoint in _chargingRateUnit_ that the EV should follow on phase L3 as close as possible. \r\n",
                        "type": "number"
                    },
                    "setpointReactive": {
                        "description": "*(2.1)* Setpoint for reactive power (or current) in _chargingRateUnit_ that the EV should follow as closely as possible. Positive values for inductive, negative for capacitive reactive power or current.  +\r\nThis field represents the sum of all phases, unless values are provided for L2 and L3, in which case this field represents phase L1.\r\n",
                        "type": "number"
                    },
                    "setpointReactive_L2": {
                        "description": "*(2.1)* Setpoint for reactive power (or current) in _chargingRateUnit_ that the EV should follow on phase L2 as closely as possible. \r\n",
                        "type": "number"
                    },
                    "setpointReactive_L3": {
                        "description": "*(2.1)* Setpoint for reactive power (or current) in _chargingRateUnit_ that the EV should follow on phase L3 as closely as possible. \r\n",
                        "type": "number"
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                }
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "chargingProfileId": {
                "description": "Id of charging profile to update.\r\n",
                "type": "integer"
            },
            "scheduleUpdate": {
                "$ref": "#/definitions/ChargingScheduleUpdateType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "chargingProfileId",
            "scheduleUpdate"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:UpdateDynamicScheduleResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "ChargingProfileStatusEnumType": {
                "description": "Returns whether message was processed successfully.\r\n",
                "javaType": "ChargingProfileStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Accepted",
                    "Rejected"
                ]
            },
            "StatusInfoType": {
                "description": "Element providing more information about the status.\r\n",
                "javaType": "StatusInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "reasonCode": {
                        "description": "A predefined code for the reason why the status is returned in this response. The string is case-insensitive.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "additionalInfo": {
                        "description": "Additional text to provide detailed information.\r\n",
                        "type": "string",
                        "maxLength": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "reasonCode"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "status": {
                "$ref": "#/definitions/ChargingProfileStatusEnumType"
            },
            "statusInfo": {
                "$ref": "#/definitions/StatusInfoType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "status"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:UpdateFirmwareRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "FirmwareType": {
                "description": "Represents a copy of the firmware that can be loaded/updated on the Charging Station.\r\n",
                "javaType": "Firmware",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "location": {
                        "description": "URI defining the origin of the firmware.\r\n",
                        "type": "string",
                        "maxLength": 2000
                    },
                    "retrieveDateTime": {
                        "description": "Date and time at which the firmware shall be retrieved.\r\n",
                        "type": "string",
                        "format": "date-time"
                    },
                    "installDateTime": {
                        "description": "Date and time at which the firmware shall be installed.\r\n",
                        "type": "string",
                        "format": "date-time"
                    },
                    "signingCertificate": {
                        "description": "Certificate with which the firmware was signed.\r\nPEM encoded X.509 certificate.\r\n",
                        "type": "string",
                        "maxLength": 5500
                    },
                    "signature": {
                        "description": "Base64 encoded firmware signature.\r\n",
                        "type": "string",
                        "maxLength": 800
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "location",
                    "retrieveDateTime"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "retries": {
                "description": "This specifies how many times Charging Station must retry to download the firmware before giving up. If this field is not present, it is left to Charging Station to decide how many times it wants to retry.\r\nIf the value is 0, it means: no retries.\r\n",
                "type": "integer",
                "minimum": 0
            },
            "retryInterval": {
                "description": "The interval in seconds after which a retry may be attempted. If this field is not present, it is left to Charging Station to decide how long to wait between attempts.\r\n",
                "type": "integer"
            },
            "requestId": {
                "description": "The Id of this request\r\n",
                "type": "integer"
            },
            "firmware": {
                "$ref": "#/definitions/FirmwareType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "requestId",
            "firmware"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:UpdateFirmwareResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "UpdateFirmwareStatusEnumType": {
                "description": "This field indicates whether the Charging Station was able to accept the request.\r\n\r\n",
                "javaType": "UpdateFirmwareStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Accepted",
                    "Rejected",
                    "AcceptedCanceled",
                    "InvalidCertificate",
                    "RevokedCertificate"
                ]
            },
            "StatusInfoType": {
                "description": "Element providing more information about the status.\r\n",
                "javaType": "StatusInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "reasonCode": {
                        "description": "A predefined code for the reason why the status is returned in this response. The string is case-insensitive.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "additionalInfo": {
                        "description": "Additional text to provide detailed information.\r\n",
                        "type": "string",
                        "maxLength": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "reasonCode"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "status": {
                "$ref": "#/definitions/UpdateFirmwareStatusEnumType"
            },
            "statusInfo": {
                "$ref": "#/definitions/StatusInfoType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "status"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:UsePriorityChargingRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "transactionId": {
                "description": "The transaction for which priority charging is requested.\r\n",
                "type": "string",
                "maxLength": 36
            },
            "activate": {
                "description": "True to request priority charging.\r\nFalse to request stopping priority charging.\r\n",
                "type": "boolean"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "transactionId",
            "activate"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:UsePriorityChargingResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "PriorityChargingStatusEnumType": {
                "description": "Result of the request.\r\n",
                "javaType": "PriorityChargingStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Accepted",
                    "Rejected",
                    "NoProfile"
                ]
            },
            "StatusInfoType": {
                "description": "Element providing more information about the status.\r\n",
                "javaType": "StatusInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "reasonCode": {
                        "description": "A predefined code for the reason why the status is returned in this response. The string is case-insensitive.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "additionalInfo": {
                        "description": "Additional text to provide detailed information.\r\n",
                        "type": "string",
                        "maxLength": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "reasonCode"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "status": {
                "$ref": "#/definitions/PriorityChargingStatusEnumType"
            },
            "statusInfo": {
                "$ref": "#/definitions/StatusInfoType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "status"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:VatNumberValidationRequest",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "vatNumber": {
                "description": "VAT number to check.\r\n\r\n",
                "type": "string",
                "maxLength": 20
            },
            "evseId": {
                "description": "EVSE id for which check is done\r\n\r\n",
                "type": "integer",
                "minimum": 0
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "vatNumber"
        ]
    },
    {
        "$schema": "http://json-schema.org/draft-07/schema",
        "$id": "urn:VatNumberValidationResponse",
        "comment": "OCPP 2.1 Edition 1 (c) OCA, Creative Commons Attribution-NoDerivatives 4.0 International Public License",
        "definitions": {
            "GenericStatusEnumType": {
                "description": "Result of operation.\r\n",
                "javaType": "GenericStatusEnum",
                "type": "string",
                "additionalProperties": false,
                "enum": [
                    "Accepted",
                    "Rejected"
                ]
            },
            "AddressType": {
                "description": "*(2.1)* A generic address format.\r\n",
                "javaType": "Address",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "name": {
                        "description": "Name of person/company\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "address1": {
                        "description": "Address line 1\r\n",
                        "type": "string",
                        "maxLength": 100
                    },
                    "address2": {
                        "description": "Address line 2\r\n",
                        "type": "string",
                        "maxLength": 100
                    },
                    "city": {
                        "description": "City\r\n",
                        "type": "string",
                        "maxLength": 100
                    },
                    "postalCode": {
                        "description": "Postal code\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "country": {
                        "description": "Country name\r\n",
                        "type": "string",
                        "maxLength": 50
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "name",
                    "address1",
                    "city",
                    "country"
                ]
            },
            "StatusInfoType": {
                "description": "Element providing more information about the status.\r\n",
                "javaType": "StatusInfo",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "reasonCode": {
                        "description": "A predefined code for the reason why the status is returned in this response. The string is case-insensitive.\r\n",
                        "type": "string",
                        "maxLength": 20
                    },
                    "additionalInfo": {
                        "description": "Additional text to provide detailed information.\r\n",
                        "type": "string",
                        "maxLength": 1024
                    },
                    "customData": {
                        "$ref": "#/definitions/CustomDataType"
                    }
                },
                "required": [
                    "reasonCode"
                ]
            },
            "CustomDataType": {
                "description": "This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.",
                "javaType": "CustomData",
                "type": "object",
                "properties": {
                    "vendorId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "vendorId"
                ]
            }
        },
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "company": {
                "$ref": "#/definitions/AddressType"
            },
            "statusInfo": {
                "$ref": "#/definitions/StatusInfoType"
            },
            "vatNumber": {
                "description": "VAT number that was requested.\r\n\r\n",
                "type": "string",
                "maxLength": 20
            },
            "evseId": {
                "description": "EVSE id for which check was requested. \r\n\r\n",
                "type": "integer",
                "minimum": 0
            },
            "status": {
                "$ref": "#/definitions/GenericStatusEnumType"
            },
            "customData": {
                "$ref": "#/definitions/CustomDataType"
            }
        },
        "required": [
            "vatNumber",
            "status"
        ]
    }
]